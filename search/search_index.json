{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Welcome to our Playbook. This document aims help our engineering, product, and design teams to operate within a clear framework of practices and achieve our mission.</p> <p>This is for anyone in our team, anyone working with our team with an interest in how we work, anyone thinking about working in our team, or anyone with a passing interest in our values.</p> <p>We have made this document public, so that we can be held to the standards set out.</p>"},{"location":"#our-mission","title":"Our Mission","text":"Ensure the fast, predictable, and uninterrupted flow of planned work         That delivers value to the business         By creating stable and secure software, and minimising the impact of unplanned work.      <p>The Platform Development Mission sits alongside AM's Core Mission</p>"},{"location":"#our-values","title":"Our Values","text":"Be bold Bravely putting ideas forwards, trying new things even if they fail Be distinctive Rebelling in the name of healthy debate, pushing boundaries in the name of better quality Be honest Being open about successes as well as failures, ready to give and receive feedback Be accountable Proactively taking responsibility for outcomes, driven to succeed"},{"location":"#join-our-team","title":"Join Our Team","text":"<p>Current opportunities in Engineering, Design, and Product management:</p> <p>And take a look at our careers site for more information about life at AM.</p>"},{"location":"Department-Policies/Absence-Leave/","title":"Absence & Leave","text":""},{"location":"Department-Policies/Absence-Leave/#sickness-unplanned-leave","title":"Sickness &amp; Unplanned Leave","text":"<p>Unplanned leave is any short notice leave that has not been booked in advance. </p> <p>It happens, and that's OK. As we, by definition, did not plan for it, our plans will probably be affected by it.</p> <ol> <li>Follow the HR guidelines on communicating unplanned absence.</li> <li>Additionally:<ul> <li>Send a message using Teams to the entire department to inform them that you are not working. This will help the team to rapidly re-plan any work as required.</li> <li>Ensure that any meetings you have are rescheduled or that the organiser knows of your absence.</li> </ul> </li> </ol> <p>Engineers</p> <p>You should always commit and push changes to your working branch at the end of the working day, including descriptive comments about the work in progress. You can never guarantee you'll be in a position to pick up where you left off the next day!</p>"},{"location":"Department-Policies/Absence-Leave/#annual-leave-planned-leave","title":"Annual Leave &amp; Planned Leave","text":"<p>Warning</p> <p>If you are planning to miss a Daily Scrum for any reason, you MUST make sure that:</p> <ul> <li>you provide an update of your WIP to the team in advance </li> <li>the Sprint Board is updated with your progress in advance </li> </ul>"},{"location":"Department-Policies/Absence-Leave/#requesting-annual-leave","title":"Requesting Annual Leave","text":"<p>Before requesting annual leave, check the planner for the dates you want to book off.</p> <p>A first come, first serve approach is applied, so booking early is advised, especially for longer periods of absence.</p> <p>We need to make sure that each of the delivery teams are able to continue working in your absence, so if other members of your team are already booked off, then you need to have a conversation with your team about the impact this might have. If you determine that the team can continue effectively with the remaining resource you are welcome to submit the request. Use the comments field in YouManage to detail the outcome of the conversation. </p> <p>Engineers:</p> <p>If you are on on the support rota during the period that you wish to book off, you should contact the Support Manager and assist them in adjusting the rota (for longer periods of absence) or finding cover (for shorter periods).</p> <ul> <li>You must take responsibility for ensuring your request is feasible. DO NOT LEAVE THIS TO YOUR MANAGER TO WORK OUT.</li> <li>The earlier you book, the easier it will be to plan for your absence</li> <li>The Longer your absence period is, the more advanced notice you should give, as a guide you should aim to give AT LEAST 2 x the booking period. (e.g. 2 days off - 4 days notice, 2 weeks off - 4 weeks notice).</li> <li>If there are meetings during your planned absence you must notify the meeting organiser(s). If you are integral to the meeting you should help to reorganise, if you are not then ensure that you work with the organiser to prepare and communicate any required input in advance. This includes all sprint meeting ESPECIALLY THE DAILY SCRUM.</li> </ul>"},{"location":"Department-Policies/Absence-Leave/#christmas-period","title":"Christmas Period","text":"<p>Christmas period bookings will not be accepted until later in the year, when we will have a clearer understanding of the anticipated workload and resource availability during that period. First come first serve does not apply, as this often yields unfair results.</p> <p>Specific details of how to submit requests will be communicated with the team when the time comes. Usually around late September.</p> <p>Please do not request annual leave over the Christmas and New Years period via YouManage until this communication has been made.</p>"},{"location":"Department-Policies/Absence-Leave/#preparing-for-planned-absence","title":"Preparing for Planned Absence","text":"<p>Generally, you must ensure that anyone you work with regularly or are likely to be working with around the time of your leave is aware of your planned absence.</p> <p>Specifically, ensure that each of the following are performed:</p> <ol> <li>When your annual leave request has been approved, <ol> <li>Ensure that your team are aware of this as soon as possible</li> <li>Take proactive steps to organise and perform any re-planning necessary</li> <li>Put the leave in your calendar, mark it as out of office</li> </ol> </li> <li>Before the sprint(s) in which your annual leave occurs:<ol> <li>If you are going to miss sprint planning, ensure that your capacity is recorded in advance or request a team member to do so for you.</li> <li>Ask the team to provide an update on the sprint plan on your return</li> </ol> </li> <li>At the start of the sprint(s) in which your annual leave occurs:<ol> <li>Ensure that your capacity is adjusted during planning</li> <li>Ensure that the sprint work is planned around your absence, especially where work depends on yourself.</li> </ol> </li> <li>The day before your leave<ol> <li>Set your out of office in Outlook and Teams</li> <li>Remind your team that you will be on leave and when you will be returning.</li> <li>Provide the team with an update of your work in progress and provide a handover if required.</li> <li>Engineers: you must ensure that any WIP code is committed to your working branch and pushed to the remote, including descriptive comments about the work in progress.</li> </ol> </li> <li>Support Engineer: If you are currently acting as Support Engineer when your leave starts, ensure that you provide a clear and complete handover to the Support Manager and the engineer who is covering during your leave.</li> </ol>"},{"location":"Department-Policies/Absence-Leave/#returning-from-plannedunplanned-leave","title":"Returning from Planned/Unplanned Leave","text":"<p>Work with your team to get yourself up to speed. You are responsible for organising this. You must prioritise this and ensure that you understand the current sprint plan and progress, and that you catch up on or reschedule any meetings or events you missed.</p>"},{"location":"Department-Policies/Flexible-Working/","title":"Flexible Working Mini-Framework","text":"<p>This mini-framework is to be used in conjunction with the company-wide Working Practices Framework.</p> <ol> <li> <p>Guidance for\u202fhybrid\u202fworking in the AM \u201cWorking Practices Framework\u201d document should be followed,\u202fincluding:</p> <ul> <li>Working from home is optional, and set-up and maintenance of an appropriate remote working space, along with travel to and from the office, is the responsibility of the employee.</li> <li>When working remotely, we expect that employees are not simultaneously providing principal care of dependants.</li> <li>When working remotely, individuals must have continuous access to a suitable internet connection.</li> <li>Employees must continue to comply with all AM Corporate Policies while working remotely.</li> </ul> </li> <li> <p>This Framework is built on trust and, to work effectively, employees must show courtesy to colleagues and, in particular, respect\u202fof each other's schedules and availability.</p> <ul> <li>There are no core hours, but there is an expectation that employees are generally available for core Delivery Team meetings and collaboration (in the office or remotely) during times determined by the requirements of their\u202frole;\u202fsuch as Daily stand ups, Sprint planning and Backlog refinements. Exceptions are enabled by agreement, where impact is discussed and measured.</li> <li>To be available for cross-team meetings with members of other divisions as required.</li> <li>To be available as agreed to cover out of\u202fhours support.</li> <li>Working location must be kept up to date and visible to all in Outlook.</li> <li>Employees should be available to come into the office for meetings or specific activity if there is a business requirement.</li> <li>It is encouraged that each team aligns in-office days. Subject to review this will initially suggested to coincide with sprint transition days (currently Tues and Weds).</li> </ul> </li> <li> <p>All meetings are to be\u202fcarried out in\u202fthe most\u202feffective way\u202fpossible, following guidance in AM's \u201cEffective Meetings Toolkit\u201d:</p> <ul> <li>It is beneficial for certain meetings to be carried out in person, such as divisional team meetings and product discovery workshops. This should be stipulated in the meeting invite when it is set up, and at least a week in advance. Teams should engage with enablement group early to request attendance for in-office meetings.</li> <li>Based on DMT examples and guidelines, Delivery teams should self-determine which meetings should be in person, and how they will measure the success of that -</li> <li>If attending meetings virtually, use of video functionality is strongly encouraged.\u202fWhere video is not\u202fpossible or appropriate,\u202fattendees\u202fshould\u202factively participate\u202fusing verbal cues.</li> </ul> </li> </ol>"},{"location":"Department-Policies/Training/","title":"Training Booking","text":"<p>Policy for AM Staff Only</p> <p>This policy applies to AM Staff. Supplier staff training is coordinated independently.</p>"},{"location":"Department-Policies/Training/#training-booking","title":"Training Booking","text":"<p>Each team member will have 13 days training per year. This equates to approximately 5% of your time.</p> <p>3 of these days are fixed and planned by the department leads. This may be used for collaborative training, such as hackathons, reading weeks etc.</p> <p>The remaining 10 days should be booked by team members. As with annual leave, they should book them with suitable advanced notice wherever possible and they will require approval from their manager.</p> <p>When booking training, a plan must be submitted (this could be at any point in advance of the booked days), this should include the training objectives and any planned outcomes. This must be accompanied by performance and personal development objectives in Clear Review.</p>"},{"location":"Department-Policies/Training/#flow","title":"Flow","text":"<pre><code>graph LR\n\nA(Plan)--&gt;B\nB(Book)--&gt;C\nC(Communicate)--&gt;D\nD(Training Time)--&gt;E\nE(Review &amp; Share)\n</code></pre>  Step Detail  Plan - Determine training objectives and create high level plan, working with line manager  - Document in ClearReview  Book - Book time to perform training, including specific outcomes of that time  - Line manager reviews and authorises  Communicate - Communicate planned absence to team, and block out in Outlook calendar as Out Of Office  Training Time - Carefully plan how you will spend your time.  - Notify the department and your team at the start of the sprint in which the training time falls.  - Set your status to unavailable/out of office.  Review  &amp; Share - Provide an update to your manager about the outcome of your training.  - Document outcomes in clear review  - Plan and book any valuable knowledge sharing with the wider team"},{"location":"Department-Policies/Training/#notes","title":"Notes","text":"<ul> <li>Team members are encouraged to train collaboratively. Days may be booked off by multiple team members simultaneously, with shared or linked objectives. However, consideration for impact on planned work should be given.</li> <li>Time spent learning \u201con the job\u201d e.g. during the course of preparing or implementing solutions, is not included.</li> <li>Where a specific subject for upcoming work requires learning, it will be up to the team, the individuals, and their managers to collaboratively determine whether it is best to create an \u201cinvestigation\u201d backlog item, or book in some time for focussed training.</li> <li>Training time can be booked in half-day increments.</li> <li>Team members are expected to use all of their training time during the course of the year.</li> <li>Managers will need to monitor team members\u2019 booked days and ensure they are used, and that the outcomes have been met. They will need to follow up on the objectives set out.</li> <li>Although training objectives must be set in advance, they may change as you learn more. Team members are encouraged to regularly review their objectives and update them as required, with their line manager\u2019s input.</li> <li>Where there is a clear case for it, and at the discretion of the relevant department head, additional training days will be granted. The primary objective is to ensure training is done, not to restrict it, however we must be cautious to ensure fairness, and that there isn\u2019t a negative impact to the business.</li> <li>The 10 bookable days is pro-rated. Part time staff will therefore receive the fixed 3 days, plus a proportion of the remaining 10. (e.g. 3 days a week = 6 days training).</li> <li>As with other planned absences, it is the responsibility of the team member requesting training time to ensure that their planned work is coordinated around their absence from the team. They must communicate the planned absence and ensure that it does not conflict with other team absences.</li> <li>If there is unplanned absence or unplanned urgent work during your planned training you may be asked to reschedule it and you must ensure you are available in case this situation arises.</li> </ul>"},{"location":"Department-Policies/Training/#how-to-book","title":"How to Book","text":"<p>Warning</p> <p>A training booking should only be made after a training objective has been set, and you have checked that the dates you wish to use do not conflict with other planned absences, work deadlines, or critical team events.</p> <p>Booking is performed via the HR system much like annual leave:</p> <ol> <li>Start an absence request</li> <li>Select the type of \"Other\"</li> <li>Select reason \"Training\"</li> <li>Enter the start and end dates (end date is the first day back in work)</li> <li>Enter a comment that describes the training you intend to perform, so that you line manager can easily identify the training objectives which should already be outlined.</li> <li>Submit your request. Your line manager will be automatically be notified.</li> </ol>"},{"location":"Onboarding/Engineering/","title":"Engineer Onboarding at AM","text":""},{"location":"Onboarding/Engineering/#welcome-to-am","title":"Welcome to AM","text":"<p>We're delighted to have you on board. Our structured onboarding process is designed to facilitate a smooth and enriching transition into our team.</p> <p>This document provides an outline of what to expect as you join our department, you and your manager can discuss the details of each of the phases.</p> <p>We recognise that everyone arrives with different expertise and experiences, and onboarding will take different forms for everyone. Your engagement with the process, coupled with regular feedback will help us adapt it to your needs and improve it for future new starters.</p> <p>This department-focussed onboarding sits alongside the business onboarding organised by HR. </p> <p>Onboarding for Managers</p> <p>New starters at [E4+ levels] (Lead, Staff, Principal) should additionally refer to the onboarding for managers guidance.</p>"},{"location":"Onboarding/Engineering/#onboarding-phases","title":"Onboarding Phases","text":"<p>Our onboarding process is structured into four distinct phases:</p>"},{"location":"Onboarding/Engineering/#1-arrival","title":"1. Arrival","text":"<p>Objective</p> <p>Familiarize you with the AM environment and ensure a warm welcome.</p> <ul> <li>When: First few hours.</li> <li>Highlights:<ul> <li>Meet your line manager.</li> <li>HR and IT inductions.</li> <li>Introduction to your department buddy.</li> <li>Team welcome meeting</li> </ul> </li> </ul>"},{"location":"Onboarding/Engineering/#2-orientation","title":"2. Orientation","text":"<p>Objective</p> <p>Settle you into your role, help you understand your immediate team, and establish a foundation for your work at AM.</p> <ul> <li>When: First few days.</li> <li>Highlights:<ul> <li>Set up your development environment with your manager.</li> <li>Explore our Working with Me pages and draft your own.</li> <li>Dive into the self-serve toolkit documentation.</li> </ul> </li> </ul>"},{"location":"Onboarding/Engineering/#3-acclimation","title":"3. Acclimation","text":"<p>Objective</p> <p>Deepen your understanding of AM's operations, products, and core methodologies.</p> <ul> <li>When: Next few weeks.</li> <li>Highlights:<ul> <li>Introduction to the product you'll be working on and our overarching product vision. With our Head of Product.</li> <li>\"Ways of working\" coaching session, covering our ethos, guiding principles, and key guidelines. With your manager.</li> <li>Overview of our architectural standards and patterns. With your manager.</li> <li>DevOps introduction. With your manager or DevOps Engineer.</li> <li>Your probation objectives will be set.</li> <li>High-level overview of our testing philosophy with our Lead Test Engineer.</li> </ul> </li> </ul>"},{"location":"Onboarding/Engineering/#4-immersion","title":"4. Immersion","text":"<p>Objective</p> <p>Foster confidence and expertise in your role, immerse you in our technological landscape, and integrate you fully into our business operations.</p> <ul> <li>When: First few months and beyond</li> <li>Highlights:<ul> <li>Insight into AM's technological estates and vision with Principal Engineer.</li> <li>Quartex platform deep-dive.</li> <li>Bi-annual face-to-face 1-2-1 with your manager has been organised and booked.</li> <li>Training and ongoing objectives have been set.</li> </ul> </li> </ul>"},{"location":"Onboarding/Engineering/#final-thoughts","title":"Final Thoughts","text":"<p>Your integration and success at AM are pivotal to us. Through these phases, we're dedicated to equipping you with the knowledge, tools, and connections necessary to excel.</p> <p>Welcome to the AM family!</p>"},{"location":"Onboarding/Engineering/Engineering-Buddy-Guide/","title":"Engineering Buddy Guide","text":"<p>So, you've been asked to buddy up with a new starter? Here's what you need to know...</p> <p>Becoming an Engineering Buddy is a unique opportunity to make a significant difference in the early days of a new colleague's journey. Whether they're a software engineer or test engineer, your role is instrumental in ensuring their transition is smooth, informative, and welcoming. This guide will walk you through the key responsibilities and best practices of an effective Engineering Buddy.</p>"},{"location":"Onboarding/Engineering/Engineering-Buddy-Guide/#responsibilities","title":"Responsibilities","text":"<ol> <li> <p>Warm Welcome: As a first point of contact, ensure they feel integrated into our engineering culture. A friendly face and open communication can set the tone for their entire onboarding experience.</p> </li> <li> <p>Clarify the Basics: Ensure they have a solid foundational understanding of our:</p> <ul> <li>Team structures</li> <li>Working environment setup - such as local development and testing tools.</li> <li>Codebase and repositories.</li> <li>Tools, platforms, and tech stack.</li> <li>Development and testing methodologies and tools.</li> <li>Documentation repositories</li> <li>Working practices and methodologies.</li> </ul> </li> <li> <p>Navigate the Code: Take them through our main codebase, as appropriate for their role. Discuss our coding and testing standards, comment practices, and the code or test architecture of the major modules.</p> </li> <li> <p>Pair Programming/Testing: Dedicate some time to pairing. This hands-on approach allows them to familiarize themselves with our code and understand our development flow.</p> </li> <li> <p>Regular Check-ins: Have daily touchpoints for the first week: a quick call rather than a message, then switch to less frequent check-ins based on their comfort and confidence level.</p> </li> <li> <p>Feedback Loop: Encourage them to share their insights, questions, and feedback. Address any gaps or uncertainties they might have. Proactively seek feedback by asking questions.</p> </li> <li> <p>Introduce to the Team: Ensure they get to know key team members, especially those they'll be working closely with.</p> </li> <li> <p>Cultural Integration: Share the unwritten rules, the fun rituals, and the quirks that make our engineering team unique.</p> </li> <li> <p>Provide Resources: Point them to essential documentation, wikis, and any other resources that will assist their learning process.</p> </li> <li> <p>Problem-Solving Support: Be there to guide them through challenges, whether it's a code issue, a tool they're unfamiliar with, or a company process they're yet to grasp. If you're not sure that's ok, bring a SME in to help you.</p> </li> </ol>"},{"location":"Onboarding/Engineering/Engineering-Buddy-Guide/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Empathy: Remember your first days and the challenges you faced. Be the support that you wish you had had.</p> </li> <li> <p>Active Listening: Pay attention to their concerns, questions, and feedback. Sometimes, all they need is someone to listen. Ask the questions that encourage further sharing and openness.</p> </li> <li> <p>Patience: They might ask the same question more than once, or need more time to understand a concept. Be patient and provide explanations as needed. They are processing a great deal of information.</p> </li> <li> <p>Encourage Independence: While it's important to be there for them, also encourage them to find answers independently. It's a fine balance between providing support and fostering self-reliance.</p> </li> <li> <p>Feedback: Constructive feedback is essential. Guide them on how they can improve and celebrate their early wins.</p> </li> </ul>"},{"location":"Onboarding/Engineering/Engineering-Buddy-Guide/#getting-help","title":"Getting Help","text":"<p>As an Engineering Buddy, you are not expected to onboard a new team member all by yourself. Most of that responsibility lies with their manager. You can find out more about how line managers support new starters here.</p> <p>If you need help with your buddying, speak to your manager, or the manager of your buddy. Either will be able to offer support.</p>"},{"location":"Onboarding/Engineering/Engineering-Buddy-Guide/#final-thoughts","title":"Final Thoughts","text":"<p>Your role as an Engineering Buddy is pivotal in setting the stage for a new starter's success. By providing them with the tools, support, and environment they need to thrive, you're not only helping them but also contributing to the strength and unity of our engineering team.</p>"},{"location":"Onboarding/Engineering/Line-Managers-Duties-For-New-Starters/","title":"Line Manager Duties for New Starters","text":""},{"location":"Onboarding/Engineering/Line-Managers-Duties-For-New-Starters/#welcoming-new-talent-making-first-impressions-count","title":"Welcoming New Talent: Making First Impressions Count","text":"<p>Embarking on a journey with a new company marks a pivotal step in a colleague's professional trajectory. For the newcomer, it represents a mix of anticipation, inquisitiveness, and understandably, a touch of apprehension about integrating into a new environment. From the company's perspective, it's an opportunity to bring fresh insights, innovative skills, and renewed energy into the fold. Given this mutual significance, it's paramount that we provide a seamless and enriching onboarding experience.</p>"},{"location":"Onboarding/Engineering/Line-Managers-Duties-For-New-Starters/#the-importance-of-onboarding","title":"The Importance of Onboarding","text":"<p>A meticulously crafted onboarding process goes beyond merely introducing a new colleague to the company's tools and workflows. It sets the stage for their entire journey with the organisation. Through this process, we convey our ethos, values, and the paramount importance we place on every colleague. Furthermore, a wholesome onboarding experience can significantly elevate a newcomer's confidence, foster optimal productivity, and instil a profound sense of belonging.</p>"},{"location":"Onboarding/Engineering/Line-Managers-Duties-For-New-Starters/#our-onboarding-philosophy","title":"Our Onboarding Philosophy","text":"<p>At the core of our approach is a simple yet cardinal tenet: onboarding is paramount. Throughout the onboarding phases, supporting the integration of our new colleague becomes our primary focus, taking precedence over other regular duties. This approach is our testament to the future, ensuring our newest colleagues embark on their journey equipped with all the requisite knowledge, tools, and support they deserve.</p>"},{"location":"Onboarding/Engineering/Line-Managers-Duties-For-New-Starters/#onboarding-checklist-your-blueprint-for-success","title":"Onboarding Checklist: Your Blueprint for Success","text":"<p>As a line manager of a new starter, you take primary responsibility for coordinating and supporting their onboarding. As well as supporting the new starter, you will also need to provide support to their Engineering Buddy.</p> <p>To ensure clarity and efficiency in this critical phase, we've curated an onboarding checklist. This comprehensive guide is designed to span the entirety of the onboarding journey. As line managers, we must create an individual  version of this checklist for our new colleague and monitor its completion.</p> <p>The checklist unfolds through the 4 onboarding phases plus an additional phase before their first day:</p> <ol> <li>Pre Arrival - This two-week period is all about preparation, setting the stage for the colleague's official start at AM.</li> <li>Arrival - In these initial hours, we focus on introducing our new colleague to the AM environment and ensuring they feel genuinely welcomed.</li> <li>Orientation - Spanning the first few days, this phase is about helping our new colleague settle into their role, acquainting them with their team and toolkit, and laying the groundwork for their future contributions at AM.</li> <li>Acclimation - Over the next few weeks, we aim to deepen their grasp of AM's operations, our product range, and our foundational methodologies.</li> <li>Immersion - In the months that follow, the goal is to bolster their confidence and expertise, immerse them in our tech ecosystem, and ensure they're seamlessly integrated into our business processes.</li> </ol> <p>To initiate this journey, access our Onboarding checklist.</p>"},{"location":"Onboarding/Engineering/Onboarding-for-managers/","title":"Onboarding for Managers","text":""},{"location":"Onboarding/Engineering/Onboarding-for-managers/#joining-as-an-e4-manager","title":"Joining as an E4+ / Manager","text":"<p>Starting a new leadership or managerial role can be challenging, as you learn about an organisation and your new job you also have to learn about your new team and the personalities within it, and take on leadership responsibilities. </p> <p>This guide supplements the primary onboarding guide, and provides an outline of the additional onboarding outcomes at each of the 4 phases.</p> <p>Note that in some instances line management transfer may occur later than outlined here, due to other constraints. This will be coordinated by your manager and the VP of Engineering.</p>"},{"location":"Onboarding/Engineering/Onboarding-for-managers/#onboarding-phases","title":"Onboarding Phases","text":""},{"location":"Onboarding/Engineering/Onboarding-for-managers/#1-arrival","title":"1. Arrival","text":"<p>No additional outcomes </p>"},{"location":"Onboarding/Engineering/Onboarding-for-managers/#2-orientation","title":"2. Orientation","text":"<ul> <li> <p>When: First few days.</p> </li> <li> <p>Manager handover sessions: learn about your new team members from their current managers.</p> </li> <li>Arrange and book 1-2-1 introductory meetings with your reports.</li> </ul>"},{"location":"Onboarding/Engineering/Onboarding-for-managers/#3-acclimation","title":"3. Acclimation","text":"<ul> <li> <p>When: Next few weeks.</p> </li> <li> <p>Arrange and book a 1-2-1 with each Product Manager to gain an understanding of their business domain.</p> </li> <li>Engineering Leadership in-person welcoming session.</li> <li>Introduction to the business and department objectives.</li> </ul>"},{"location":"Onboarding/Engineering/Onboarding-for-managers/#4-immersion","title":"4. Immersion","text":"<ul> <li> <p>When: First few months.</p> </li> <li> <p>Ongoing Engineering Leadership in-person meet-ups booked in.</p> </li> <li>Recurring \"Ways of Working\" (WoW) coaching with Principal Engineer booked in.</li> <li>Introduction to Coaching and Mentoring with VPE.</li> </ul>"},{"location":"Progression-Framework/","title":"Progression Framework","text":"<p>This section outlines the career progression frameworks within the Platform Development department.</p>"},{"location":"Progression-Framework/engineering-progression-framework/","title":"Engineering Progression Framework","text":"<p>This framework is designed to offer engineers clarity on the competencies expected within their role, and guide their career progression.</p> <p>This should be used by engineers and their managers to guide training and personal development needs.</p> <p>Hiring managers should use this framework to help inform hiring decisions.</p> <p>Role applicants can also use this information to understand what would be expected, and also gain clarity on the future opportunities within AM. </p> <p>Updates</p> <p>This framework will be updated annually, as roles and business needs evolve.</p>"},{"location":"Progression-Framework/engineering-progression-framework/#role-types-and-levels","title":"Role Types and Levels","text":"<p>In Engineering at AM there are various Role Types, for example: Software Engineering, Test Engineering, DevOps Engineering.</p> <p>Role Levels represent the level of the engineer, there are 6 levels.</p> <p>The levels are represented E0-E5, where E5 is most senior.</p> <p>Apprenticeships</p> <p>The competency matrix places apprentices and junior engineers together: i.e. the expected behaviours are the same. This is because an apprentice is in training for the junior role. </p> <p>An apprentice is not expected to perform at the level of a junior, but they are expected to work towards this level.</p> <p>Any apprentice will additionally have clear training objectives specific to their apprenticeship scheme.  </p>"},{"location":"Progression-Framework/engineering-progression-framework/#career-progression-pathways","title":"Career Progression Pathways","text":"<p>Below describes a the simple progression pathway an engineer may take through role levels.</p> <p>While this diagram presents a linear progression path, it is not expected or implicit that an engineer must pass through each level, nor that they can only progress within the same role type. For example, a test engineer may move into a DevOps role.</p> <p>This progression path demonstrates the current and near-future role types and levels, but it is expected that this will evolve alongside AM's changing needs.</p> <p>Progression beyond E4</p> <p>Progression beyond E4 level engineers has not been defined, due to the current and planned structure of the department. However, E5 competencies are partially outlined to provide guided progression for E4 engineers.</p> <pre><code>flowchart TD\nE0\n\nE0([E0: Apprentice]) --&gt; S-E1([S-E1: Junior Software Engineer])\nS-E1 --&gt; S-E2([S-E2: Software Engineer])\nS-E2 --&gt; S-E3([S-E3: Senior Software Engineer])\nS-E3 --&gt; S-E4a([S-E4: Staff Engineer])\nS-E3 --&gt; S-E4([S-E4: Lead Engineer])\nS-E4a --&gt; E5\nS-E4 --&gt; E5\n\nE0 --&gt; T-E1([T-E1: Junior Test Engineer])\nT-E1 --&gt; T-E2([T-E2: Test Engineer])\nT-E2 --&gt; T-E3([T-E3: Senior Test Engineer])\nT-E3 --&gt; T-E4([T-E4: Lead Test Engineer])\nT-E4 --&gt; E5\n\nE0 --&gt; DO-E1([DO-E1: Junior DevOps Engineer])\nDO-E1 --&gt; DO-E2([DO-E2: DevOps Engineer])\nDO-E2 --&gt; DO-E3([DO-E3: Senior DevOps Engineer])\nDO-E3 --&gt; DO-E4([DO-E4: Lead DevOps Engineer])\nDO-E4 --&gt; E5\n\nsubgraph E1\nS-E1\nT-E1\nDO-E1\nend\n\nsubgraph E2\nS-E2\nT-E2\nDO-E2\nend\n\nsubgraph E3\nS-E3\nT-E3\nDO-E3\nend\n\nsubgraph E4\nS-E4\nS-E4a\nT-E4\nDO-E4\nend\n\nsubgraph E5\nTBD\nend</code></pre>"},{"location":"Progression-Framework/engineering-progression-framework/#leadership","title":"Leadership","text":""},{"location":"Progression-Framework/engineering-progression-framework/#managerial-leadership","title":"Managerial Leadership","text":"<p>The competence framework describes behaviours expected of individuals with line management responsibility. </p> <p>There are 3 levels of management responsibility: </p> <ol> <li>M1: Manager of E0/E1 - An entry to line management, usually managing just one junior or apprentice engineer.</li> <li>M2: Manager of E0-E3 - An accomplished manager, usually managing 2 or more engineers. Typically this would be a Lead level Engineer (E4)</li> <li>M3: Manager of E4+ - A highly accomplished manager, usually managing one or more managers.</li> </ol>"},{"location":"Progression-Framework/engineering-progression-framework/#non-managerial-leadership","title":"Non-Managerial Leadership","text":"<p>Management responsibility is not for everyone. We have created a progression route that enables highly experienced, expert engineers to move into leadership roles, these are know as Staff Engineers (S-E4). Staff and Lead engineers share many behaviours, however, a staff engineer would maintain a more holistic system architecture knowledge, as well as profound understanding of the business domain.</p>"},{"location":"Progression-Framework/engineering-progression-framework/#competency-matrix","title":"Competency Matrix","text":"<p>The matrix of competencies provides a clear description of an engineer's responsibilities and expected competencies for each level. This document serves as a foundation for communication between an engineer and their manager(s), and it also facilitates feedback between colleagues. </p> <p>Our assumption is that engineers can demonstrate their competencies within their specific role and field of work, given adequate opportunities. However, we acknowledge that certain constraints within their role, field of work, and opportunities may impact their ability to demonstrate certain competencies.</p> <p>Download the Engineering Competency Matrix</p>"},{"location":"Progression-Framework/engineering-progression-framework/#matrix-structure","title":"Matrix Structure","text":"<p>The matrix is broken down into three sections:</p> <ol> <li>Core Engineering Competencies - competencies that are expected of all role types</li> <li>Role Specific Competencies - competencies that are expected of engineers within a specific role type</li> <li>Management Competences - competencies that are expected of engineers with management responsibilities</li> </ol> <p>Each section contains a number of competencies, grouped into themes and topics.</p> <p>Each competency describes behaviours that are expected at each role level.</p> <p>We recognize that growth is not a linear or straightforward process, which means that engineers may demonstrate competencies at various levels. For example, an engineer may exhibit strong debugging skills at level E3, while their security skills may be more in line with level E1. </p> <p>To account for this, we treat the competency matrix as a guideline rather than a checklist, and we acknowledge that some minor deviations are normal. If there is evidence of overall growth, these deviations will not hinder an engineer's promotion.</p>"},{"location":"Progression-Framework/engineering-progression-framework/#implicit-behaviours","title":"Implicit Behaviours","text":"<p>Behaviours of more junior role levels are implicitly expected at each level above, except where that behaviour has explicit stated differently. I.e. an E2 engineer is expected to perform each behaviour of the E1 engineer, plus any specified additional competencies. </p>"},{"location":"Progression-Framework/engineering-progression-framework/#glossary","title":"Glossary","text":"<p>Specific language is used to improve consistency. </p> <p>Often / Very Often / Always</p> <p>Occurs frequently / most of the time / consistently and reliably all of the time Always is the default, if none is stated.</p> <p>Proactively</p> <p>Taking the initiative without being asked.</p> <p>Objectives</p> <p>Refers to Departmental and Product Delivery Team objectives.</p> <p>Primary Languages &amp; Technologies</p> <p>The language(s) that an engineer is most competent and experience with.</p> <p>Default Languages &amp; Technologies</p> <p>The languages our business use by default for implementing solutions.</p> <p>System Context (Technical domain)</p> <p>Information regarding our technology specific to a context or problem.</p> <p>Technology Estate</p> <p>Encapsulates all the technical domains. E.g. all system context.  (See C4 Architecture)</p> <p>Piece of work</p> <p>A generic term referring to a discrete task, a backlog item, a feature, or a roadmap item. </p> <p>Platform/Service Architecture</p> <p>How the platform or set of services is architected.</p> <p>Component Architecture</p> <p>How a specific independent component is architected.  (See C4 Architecture)</p> <p>Container</p> <p>An architecturally grouped set of solution components. (See C4 Architecture)</p> <p>Team</p> <p>Refers to the Product Delivery team the engineer works within.</p> <p>Able / Proficient / Expert</p> <p>A basic capability based on limited experience / A good capability based on repeated and varied experience / An excellent capability based on significant and varied experience and supported by theoretical knowledge. </p> <p>Technology Vision</p> <p>The planned future state of the technology estate. </p> <p>Business Domain</p> <p>AM's overall area of activity.</p>"},{"location":"Ways-of-Working/","title":"Ways of Working","text":"<p>At AM we have developed a delivery system, which outlines how value is delivered by the Platform Development team.</p> <p></p> <p>In this section you will find information about our delivery system, the values that guide our working practices, and the mechanisms we use.</p>"},{"location":"Ways-of-Working/Technical-Design-Workshops/","title":"Technical Design Workshops","text":"","tags":["Architectural Design"]},{"location":"Ways-of-Working/Technical-Design-Workshops/#design-session-guidelines","title":"Design Session Guidelines","text":"<p>A Technical Design Workshop is an opportunity for the team to come together to design a technical solution for a problem, creating Alignment and Confidence in the approach. </p> <p>This document aims to share some guidelines on how to maximize the opportunity.</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Technical-Design-Workshops/#inputs","title":"Inputs","text":"<p>Careful planning and preparation is required to ensure the Technical Design Workshop is successful. The following is a non-exhaustive list of Inputs required.</p> <p>Many of these input should already be documented.</p> Input Details Ownership Session Plan A plan for the design session (e.g. format, agenda, participants, duration) Engineering Owner Stakeholder Map A visual representation of all the stakeholders of a roadmap item. Product Lead Problem Statement A clear summary of the problem being solved. Product Lead Problem Requirements A clear breakdown requirements. Product Lead Solution Vision A vision of how we will realize the solution this (e.g. low-fi designs) Product Lead RAID Log Documented Risks, Assumptions, Issues, Dependencies Product Lead, Engineering Owner Existing Architecture An understanding of existing related or dependent technologies Engineering Owner Technical Limitations Specifications of any technical limitation that must be followed to engineer the solution. Engineering Owner Investigation outcomes Summary of learnings from up-front investigations Engineering Owner <p>Note</p> <p>Responsible refers to who must ensure inputs are prepared. It will be neccessary to involve others to create them.</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Technical-Design-Workshops/#during","title":"During","text":"<p>Here are some tips to ensure the success of a Technical Design Workshop</p> <ul> <li>Accountability: The Engineering Owner is accountable for the Technical Design of a solution and outcomes of these workshops.</li> <li>Duration:<ul> <li>Break it down into chunks</li> <li>High-level design can identify the need for multiple low-level designs </li> </ul> </li> <li>Location:<ul> <li>In person is better where possible</li> <li>Hybrid should be avoided where possible (multiple people in person, multiple people dialled in)</li> <li>Large, complex, or very complicated problems will benefit from face-to-face collaboration</li> <li>Urgency should take preference over coordinating face-to-face design</li> </ul> </li> <li>Give careful consideration to pre-existing solutions, but always evaluate their efficacy, and be sure the problem is fully understood first.</li> <li>Be prepared to challenge ideas. Solutions may be put forward, they need to be challenged.</li> <li>If during the session it is clear the outcomes cannot be achieved, make a plan to revisit and continue the technical design </li> <li>Always capture:<ul> <li>Risks, Assumptions, Issues and Dependencies.</li> <li>Designs and ideas agreed and discarded.</li> </ul> </li> <li>Ensure that someone is tasked with recording these throughout the workshop, and review them frequently.</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Technical-Design-Workshops/#outputs","title":"Outputs","text":"<p>Following the completion of a Technical Design Workshop the following outputs are expected:</p> <ul> <li>High-level implementation plan - this should include rationalised Rough Order of Magnitude (ROM) estimates as well as an iterative and incremental order of delivery, decorated with dependencies and milestones. Consider critical path mapping.</li> <li>RAID Log - this should be an ongoing output during the whole of the design session, consider having a dedicated RAID logger to continually update the RAID log. </li> <li>Functional Design Definition - this should detail how the solution will behave functionally.</li> <li>Technical Design - this should detail how we will go about engineering the solution and should include any additional investigations needed to validate the technical design.</li> <li>High-level Test Plan - this should detail the approach of how we will test the solution, this shouldn't be exhaustive but should contain the approach and any additional investigations needed.</li> <li>Design Plan - update the plan for continuing the design process.</li> <li>Stakeholder update plan - Create a plan for communicating the outcomes of the session with stakeholders.</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Technical-Design-Workshops/#outcomes","title":"Outcomes","text":"<p>The following are the expected outcomes of a Technical Design Workshop, if the team hasn't achieved the expected outcomes then it is an indication that further design work is necessary: </p> <ul> <li>Aligned on &amp; confidence in functional &amp; technical design</li> <li>Aligned on a plan for design &amp; definition</li> <li>Understanding of unknown and investigations required</li> <li>Stakeholders understand the route to problem resolution</li> </ul> <p>Tip</p> <p>If travel will be required for a Technical Design Workshop, consider organising workshops for other problems consecutively. This may reduce travel fatigue as well as costs. Be careful not to overload attendees, as these workshops can be draining.</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/AMPFlow/","title":"AMPFlow Delivery System","text":"<p>AMPFlow (AM Platform Flow) is an evolving, adaptive, open-closed technology delivery system designed by and for AM\u2019s Platform Development Division to enable us to solve business problems of any type in order to generate business value, using technology (\u201ctechnology problems\u201d).</p> Structure &amp; Terminology <p>AMPFlow is built up of a number of structural components:</p> <ul> <li>A Goal &amp; Tenets</li> <li>Zones</li> <li>FLOW</li> <li>Governance</li> <li>Toolkit</li> </ul> <p>AMPFlow describes AM\u2019s Software Development Lifecycle (SDLC), but does not assume solving that technology problems will require the creation of software. Instead of referring to the SDLC, we refer to the \u201cDelivery System\u201d or \u201cAMPFlow\u201d interchangeably, and the \u201cProblem Solving Lifecycle\u201d.</p> <p>These components, and other terms used in by AMPFlow are defined on the Terminology page </p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#goal","title":"Goal","text":"Enable a fast, predictable, safe, and transparent flow of business value, by incrementally creating stable and secure solutions to technology problems of any type.","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#tenets","title":"Tenets","text":"<ul> <li> <p> Principles</p> <ul> <li>Continuous Improvement</li> <li>Continuous Deployment</li> <li>Continuous Quality</li> <li>Continuous Collaboration</li> <li>Continuous Planning</li> <li>Continuous Autonomy</li> </ul> <p>Read </p> </li> <li> <p> Ideals</p> <ul> <li>Locality &amp; Simplicity</li> <li>Focus, Flow &amp; Joy</li> <li>Psychological safety</li> <li>Improvement of daily work</li> <li>Value focus</li> <li>A Bias towards action</li> </ul> <p>Read </p> </li> </ul>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#zones","title":"Zones","text":"<p>AMPFlow has 4 zones:</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#discovery-zone","title":"Discovery Zone","text":"<p>Goal: Ensure that the next problem solved will produce business value effectively</p> <p>The first zone is where problems are identified, and understood before they are validated, prioritised.</p> <p>Identifying and understanding problems means ensuring there is alignment on the problem being solved, that they are discrete and independent problems.</p> <p>A validated problem means it is:</p> <ol> <li>genuine \u2013 it really exist</li> <li>valuable \u2013 solving it is likely to Implementation business value</li> <li>viable \u2013 solving it is worthwhile</li> <li>feasible \u2013 solving it is possible.</li> </ol> <p>Validation may be time or situation specific (problems may become valid or invalid over time or under varied conditions).</p> <p>Prioritised means identifying which problem is most valuable to solve next.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#design-zone","title":"Design Zone","text":"<p>Goal: Determine the best solution (for the problem) and approach to implementing it</p> <p>The second zone is where solutions are researched, selected, then designed and implementation is planned.</p> <p>Design is iterative. High-level solutions to the problem are determined through exploration (divergence) and alignment (convergence). When alignment it reached, low-level design, can commence, where implementation specifications are detailed. </p> <p>At each level (high- and low-level), design will generally include a functional, technical, and experiential component.</p> <p>Additionally, at each level, high- and low-level delivery plans can be produced: how would this solution be implemented?</p> <p>During design insights are created as more is learnt about the problem. This creates a feedback loop into the first zone, enabling improved problem discovery. This may result in the problem being broken down into smaller problems which can be solved independently.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#implementation-zone","title":"Implementation Zone","text":"<p>Goal: Incrementally implement and deliver solutions </p> <p>The designs and plans created during the design zone are implemented and executed. </p> <p>Implementation can commence as soon as enough is known about the solution and a plan is in place. The simplest, highest priority deliverable can be implemented while design can then continue for </p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#operation-zone","title":"Operation Zone","text":"<p>Goal: Measure success of solutions, assert continuity, and derive insights for next actions.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#flow","title":"Flow","text":"<p>FLOW is the core and primary component of the delivery system. Illustrating the high level direction of information and action within the delivery system, aiding in planning and navigation.</p> <p>Flow is agnostic of how, who, or what, but includes generic activities and the order they will typically occur.</p> <p>Continuous Feedback</p> <p>While FLOW goes left to right, there is continuous feedback meaning that activities on the left may continue to occur repeatedly throughout the problem lifecycle.</p> <p></p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/#flow-activities-elements","title":"Flow Activities Elements","text":"<p>These activities are generic and do not specify how they are performed. How is either controlled by governance, or determined as appropriate by teams.</p> Explore <p>Objective: Identify new opportunities and potential areas for improvement or innovation with technology for the business.</p> <p>Exploring is the act of finding and understanding problems. Problems may arise from many sources, such as observations (see Measure and Monitor), compliance changes, or business strategies.</p> <p>Problems can be broken down to make them easier to solve, usually as the understanding of the problem improves. This may produce linked problems (a problem is discovered to be more than one related problems), discrete problems (a problem is discovered to be more than one unrelated problems), or descendant problems (a larger problem can be addressed piecemeal and incrementally).</p> <p>Problem determination involves understanding the type of problem. Different types of problems require different actions, in order to efficiently and effectively move away from chaos towards complex problems and clear problems.</p> Validating <p>Objective: Determine if the problem can and should be solved by the business, and produce a hypothesis for how it the value it will create.</p> <p>Validation tells us if a problem is real, clear and discrete, and if not leads us to breaking problems down and performing clarification. Validation identifies value hypotheses, viability, and feasibility.</p> <p>Validation ideally happens as early as possible, to reduce waste. However, throughout the problem lifecycle more is learnt about the problem, and new linked or descendant problems may be identified (see problem insights), and thus validation happens continuously. </p> <p>Problems determined to be invalid are archived.</p> Prioritising <p>Objective: Determine what the order in which problem should be solved.</p> <p>Valid problems are prioritised so that work can commence in other zones on the most valuable problem. Priorities can change, and as validation is continuous, so is prioritisation. Changing priorities can produce waste, however, failure to shift focus to higher priority problems will be more wasteful. </p> Requirements Definition <p>Objective: Define detailed and specific requirements from stakeholders, capturing and developing upon what has been learnt throughout Discovery.</p> <p>Example Approaches: interviews, surveys, and requirements workshops.</p> Solution Design <p>Objective: Develop technical, user, and functional designs for an incrementally delivered solution.</p> <p>Example Approaches: Create design mock-ups, architectural diagrams, and detailed specifications.</p> Delivery Planning <p>Objective: Plan the steps, timeline, and resources needed for implementation.</p> <p>Example Approaches: Develop delivery timelines, allocate resources, and set milestones.</p> Implement/Deploy/Validate/Release <p>Objective: Execute the incremental development, testing, deployment, and release of the solution.</p> <p>Example Approaches: Code development, testing, deployment to production, and post-release validation.</p> Element: The Technology Ecosystem <p>This represents the culmination of all technology created, such as tools, platforms, services, configurations.</p> Hypothesis Evaluation <p>Objective: Assess the effectiveness of the implemented solution against initial hypotheses.</p> <p>Example Approaches: Analyze success or performance metrics, user feedback, and business impacts.</p> Problem Insights <p>Objective: Extract insights and lessons throughout the problem lifecycle to refine the problem, solution, and plan.</p> <p>Example Approaches: Collect and manage risks, assumptions, issues and dependencies. Review progress and estimates, and re-plan frequently. Perform stakeholder and customer interviews, tests, and demos.</p> Competency Learnings <p>Objective: Extract insights and lessons from the problem lifecycle to improve future processes.</p> <p>Example Approaches: Conduct retrospectives and after action reviews, review estimation accuracy and time spent, create experiments, document and communicate outcomes, and update toolkit guides and default approaches.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/","title":"AMPFlow Terminology","text":"<p>This section describes the meaning and purpose of the structural components of the delivery system.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#goals-tenets","title":"Goals &amp; Tenets","text":"<p>AMPFlow is guided by Goals and Tenets. </p> <p>Goals set out the purpose of the delivery system and provide a way of qualifying if the system is effective. </p> <p>Tenets set out the values that guide what goes into a system and how we behave. Tenets can include:</p> <ol> <li>Principles: Quantitative and controllable values. We can define practices that cause them, and we can assert that they are happening.</li> <li>Ideals: Qualitative and influenceable values. We can influence and enable them, and measure them with indicators. </li> </ol>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#zones","title":"Zones","text":"<p>The delivery system is broken down into familiar \u201czones\u201d, which encapsulate parts of the whole system, and each of which has an objective. </p> <p>The zones are sequentially placed to reflect the initial order they would typically occur. However the model does not prohibit information or action flowing from any zone to another nor action occurring simultaneously in any zone.</p> <p>In typical delivery systems (or SDLCs) zones may be referred to as \u201cPhases\u201d. Given that phases infers a linear sequence, AMPFlow replaces this terminology.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#flow","title":"FLOW","text":"<p>FLOW is the core and primary component of the delivery system. Illustrating the high level direction of information and action within the delivery system, aiding in planning and navigation (where).</p> <p>Flow is agnostic of how, who, or what. It simply aids planning and navigation.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#governance","title":"Governance","text":"<p>Governance outlines the mechanisms that actors must adhere to in each of the delivery system\u2019s zones. Governance provides the controls of the delivery system. </p> <p>The more artefacts, responsibilities and mechanisms that exist within the system\u2019s Governance, the more closed a system is.</p> <p>The governance may also specify has interfaces between each of the zones. Zone interfaces outline the criteria that must be met in order to commence work in that zone. Zone interfaces help enforce controls, and enable downstream work to occur more effectively. However, such interfaces are gates which reduce adaptability and Implementation linearity, and therefore should be minimised.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#toolkit","title":"Toolkit","text":"<p>The Toolkit contains all of the mechanisms that may be used in one or more zones by actors as they see fit.</p> <p>The toolkit is not controlled and continually evolves. Actors will determine the tools they wish to use based on experience and experimentation and the nature of the problem, and may be guided by consultation with stakeholders and peers. New tools can be added at any time as appropriate.</p> <p>The toolkit provides flexibility in how a problem is solved, leading to a more open system.</p> <p>Note: here \u201ctool\u201d does not refer to a software tool or service, often also referred to as tools or tooling. The mechanisms within the Delivery System toolkit may leverage software and describe how it is used.</p> <p>Minimum Viable Guardrails</p> <p>Minimum Viable Guardrails (or MVGs) is a principle where a system or mechanism provides only the controls absolutely necessary prevent specific failures, while promoting autonomy. </p> <p>MVGs balance standardisation, adaptability and autonomy by promoting lean practices that enable teams to start solving problems with just the minimum amount of information required.</p> <p>Governance in AMPFlow can be considered MVGs.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#mechanisms","title":"Mechanisms","text":"<p>Mechanisms are the operating techniques or practices which make up our toolkit. They provide guidance or instruction.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#artefacts","title":"Artefacts","text":"<p>Artefacts are the tangible outputs which are produced by the mechanism we use, such as UI designs, technical designs, specifications, or other documents.</p>","tags":["draft"]},{"location":"Ways-of-Working/AMPFlow/AMPFlow-Terminology/#responsibilities","title":"Responsibilities","text":"<p>Responsibilities define who must or should have ownership of the mechanisms or artefacts, or of outcomes. Responsibility can be categorised in different ways, such as responsible or accountable. Responsibilities are part of Governance, but also used in the toolkit.  </p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/","title":"Governance","text":"<p>Governance sets out controls that stipulate how we work. </p> <p>Controls can reduce autonomy and adaptability, and therefore should be minimised. The purpose of governance must me made clear in order to prevent unwanted controls from being introduced</p> <p>There are 3 key areas of governance: Delivery, Problem, and Technology, each with specific purposes.</p>"},{"location":"Ways-of-Working/Governance/#objectives","title":"Objectives","text":"<p>Governance within AMPFlow aims to:</p> <ul> <li>1: Prevent the implementation of critical flaws</li> <li>2: Guarantee excellent information flow</li> <li>3: Maintain and improve team autonomy</li> <li> <p>Achieving 1 and 2 enables 3.</p> </li> </ul>"},{"location":"Ways-of-Working/Governance/#overview","title":"Overview","text":""},{"location":"Ways-of-Working/Governance/Delivery-Governance/","title":"Delivery Governance","text":"<p>Delivery Governance ensures the effective management and team autonomy over problem delivery processes to achieve successful and timely problem outcomes while adhering to the minimum viable guardrails, goals and tenets</p> <p></p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/","title":"After Action Reviews","text":"<p>An After Action Review is a point in time analysis of actions taken where there is opportunity for learning. </p> <p>The objective of an After Action review is to ensure time is taken to learn from previous actions, especially where mistakes have been made, and to produce an After Action Report for the benefit of team reference, and stakeholder communication. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#performing-after-action-reviews","title":"Performing After Action Reviews","text":"<p>This procedure can occur during any AMPFlow zone where there is perceived value in learning, but is required after any major milestones such as releases.</p> <p>Note</p> <p>After Action Reviews are synonymous with \"Wash Ups\", \"Mop Ups\", \"Post Mortems\". After Action Review avoids terminology that assumes failure or damage. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#after-action-reports","title":"After Action Reports","text":"<p>After Action Reports (report) are artefacts produced by the delivery team, and consist of an analysis of any action(s) where opportunity for learning is identified. It will typically include a summary of the After Action Report event, a list of outcomes, identified improvements, and actions.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that reviews occur at appropriate times and that reports are produced and effectively communicated Delivery Team The whole Delivery team is collectively responsible for performing reviews and involving appropriate stakeholders, and for producing reports <p>Note</p> <p>Actions determined during the review process must be assigned owners, who are responsible for performing or coordinating that action.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#triggers","title":"Triggers","text":"<p>The team responsible for a problem will need to determine and document when After Action Reviews should occur. This will typically be after an action(s) where an opportunity for learning is identified and should be pro-actively planned where possible</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#communication-plan","title":"Communication Plan","text":"<p>The team responsible for a problem will need to determine and document an After Action Reviews and After Action Reports communication plan, typically consisting of an approach to communicating with, and defining clear expectations for engagement with colleagues and stakeholders. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#considerations-approach","title":"Considerations &amp; Approach","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/After-Action-Review/#tag:aar","title":"AAR","text":"<ul> <li>            After Action Review          </li> </ul>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/","title":"Delivery Modelling","text":"<p>Delivery modelling is a collaborative event during which a delivery model is produced or updated. </p> <p>The objective of Delivery Modelling is to generate a \"point in time\" alignment between product management, design, engineering leadership, and key business stakeholders on:</p> <ul> <li>the order in which problems will be addressed in the medium-term (e.g. 9-18 months). </li> <li>dependencies between problems and with other business objectives, and their know time-frames.</li> <li>ownership of problems.</li> <li>our perception of the scale and types of the work required.</li> </ul>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/#performing-delivery-modelling","title":"Performing Delivery Modelling","text":"<p>During the event, the Problem Owner will share problem value propositions and any relevant information - this will vary depending on the \"maturity\" of the problem (how far through the lifecycle it is).</p> <p>Participants will consider and discuss dependencies, work involved for all disciplines (such as product management, design, engineering) and the likely \"rough order of magnitude\" of the work, and the Problem Lead will document these details.</p> <p>Participants will use information from up-to-date delivery plans, to provide more granular detail.</p> <p>Warning</p> <p>Rough Order of Magnitude (ROM) is an estimation approach which uses limited information to create a speculative indication of the scale of work required. ROM estimates are highly likely to be inaccurate, particularly given that solutions are unlikely to be well defined.</p> <p>Where clearer estimates are available, these should be used in place of, or as part of ROM estimates.</p> <p>The problem ownership will be assigned (or re-assigned), in doing so the delivery team is determined. This may change at a later time (e.g. future modelling session).</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/#delivery-models","title":"Delivery Models","text":"<p>A delivery model shows the agreed approach to solving problems in the medium term, based on the information available at the time of the modelling.</p> <p>The Delivery Model is a single, evolving artefact produced collectively. It provides a reference for the outcomes of the delivery modelling discussions.</p> <p>Model not Plan</p> <p>A delivery model is not a plan, nor a commitment. </p> <p>It can be used to inform and evolve targets, but it must not be used to create deadlines.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Problem Leads Accountable for preparing and sharing problem information and capturing outcomes of discussion, and for ensuring Key Problem Stakeholders are involved appropriately. Product Management Responsible for participating in modelling, and sharing relevant product insights, and providing relevant estimations. Engineering Leadership Responsible for participating in modelling, sharing relevant technology insights, and providing relevant estimations. Design Team Responsible for participating in modelling, sharing relevant user/design insights, and providing relevant estimations. Delivery Management Team Accountable for ensuring that modelling is performed and models produced are current, maintained and accessible. Responsible for organising delivery modelling events."},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/#triggers","title":"Triggers","text":"<p>Delivery models need to remain \"fresh\". As a delivery modelling session produces \"point in time\" view, this may become outdated due to a number of factors, such as:</p> <ol> <li>Scope of work changes, indicating the ROM estimates are inaccurate</li> <li>Problems are broken down and can be prioritised and solved independently</li> <li>More granular estimates are produced, indicating the ROM estimates are inaccurate</li> <li>Business priorities change</li> </ol> <p>The models will likely need to be updated each quarter, but whenever the model is determined to be \"stale\", a modelling session should be scheduled in order to make it fresh again.</p> <p>Note</p> <p>All Problem leads, Product Managers, Engineering Leadership members, designers, and delivery managers are collectively responsible for flagging that the delivery model is stale, as and when they discover relevant information.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Modelling/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/","title":"Delivery Planning","text":"<p>Delivery Planning is a collection of ongoing activities in which the delivery team produces and maintains a comprehensive plan for delivery. This will include both how the design and implementation is expected to </p> <p>The objective of Delivery Planning is to ensure efficient coordination and execution of tasks to achieve timely and successful delivery of a solution.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#delivery-plans","title":"Delivery Plans","text":"<p>Delivery Plans are a set of artefacts produced and maintained by the delivery team and should be clear, visible and easily accessible. Delivery Plans include a design plan and implementation plan. Delivery Plans should be continually reviewed and updated throughout the entire problem solving lifecycle. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#design-plans","title":"Design Plans","text":"<p>Note</p> <p>Design Plans typically include: detailed technical requirements, functional requirements, experiential requirements, test planning requirements, estimates and a DOT (direction of travel).</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#implementation-plans","title":"Implementation Plans","text":"<p>Note</p> <p>Implementation Plans typically include: status reporting artefacts, a prioritised backlog, a timeline and delivery schedule, detailed resourcing plan and a RACI (responsible, accountable, consulted, informed).</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that delivery planning occurs at appropriate times and delivery plans are produced and effectively communicated with colleagues and stakeholders Delivery Team The whole Delivery team is collectively responsible for conducting delivery planning sessions, producing delivery plans and ensuring these plans are well maintained, accessible and effectively communicated with colleagues and stakeholders Product Lead Responsible for participating in any delivery planning events, producing delivery planning artefacts by sharing relevant product insights and providing relevant estimations Engineering Owner Responsible for participating in any delivery planning events, producing delivery planning artefacts by sharing relevant technology insights and providing relevant estimations Design Owner Responsible for participating in any delivery planning events, producing delivery planning artefacts by sharing relevant user/design insights, and providing relevant estimations"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#triggers","title":"Triggers","text":"<p>Delivery Plans need to remain current and as change is so frequent in software development environments, these plans typically become outdated quickly. The team responsible for delivering a solution will need to determine and document when Delivery Plans including Design Plans and Implementation Plans should be produced, reviewed and updated, and therefore when any planning events should occur. This will typically be as soon as enough is known to produce a delivery plan, and after any change that impacts the validity of the plan. </p> <p>Note</p> <p>All Problem Owners, Delivery Owners, Delivery Teams, Product Leads, Engineering Owners and Design Owners are collectively responsible for flagging when delivery plans are stale, as and when they discover relevant information.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#communication-plan","title":"Communication Plan","text":"<p>The team responsible for a problem will need to determine and document how and when delivery plans will be communicated with colleagues and stakeholders, ensuring expectations are clear and guidance available to support effective stakeholder engagement.  </p> <p>Note</p> <p>Be mindful of your audience when defining an approach to communicating delivery plans with your stakeholders and/or colleagues. You may need to tailor your approach for each level of stakeholder to ensure you enable the engagement required from that particular audience.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#considerations-toolkit","title":"Considerations &amp; Toolkit","text":"<p>The Delivery Planning event typically occurs at the beginning of the AMPFlow design zone and the process is repeated as and when necessary throughout the full problem solving lifecycle. </p> <p>Teams can use any approach they wish to perform delivery planning events and produce delivery plans</p> <ul> <li>Review the tooling section of the Knowledgebase for current default document templates.</li> </ul> <p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Planning/#tag:delivery-planning","title":"Delivery Planning","text":"<ul> <li>            Estimation &amp; ROM          </li> </ul>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/","title":"Responsibility Assignment","text":"<p>Responsibility assignment is a procedure that defines and ensures continuous validation of roles, delineating clear responsibilities and accountability throughout the full problem lifecycle.</p> <p>The objective of Responsibility Assignment is to ensure ownership, roles and accountability are clearly and continuously defined and communicated throughout the full project lifecycle.</p> <p>Responsibility assignment includes the assignment and continuous review of Problem Ownership and stakeholder responsibilities stored in a responsibility matrix commonly referred to as a RACI.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/#responsibility-matrix","title":"Responsibility Matrix","text":"<p>A responsibility matrix is a single artefact produced and maintained by the delivery team, and is used to clarify, continuously monitor and review the roles and responsibilities of individuals or groups involved in the delivery of a solution. </p> <p>A responsibility matrix should detail key information that enables more effective collaboration with stakeholders and includes: a list of stakeholders, clarity on their type of involvement, potential impact on project, availability and any other additional details that help optimise collaboration.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that responsibility assignment is conducted, occurs at appropriate times and the responsibility matrix produced is valid and easily accessible Delivery Team The whole Delivery team is collectively responsible for conducting responsibility assignment events, producing and maintaining responsibility matrix, ensuring it's accessible and continuously communicated with stakeholders Product Lead Responsible for participating in any responsibility assignment events, ensuring that product ownership is defined, remains valid and the responsibility matrix lists any key product stakeholders Engineering Owner Responsible for participating in any responsibility assignment events, ensuring that engineering ownership is defined, remains valid and the responsibility matrix lists any key engineering stakeholders Design Owner Responsible for participating in any responsibility assignment events, ensuring that design ownership is defined, remains valid and the responsibility matrix lists any key design stakeholders"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/#triggers","title":"Triggers","text":"<p>The responsibility matrix must remain valid throughout the full problem solving lifecycle, and therefore should be routinely reviewed and updated when any change occurs that impacts problem ownership or any individuals or groups involved in the delivery of a solution.</p> <p>Problem ownership must be defined as soon as enough is known or early in the discovery zone. The team responsible for delivering a solution will need to determine and document when a responsibility matrix should be produced, reviewed and updated, and therefore when any responsibility assignment events should occur. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/#communication-plan","title":"Communication Plan","text":"<p>The team responsible for delivering a solution will need to ensure that the responsibility matrix and any accompanying guidance is easily accessible, and expectations continuously communicated with all stakeholders. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Responsibility-Assignment/#considerations","title":"Considerations","text":"<p>A responsibility matrix is a valuable tool primarily used by the delivery team rather than stakeholders. While stakeholders may have an interest in understanding who is responsible for specific aspects of a solution, they typically rely on other forms of communication, such as synchronous or asynchronous Delivery Status Reporting rather than directly referencing the responsibility matrix.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Support-Handover/","title":"Support Handover","text":"<p>A support handover is an activity perform between the delivery team and the support team, once a solution has been implemented and released.</p> <p>The objective of the Support Handover is to ensure that the solution that has been released can continue to be supported, minimising the need for investigation and re-learning, and the likelihood of impediments being caused by knowledge gaps.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Support-Handover/#planning-and-performing-handovers","title":"Planning and Performing Handovers","text":"<p>The delivery team will prepare the support team to adopt ongoing maintenance of the solutions they implement by providing a handover. </p> <p>The nature of the handover and approach taken will vary, and the delivery team must collaborate with the support team to plan and execute it.</p> <p>The handover must be completed before the end of the warranty period, but can be started at any point, even while implementation is ongoing if it makes sense to do so.</p> <p>Small Increments</p> <p>Not all solutions implemented by a delivery team will require a support handover, particularly if it is a small incremental of value. This should be discussed, agreed, and documented.</p> <p>Failure to handover</p> <p>The warranty period will continue until the handover is complete. </p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Support-Handover/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Engineering Owner The Engineering Owner  accountable for the effective planning and execution of the support handover. Delivery Team The Delivery Team are collectively responsible for ensuring that the knowledge they have accumulated during the design and implementation of the solution is effectively documented and made clear and available to the support team and the wider department. Support Team The Support Team are responsible for coordinating with the delivery team to plan and execute the handover, and must be consulted.","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Support-Handover/#triggers","title":"Triggers","text":"<p>There are no specific triggers. Collaborate with members of the support team to determine if a handover will be required.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Support-Handover/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/","title":"Time Recording","text":"<p>Time tracking is the act of recording the time spent performing work. The objective is to ensure that it is possible to understand the amount of time that has been spent delivering an item of any level within the workflow hierarchy.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/#why-it-matters","title":"Why it matters:","text":"<p>There a several reasons why it is important to record the time spent by teams performing work:</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/#financial-regulatory-needs-and-understanding-and-amortising-costs","title":"Financial Regulatory Needs, and Understanding and Amortising Costs","text":"<p>In order to determine investment in technology, knowing how much time has been spent delivering it is necessary. The purpose of this is broad and varied, as an example it is vital when advocating for further investment, or while evaluating accuracy of certain hypotheses (e.g. the analytics project\u2019s time savings gained by the Engagement team).</p> <p>Additionally, certain pieces of work can be capitalised and need to be amortised by the business. (Some investments are deemed to have added new value to the business, and under financial regulatory rules we can spread the cost of that investment over a number of years.) This can only be done where the time spent has been accurately recorded.</p> <p>There may well be opportunities in the future to apply for tax benefits related to our R&amp;D investment. Again, this can only be done where the time spent has been accurately recorded.</p> <p>Finally, we need to evaluate the maintenance costs of our platform. (Platform maintenance covers all investment that isn\u2019t specifically new development that can be capitalised.) Maintenance takes a number of forms, and grows over time. Accurately understanding maintenance expenditure is at least helpful, and possibly a requirement for financial auditing.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/#improving-planning-and-estimation","title":"Improving Planning and Estimation","text":"<p>We can use hours spent to create a fuller picture of what abstract (e.g. ROM or point based) estimates mean. E.g. x points on average required y hours of effort.</p> <p>We can then understand how we are tracking against our estimates, allowing us to understand if the estimates are accurate, and if our plans are on track. This more likely applies at the sprint and runway planning layers, although will also bubble up into delivery planning.</p> <p>This can help us improve our estimation practices, by performing analysis of inaccuracies.</p> <p>While there are a number of ways to achieve or at least work towards the above without time tracking (for example by looking at the aggregated output of sprints), this level of data can enable greater insights. </p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/#approaches","title":"Approaches","text":"<p>By the end of each sprint, all tasks marked as done must have the time spent recorded against them.</p> <p>The team can chose how they wish to record hours. For example:</p> <ul> <li>Time spent can be recorded daily: at the end of each day all tasks are updated with the time spent so far</li> <li>Upon completion of each task</li> <li>At the end of the sprint as a group: the team run through all backlog items and their tasks and record the hours spent.</li> <li>When a backlog item is completed.</li> </ul> <p>While hours recorded will need to be fairly accurate, it will be impossible to be perfectly accurate, and this is not the goal. Using common sense to balance the time spent against the value gained is needed.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Time-Tracking/#using-the-data","title":"Using the Data","text":"<p>Time spent data will be used by the business to determine investment in products, for both financial reporting and business planning.</p> <p>Time spent data may be used by teams to evaluate estimation and planning accuracy and make improvements.</p> <p>Time spent data must never be used as tool for criticism or to apply pressure or blame. This will result in net-negative outcomes. When evaluating accuracy of past estimates, it should be done so with both context (there are reasons why it took longer, these reasons should be considered for future estimates), and where appropriate.</p> <p>Teams should seek support in evaluating time spent hours if they are concerned about gaining value from this information.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/","title":"Warranty","text":"<p>The objective of a Warranty is to ensure that new solutions are working as intended, and that resolutions to issues can be implemented rapidly.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/#warranty-period","title":"Warranty Period","text":"<p>A Warranty Period is a predetermined period of time during which a delivery team will perform rapid maintenance for the solutions or parts of solutions they have implemented and released into production. </p> <p>Small Increments</p> <p>Not all solutions implemented by a delivery team will require warranty, particularly if it is a small incremental of value. This should be discussed, agreed, and documented.</p> <p>During the warranty period, the delivery team will prepare the support team to adopt ongoing maintenance of the solution by providing a Support Handover.</p> <p>The length of the warranty period, or whether one is required, must be guided my the nature of the problem and its solution. Longer delivery time-frames will usually require longer warranty periods. However, other factors such as the risk profile of the solution, downstream urgent work, and support team work load will also need to be considered.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/#warranty-planning","title":"Warranty Planning","text":"<p>During the design and implementation of a solution, the delivery team must determine a suitable warranty period and prepare to perform a support handover. </p> <p>The delivery team must also plan key activities during the warranty period, for example monitoring for performance and stability. They will need to ensure that they have planned to accommodate unplanned work, such as bug fixes.</p> <p>It will be necessary for the delivery team to collaborate with stakeholders, including the support team, in order to determine an appropriate warranty period. </p> <p>The warranty plan must be communicated to stakeholders with suitable advanced notice.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is responsible for ensuring that support plans are communicated and that key stakeholders are consulted. Engineering Owner The Engineering Owner  accountable for the effective planning and execution of the warranty."},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/#triggers","title":"Triggers","text":"<p>The need for a warranty period should be determined during delivery planning.</p> <p>The warranty plan must be produced and adapted throughout the implementation process, and must be agreed and communicated alongside release planning, and in advance of any releases.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Warranty/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/","title":"Workflow Management","text":"<p>Workflow Management describes the way that our solutions are broken down into a hierarchical structure. </p> <p>Throughout the problem lifecycle we break large solutions to problems down into small value increments, which are in turn broken down into the smallest independently deployable chunks, each of which require various specific tasks to be performed. </p> <p>The objective of workflow management is to provide an adaptable but repeatable structure that reflects this relationship between problems, solutions, value increments, and deployments.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#workflow-hierarchy","title":"Workflow Hierarchy","text":"<p>The workflow hierarchy as 4 layers: </p> <ol> <li>Strategic:</li> <li>Outcomes, which belong to a Roadmap Item (in Product Board)</li> <li>Features, which belong to Outcomes</li> <li>Backlog, including:    <ol> <li>Backlog Items, and may relate to Bugs</li> <li>Spikes, which belong to Features, and may relate to Bugs </li> <li>Bugs, which belong to Features, and must relate to Backlog Items</li> </ol> </li> <li>Work, including:<ol> <li>Tasks, which belong to Backlog Items or Spikes, and may relate to Defects </li> <li>Defects, which belong to Backlog Items, and must relate to Tasks</li> </ol> </li> </ol> <p></p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#planning-mechanisms","title":"Planning Mechanisms","text":"<p>Each layer has its own planning mechanism:</p> <ol> <li>Delivery Modelling is used to model the delivery of Outcomes, and therefore show how the roadmap will be progressed. Looking ahead around 12 months.</li> <li>Delivery Planning is used to plan the delivery of Features, and therefore show how Outcomes will be delivered. Looking ahead around 6-12 sprints / 3-6 months.</li> <li>Runway Planning is used to plan the implementation of Backlog Items, and therefore show how Features will be delivered.</li> <li>Sprint Planning / Iteration Planning is used to plan the tasks that must be performed in order to implement a backlog item. Using this structure will mean that there is an inherent link between each plan.As estimates and plans are produced for lower layers, their parent item\u2019s estimates and plans must also be updated.</li> </ol> <p></p> <p>Illustrative only</p> <p>Actual plans will contain significantly more contextual information than is shown in this image, such as dependencies, estimates, ownership, status, risks\u2026</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#workflow-item-definitions","title":"Workflow Item Definitions","text":""},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#outcome","title":"Outcome","text":"<p>An Outcome is a generic term for a sub goal of a product roadmap objective. The term Outcome could be replaced by \u201cMilestone\u201d or \u201cEpic\u201d. We use the term outcome because it carries more meaning than epic, and is more flexible than milestone. Some Roadmap items may only have one Outcome, while others may have many.</p> <p>Outcomes must belong to a roadmap item.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#feature","title":"Feature","text":"<p>A feature is a generic term for a sub-goal of an Outcome. Features must be independently usable and valuable.  Features may require changes to many platforms/repositories.</p> <p>A feature is not necessarily a functional or user-centric value improvement. While some features may be well described as \u201cuser stories\u201d, a feature can also describe non-functional improvements. </p> <p>Features can be categorised by the type of investment or purpose, i.e. is this maintenance or added value? If this is maintenance then which type: perfective, preventative, adaptive, or corrective (bugs are generally corrective maintenance).</p> <p>Features must belong to an Outcome.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#backlog-item","title":"Backlog Item","text":"<p>A backlog item is the smallest operational increment that can be made.</p> <p>A backlog item should only affect a single repository, for example.</p> <p>An operational increment must be independently deployable and testable, it must not cause damage, but individually may not be usable or valuable. Each feature would typically require several backlog items.</p> <p>Backlog items must belong to a feature, and may be related to a bug.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#spike","title":"Spike","text":"<p>A spike is a technical investigation used to remove uncertainties around technical viability and feasibility. Spikes seek to answer specific questions. Then outputs of a spike will include a documented summary of the learnings, and may also include a proof of concept.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#bug","title":"Bug","text":"<p>A bug is an issue identified within production applications. A bug occurs when a feature does not behave as expected. </p> <p>Bugs must belong to a feature - in principal a feature's requirements or specifications are not being met. </p> <p>A bug must relate to at least one backlog ite. It may affect multiple repositories, and may therefore require multiple backlog items.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#task","title":"Task","text":"<p>A task describes any discrete piece of work. Each backlog item will require several tasks in order to produce an operational increment. These tasks may span multiple disciplines such as development, testing, design, documentation, and so on.</p> <p>Task items must belong to a backlog item, and may relate to a Defect.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#defect","title":"Defect","text":"<p>A defect is an issue identified during the development lifecycle. </p> <p>Defects must belong to a Backlog Item, and will relate to at least one task.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Workflow-Management/#tag:workflow-management","title":"Workflow Management","text":"<ul> <li>            Estimation &amp; ROM          </li> <li>            Workflow Item Definitions          </li> </ul>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/","title":"Delivery Status Reporting","text":"","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#objective","title":"Objective","text":"<p>Provide stakeholders with accurate and continuous information about the current health and progress of the delivery of a solution and enable continuous feedback.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#delivery-status-reporting","title":"Delivery Status Reporting","text":"<p>Delivery Status Reporting is a procedure in which the delivery team reports to stakeholders on the current progress of the delivery of a solution, enabling continuous feedback, support and guidance. Delivery status reporting can be executed either synchronously or asynchronously. </p> <p>Delivery Status Reporting should aim to ensure continuous communication and alignment among stakeholders, and therefore should typically occur at specific times and/or when specific triggers are met.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#delivery-status-reports","title":"Delivery Status Reports","text":"<p>Delivery Status Reports are an artefact(s) produced and maintained by the delivery team and should be clear, visible and easily accessible by any colleague and/or stakeholder. It provides a point in time report on the current health and progress of the delivery of a solution, and should be routinely updated and shared with stakeholders as and when deemed necessary by the delivery team and/or when requested by stakeholders</p> <p>Warning</p> <p>Delivery status reports must accurately and promptly convey key delivery information to stakeholders and colleagues. Efforts should be made to maintain their accuracy at all times, but sometimes this isn't possible. To mitigate against this, ensure reports clearly indicate when they were last updated.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that delivery status reporting occurs at appropriate times and delivery status reports are produced and effectively communicated with colleagues and stakeholders Delivery Team The whole Delivery team is collectively responsible for conducting delivery status reporting events, producing delivery status reports and ensuring these reports are current, accessible and effectively communicated with colleagues and stakeholders Product Lead Responsible for participating in any delivery status reporting events where necessary, producing delivery status reports by sharing relevant product insights Engineering Owner Responsible for participating in any delivery status reporting events where necessary, producing delivery status reports by sharing relevant engineering insights Design Owner Responsible for participating in any delivery status reporting events where necessary, producing delivery status reports by sharing relevant UX/UI insights","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#triggers","title":"Triggers","text":"<p>Delivery status reports must remain a consistently accurate and current reflection of delivery solution status, to ensure colleagues and/or stakeholders accessing the reports are receiving and acting upon valid information. The team responsible for the delivery solution will need to determine and document when delivery status reports should be produced and/or updated and when delivery status reporting events should occur</p> <p>This could typically be for the following reasons:</p> <ol> <li>At completion of deliverables </li> <li>After any change that impacts the current delivery plan and/or delivery timelines</li> <li>At scheduled milestones and/or regular reporting cadence as agreed by the delivery team and stakeholders</li> <li>Emergencies or critical issues that could impact project delivery </li> <li>At any key decision points defined by the delivery team and/or stakeholders</li> </ol>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#communication-plan","title":"Communication Plan","text":"<p>The team responsible for a problem will need to determine and document how delivery status reporting will be conducted and therefore how delivery status reports will be communicated with colleagues and stakeholders, ensuring expectations are clear and guidance available to support effective engagement.</p> <p>Note</p> <p>Consider your audience when conducting delivery status reporting. Tailor your approach to suit each stakeholder's level of understanding and involvement. This ensures effective engagement with all parties involved.</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/#considerations-toolkit","title":"Considerations &amp; Toolkit","text":"<p>Consider collaborating with stakeholders early to define, agree and document clear expectations and guidance for delivery status reporting events and delivery status reports, and mechanisms for continuously monitoring and reviewing their effectiveness throughout the full problem lifecycle.</p> <p>Consider your audience, delivery status reporting will typically need to adapt to suit the varying requirements of stakeholders engaged in the project. A Responsibility Matrix must record and track specific details on stakeholder engagement requirements.</p> <p>Teams can use any approach they wish to perform delivery status reporting and produce delivery status reports.</p> <p>Toolkit</p>","tags":["draft"]},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/","title":"Stakeholder Engagement","text":""},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/#objective","title":"Objective","text":"<p>Foster collaboration, gather input and ensure alignment between the delivery of successful outcomes and stakeholder expectations.</p>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that effective stakeholder engagement is happening at appropriate times and the results are both accessible and effectively communicated with colleagues and stakeholders Delivery Team The whole Delivery team is collectively responsible for effective stakeholder engagement"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/#triggers","title":"Triggers","text":"<p>Effective stakeholder engagement is a 2-way flow that should continuously enable faster feedback loops, resulting in the delivery of successful outcomes sooner, safer and happier.</p> <p>The team responsible for a problem will need to determine and document why, how and when stakeholder engagements should occur. Here are some typical triggers that can prompt stakeholder engagement activities throughout the design and implementation:</p> <ol> <li>Major milestones /  Key Decision points </li> <li>Change requests</li> <li>Risk, assumption, issues, dependency identification and mitigation</li> <li>Critical issues</li> <li>Deliverable reviews</li> <li>Quality Assurance </li> </ol>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/#communication-plan","title":"Communication Plan","text":"<p>The team responsible for a problem will need to determine and document a communication plan for effectively engaging with stakeholders, ensuring expectations are clear and guidance is available and accessible to support effective engagement.</p> <p>A stakeholder communication plan typically includes the following: </p> <ol> <li>Stakeholder Analysis - identify all stakeholders involved in the project, including interests, expectations, influence and communication preferences.</li> <li>Objectives and Key Messages - define communication objectives and key messages that need to be conveyed throughout the project lifecycle.</li> <li>Communication Channels - defining appropriate communication channels for reaching each stakeholder group e.g delivery governance artefacts: project health dashboards, synchronous or asynchronous project status updates, emails, dedicated stakeholder portals (teams).</li> <li>Frequency and Timing - establish a communication schedule detailing when and how often updates will be provided to stakeholders. Ensure that communications are timely and aligned with project milestones and events.</li> <li>Content and Format - determine the content and format of communication materials, ensuring they are clear, concise, and tailored to the needs of the intended audience.</li> <li>Feedback Mechanisms - establish mechanisms for eliciting feedback from stakeholders and providing opportunities for them to ask questions, share concerns and provide input. This could include surveys, feedback forms, dedicated feedback sessions, or one-to-one meetings.</li> <li>Responsibilities &amp; Roles - clearly defined roles and responsibility for communicating with stakeholders, including who who will be responsible for drafting communications, delivering messages, and responding to enquiries.</li> <li>Escalation Procedures - outline procedures for escalating issues or concerns raised by stakeholders to the appropriate level of management or decision-makers for resolution.</li> <li>Risk Management - identify potential communication risks and develop strategies for mitigating them. This could be addressing communication barriers, managing conflicts, or addressing stakeholder resistance.</li> <li>Evaluation &amp; Improvement - establish mechanisms for regularly evaluating the effectiveness of communication efforts by gathering feedback from stakeholders and addressing whether communication objectives are being met. This feedback can be used to make adjustments and improvements to the communication plan as needed.</li> </ol>"},{"location":"Ways-of-Working/Governance/Delivery-Governance/Delivery-Status-Reporting/Stakeholder-Engagement/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/","title":"Problem Governance","text":"<p>Problem Governance describes the controls we set around how we identify problems and determine solutions, and the systems we use for doing this.</p> <p>By \u201cproblems\u201d we do not just mean Product problems. Technical problems, Support problems and Operational/Business problems can also be approached using the same systems.</p> <p>Problem Governance helps ensure problems are approached thoughtfully, with a clear understanding of what success will look like and who will benefit, regardless of where the problem has originated.</p> <p>Before considering a solution, every problem should:</p> <ul> <li>Have a dedicated Problem Owner</li> <li>Be explored, and all supporting evidence collated (e.g. customer and colleague feedback, user research, relevant data,  support issues).</li> <li>Be defined, describing why it is a problem to the business, who is impacted by it, and the benefits that solving the problem will bring.</li> <li>Be validated as a genuine problem that\u2019s aligned with business and department objectives, such that Platform Development should consider solving in the foreseeable future</li> <li>Be prioritised within the wider problem set (e.g. Quartex, Support, Federated Search, etc).</li> </ul> <p>When planning solutions to defined problems, make sure that:</p> <ul> <li>The requirements of the solution are clearly defined, so it\u2019s clear what\u2019s in and out of scope</li> <li>Different approaches to solving the problem are explored, documented and the rationale for the chosen path is clear</li> <li>What success looks like is clearly articulated and understood by everyone involved in, or impacted by, the solution</li> <li>All risks, assumptions, issues and dependencies relating to the problem and its solution are captured</li> <li>All roles and responsibilities relating to the work are articulated and understood</li> <li>How communication will be managed has been planned and agreed up front</li> </ul> <p></p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Measuring-Success/","title":"Planning and Measuring Success","text":"<p>How do you know if your work is valuable if you don\u2019t have a sense of what success looks like? Planning and Measuring Success enables you to define success for a proposed solution, and how you will measure it. </p> <p>The objectives of planning and measuring success are to: -   set the criteria by which success of the solution will be measured, and  -   ensure effective steps are taken to monitor and review success after implementation. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Measuring-Success/#planning-success","title":"Planning Success","text":"<p>In order to understand how effective the planned solution is at addressing the original problem and adding value to the business, it\u2019s important to set quantitative and qualitative measures, which can be tested, before the solution is released. </p> <p>Think about different types of measures that can indicate success, such as usage analytics, performance metrics, or customer and user feedback. It\u2019s important to clarify when and how often you expect to check success indicators. </p> <p>An effective tool for setting success criteria can be OKRs, where the key results are time-bound goals you want to achieve. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Measuring-Success/#measuring-success","title":"Measuring Success","text":"<p>Based on the success plan, the problem owner and delivery team must ensure they: -   Put the planned measures in place -   Ensure they have planned time to check the measures or gather feedback -   Ensure they have planned time in to review the measures and discuss both the implications and next steps -   Feed results of success measures back to stakeholders. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Measuring-Success/#responsibilities","title":"Responsibilities","text":"<p>Owner           | Responsibility    | Problem Owner   | The person accountable for ensuring a suitable success plan is defined and carried out.   | Delivery Team   | The group responsible for ensuring the success plan is implemented effectively.           |</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Measuring-Success/#triggers","title":"Triggers","text":"<p>Success planning can begin when:</p> <ul> <li>The problem has been defined</li> <li>High level requirements have been captured</li> <li>A preferred solution has been identified</li> </ul> <p>Success measurement can begin once the initial solution has been released. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Problem-Definition/","title":"Problem Definition","text":"<p>The objective is to create a clear and robust definition for your problem, and demonstrate that it is valid.</p> <p>Clear and robust definitions enable: - alignment on what the problem is - ensuring that we are solving valid and important problems - ensuring that appropriate solutions are designed and implemented</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Problem-Definition/#components-of-defining-a-problem","title":"Components of Defining a Problem","text":"<p>A good problem definition can appear simple, but it may take many discovery conversations and analyses before the problem is fully understood and can be described effectively.</p> <p>A good problem definition comprises:</p> <ul> <li>A one-page validation canvas, which contains a succinct description of the problem and the value of solving it for affected users and customers (including a description of who these are), as well as for the business. Business value is essential for validating the problem \u2013 solving the problem should bring tangible benefits to the business, e.g. through growth, efficiency, strategic positioning, or furthering our mission.</li> <li>A hypothesis that states the problem and any supporting knowledge or assumptions, alongside a short, measurable description of the value expected to be gained by solving the problem. The chosen solution should aim to prove this hypothesis.</li> <li>A stakeholder map, which outlines the people impacted by the problem and those who may influence its resolution.</li> </ul> <p>Problem Validation</p> <p>Not all problems are valid!</p> <p>Whilst every person\u2019s problems are real, not all problems are problems that our Platform teams, or our products, should solve. If you\u2019re struggling to define the problem, or it doesn\u2019t relate back to business or department strategies, it may be something best put to one side. If the problem reoccurs, it\u2019s worth revisiting \u2013 maybe the landscape has changed since it was last looked at.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Problem-Definition/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Problem Owner The person accountable and responsible for defining the problem Product Manager A Product colleague is responsible for peer reviewing the problem definition and providing feedback. A second pair of eyes can help to explore assumptions and consolidate the understanding of value."},{"location":"Ways-of-Working/Governance/Problem-Governance/Problem-Definition/#triggers","title":"Triggers","text":"<p>Your problem definition is likely to evolve alongside research and exploration activities, and should be directly informed by them.</p> <p>Problem definition is essential before you can go on to exploring requirements and designing solutions. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Problem-Definition/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/","title":"RAID Management","text":"<p>RAID is a well established project management tool used to identify, track, and manage key aspects that can impact the success of the delivery of a solution. </p> <p>The objective of RAID Management is to understand and mitigate risks, assumptions, issues and dependencies throughout the problem lifecycle.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#raid","title":"RAID","text":"<ul> <li>Risks - The objective of managing risks within RAID is to identify potential threats or uncertainties that could impact the delivery plan objectives, timeline, budget, or quality. By identifying risks early on, the development team can implement strategies to mitigate or eliminate them, reducing the likelihood of negative consequences</li> <li>Assumptions - Assumptions are underlying beliefs, or conditions that are taken for granted, or preliminary decisions that have not been validated. Assumptions have the potential to influence outcomes. The objective of managing assumptions within RAID is to document and validate these assumptions to ensure that they are accurate and aligned with the problem hypothesis and solution. By addressing assumptions upfront, the team can avoid misunderstandings or misalignments that could derail delivery.</li> <li>Issues - Issues are problems or challenges that arise throughout the problem lifecycle (although particularly during Design and Implementation). The objective of managing issues within RAID is to track and address these issues in a timely manner to prevent them from escalating and impacting progress. By actively managing issues, the team can minimize disruptions and keep the delivery on track towards its objectives.</li> <li>Dependencies - Dependencies are relationships between tasks or deliverables that dictate their sequence or interdependence. The objective of managing dependencies within RAID is to identify and track these relationships to ensure that tasks are executed in the correct order and dependencies are managed effectively. By understanding and managing dependencies, the team can optimize workflow and minimize delays.</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#raid-planning-events","title":"RAID Planning Events","text":"<p>RAID logs should be continually update by the problem owners and delivery team. </p> <p>RAID Planning is a focussed event during which the delivery team produces and/or updates a structured RAID log.</p> <p>Together the delivery team will review existing and identify new RAID items, considering and documenting:</p> <ul> <li>the perceived impact, </li> <li>the perceived likelihood,</li> <li>workarounds or mitigation plans</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#raid-logs","title":"RAID Logs","text":"<p>RAID logs are a maintained list of the current Risks, Assumptions, Issues, and Dependencies, and support tracking and communication of RAID items.</p> <p>The RAID Log details the RAID items as well as their status. </p> <p>By maintaining a comprehensive RAID log, delivery teams can improve their ability to anticipate and respond to challenges, minimise disruptions, and ultimately improve effectiveness.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The Delivery Owner is accountable for ensuring that effective RAID management is happening at appropriate times and the results are both accessible and effectively communicated with colleagues and stakeholders Delivery Team The whole Delivery team is collectively responsible for RAID identification, management and mitigation Product Lead Responsible for participating in any RAID planning events where necessary, and by collating and sharing relevant product related insights that could lead to the identification of new RAID items Engineering Owner Responsible for participating in any RAID planning events where necessary, and by collating and sharing relevant engineering related insights that could lead to the identification of new RAID items Design Owner Responsible for participating in any RAID planning events where necessary, and by collating and sharing relevant design related insights that could lead to the identification of new RAID items"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#triggers","title":"Triggers","text":"<p>Typical triggers for RAID include (but are not limited to):</p> <ul> <li>Requirement Elicitation - as requirements are gathered for the problem during the discovery zone </li> <li>Design - during the design zone and design workshops, triggers could include architectural decisions that introduce technical risks, assumptions about third party integrations, or dependencies on specific design components</li> <li>Resource Allocation - changes in resource availability or allocation</li> <li>Technologies and/or Tools - selecting new technologies or tools for the solution </li> <li>Change Requests - whenever there are changes to solution requirements, scope, or timeline</li> <li>Testing and Quality Assurance - issues identified during testing and quality assurance activities can trigger RAID items relating to defects, performance issues, or dependencies on external systems </li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#communication-plan","title":"Communication Plan","text":"<p>Delivery teams are responsible for ensuring relevant stakeholders and/or colleagues are informed about the status of key RAID items and any actions being taken that could potentially impact delivery, other delivery teams' plans or stakeholders and other departments.</p> <p>RAID communication plans typically include and document:</p> <ol> <li>Communication Channels - with delivery teams: via regular team meetings or RAID planning events or with stakeholders: via delivery status updates and reports, ad-hoc communications to address urgent or critical RAID items, </li> <li>Content &amp; Format - RAID item summary, detailed descriptions, action items and trends in RAID data over time</li> <li>Escalation Process - defined escalation process for addressing high-priority or critical RAID items that require immediate attention or resolution </li> <li>Feedback Mechanism - encourage feedback from stakeholders and team members on the effectiveness of RAID communication and any improvements or suggested adjustments required</li> <li>Review &amp; Continuous Improvement - regularly review the effectiveness of the RAID communication plan, gathering feedback from stakeholders and team members and identify opportunities for improvement</li> </ol> <p>Note</p> <p>Not all RAID items need to be communicated to all stakeholders, and in some situations can confuse rather than inform a stakeholder. Reporting on RAID should be tailored for the appropriate audiences, focussing on the key items of most concern or perceived impact.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#toolkit","title":"Toolkit","text":"<p>Toolkit</p> <ul> <li>Review the tooling section of the Knowledgebase for current default document templates.</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/RAID-management/#tag:raid","title":"RAID","text":"<ul> <li>            RAID          </li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/","title":"Release Planning","text":""},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/#objective","title":"Objective","text":"<p>Create a plan to ensure your solution is released to customers and/or users in the most effective way, through minimising risks and maximising knowledge sharing.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/#release-planning","title":"Release Planning","text":"<p>In the world of continuous deployment, many code deployments may have taken place before a solution is ready to be released. By release, we mean making a solution to a defined problem available to a specific group of customers or users.</p> <p></p> <p>A good release plan should include:</p> <ul> <li>Plans for technical rollout</li> <li>Plans for practical rollout to customers or users, particularly if a phased or beta approach is being adopted</li> <li>Plans for testing the solution upon release</li> <li>Plans for mitigating risks and potential issues</li> <li>Plans for communicating the release, both ahead of time and once release is complete</li> <li>Plans for updating any product or feature documentation</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Owner The person accountable for ensuring release plans are created, enacted and stored effectively Delivery Team The group responsible for creating and enacting a successful release plan Product Lead Usually the person responsible for describing product changes, brought about by the release, to Problem Stakeholders"},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/#triggers","title":"Triggers","text":"<p>The framework for the release plan should be determined during delivery planning, although it may not be possible to finalise the details of the plan until delivery work is well underway.</p> <p>The release plan must be completed in advance of any releases, and should be agreed and communicated alongside the warranty plan.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Release-Planning/#tooling","title":"Tooling","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/","title":"Requirements Definition","text":""},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#objective","title":"Objective","text":"<p>To document the requirements needed to ensure the problem is addressed in a valuable way. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#defining-and-refining-requirements","title":"Defining and Refining Requirements","text":"<p>During discovery activities, requirements will be elicited or proposed by stakeholders. Following this, the practice of requirements must be defined and further refined in order to:</p> <ul> <li>collate requirements that have surfaced through various discovery activities</li> <li>refine requirements, so that they are articulated in a way the Delivery Team can relate to</li> <li>state explicitly any missing or implicit requirements</li> <li>sort them, e.g. using a MoSCoW framework</li> <li>state explicitly any dependencies or considerations that may impact iterative delivery</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#types-of-requirements","title":"Types of Requirements","text":"<p>The requirements specification should include:</p> <ul> <li>Functional requirements \u2013 how the system or feature should behave to address the stated problem.</li> <li>User Interface requirements \u2013 how the system or feature should appear. For example, it may be helpful to note where users will need additional information, where there are specific accessibility or mobile considerations, or which style rules need to be applied.</li> <li>Non-functional requirements (NFRs) \u2013 system or feature attributes that cannot be described as functional behaviours. These may include, but will not be limited to security, performance, scalability, data privacy and testability.</li> </ul> <p>In all cases, the Delivery Team may find it helpful to have requirements linked to real world use cases, to highlight the value of the requirements and generate meaningful discussions. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Problem Owner The person accountable for ensuring the requirements specification aligns with the problem definition and hypothesis Product Lead The person responsible for gathering, sorting and refining requirements, and consolidating them into a specification UX Lead The person responsible for surfacing any UI/UX requirements to the Product Lead Engineering Owner The person responsible for surfacing any technical requirements to the Product Lead Delivery Team The group responsible for reviewing the requirements and making sure they understand them"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#triggers","title":"Triggers","text":"<p>Requirements can and should be captured throughout the discovery process, however not every piece of information collected during discovery will become a requirement.</p> <p>Requirements should be refined once the problem definition has been completed and with enough time to inform solution design before delivery is planned to start.</p> <p>As a rough guide, you could aim to have requirements ready three months ahead of delivery, although you should continue to review the assumptions and expectations set in your specification. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Requirements-Definition/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/","title":"Research & Exploration","text":"<p>Research and exploration is an overarching term for a broad set of discovery activities that happen continuously throughout the problem lifecycle.</p> <p>The main objective is to build an in-depth understanding of the problem and the most effective way to solve it.</p> <p>Note</p> <p>The most effective way to solve the problem may be a balance of factors such as time available, technical effectiveness and user benefits, and could well be iterative. Your research may point you to an ideal solution that you then need to work back from to explore a solution that\u2019s viable within the constraints you have. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/#components-of-research-and-exploration","title":"Components of Research and Exploration","text":"<p>For any piece of work, research and exploration should include activities from three key areas: </p> <ul> <li>Problem discovery, to understand the underlying problem to be solved and the situational context around it. </li> <li>Technical discovery, to understand potential solutions through the evaluation of existing and new technologies.</li> <li>Solution viability, to check if the proposed solution(s) meets the needs of users, customers and the business.</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/#discovery-plan","title":"Discovery Plan","text":"<p>The Problem Owner should start to create a discovery plan as soon as the problem is identified. It should describe the activities needed to understand the problem, and will evolve as understanding develops. </p> <p>As they are identified, technical discovery activities should be added to the discovery plan, so capture work needed to explore potential solutions. </p> <p>Once one or more solutions have been identified, plans to test the viability of the solutions should be added to the discovery plan. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/#discovery-outputs","title":"Discovery Outputs","text":"<p>Any documentation created as part of discovery activities, along with findings, should be saved centrally and shared with identified stakeholders. The findings from research and exploration activities should be used to inform  problem and requirements definition, as well as solution design and success planning.</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/#responsibilities","title":"Responsibilities","text":"Responsibilities Owner Responsibility Problem Owner The person accountable for ensuring the planned solution addresses the defined problem Product Lead The person accountable for ensuring the planned solution is aligned with the overarching product strategy Engineering Owner The person accountable for ensuring the planned solution is aligned with the overarching tech strategy UX Lead The person responsible for creating UI/UX design outputs Delivery Team The group responsible for conducting and completing all solution design activities and outputs, and ensuring designs are fully explored and validated"},{"location":"Ways-of-Working/Governance/Problem-Governance/Research-and-Exploration/#triggers","title":"Triggers","text":"<p>Research and exploration should never be limited to a single point in time, however it is essential to ensure effective discovery has been conducted before:</p> <ul> <li>Finalising the problem definition and defining your success measures</li> <li>Attempting to describe requirements or begin solution design</li> <li>Implementing the solution(s) (i.e., check your solution will be effective first)</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Solution-Design/","title":"Solution Design","text":"<p>Solution Design is the process of defining and designing a software solution for a business, product or user problem. </p> <p>The objective is to fully understand and articulate all aspects of the planned solution. </p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Solution-Design/#components-of-solution-design","title":"Components of Solution Design","text":"<p>Outputs of solution design will include but are not limited to:</p> <ul> <li>Functional design</li> <li>UI/UX design, such as wireframes or user flows </li> <li>Impact assessments for thematic areas such as accessibility, security and business change</li> <li>Decision records</li> <li>Detailed backlog items, with implementation plans, test plans and acceptance criteria</li> </ul> <p>Solution design will be iterative and likely to go through several rounds before design is considered complete. For example, a UX Designer may create some low-fi wireframes to visualise the proposed changes, and share these wireframes with stakeholders before refining the designs and creating hi-fi versions based on feedback received. </p> <p>Tools such as Example Mapping can be very useful to help determine the scenarios you need to plan for,  and backlog items you need to define. </p> <p>Solution design is considered complete when:</p> <ul> <li>the Problem Owner has verified the planned solution addresses the problem</li> <li>the Product Lead has verified the planned solution is aligned with product strategy</li> <li>the Engineering Lead has verified the planned solution is aligned with technical strategy</li> <li>all backlog items have been readied</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Solution-Design/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Problem Owner The person accountable for ensuring the planned solution addresses the defined problem Product Lead The person accountable for ensuring the planned solution is aligned with the overarching product strategy Engineering Owner The person accountable for ensuring the planned solution is aligned with the overarching tech strategy UX Lead The person responsible for creating UI/UX design outputs Delivery Team The group responsible for conducting and completing all solution design activities and outputs, and ensuring designs are fully explored and validated"},{"location":"Ways-of-Working/Governance/Problem-Governance/Solution-Design/#triggers","title":"Triggers","text":"<p>Teams can start thinking about solution design at any point, however it can only be kicked off in earnest when: \u2022   The problem definition is complete and the problem has been effectively prioritized \u2022   A high-level or broad requirements specification has been created \u2022   A sensible solution path has been determined through technical discovery</p>"},{"location":"Ways-of-Working/Governance/Problem-Governance/Solution-Design/#communication","title":"Communication","text":"<p>Communicating designs to stakeholders and validating the planned approach is an integral part of solution design. </p> <p>Plan when you will check in with stakeholders, and what you want to talk to them about. </p> <p>Never conduct solution design in a bubble!</p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/","title":"Problem Ownership","text":"<p>Throughout the problem lifecycle, the following key responsibilities are defined. The appropriate time to do so may vary, and in many cases is outlined in AMPFlow governance.</p> <p>Every individual assigned any problem ownership is accountable for effective succession of responsibilities in the case of planned absence, and responsible for limiting the impact unplanned absence. </p> <ul> <li>Problem Owner</li> <li>Delivery Owner</li> <li>Product Lead</li> <li>UX Lead</li> <li>Engineering Owner</li> <li>Delivery Team</li> </ul> <p>There are some responsibilities that aren't linked to these roles and can be found in Other Responsibilities </p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Owner/","title":"Delivery Owner","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Owner/#delivery-owner","title":"Delivery Owner","text":"<p>The person who will be accountable for asserting delivery governance for the problem. Normally this would be an Agile Delivery Manager, but can be any member of the Delivery Team.</p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Owner/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Delivery Owner Release Planning The person accountable for ensuring release plans are created, enacted and stored effectively"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Team/","title":"Delivery Team","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Team/#delivery-team","title":"Delivery Team","text":"<p>The team who will be responsible for:</p> <ul> <li>designing the solution, including defining specifications.</li> <li>implementing the solution and determining an effective, incremental way to do so.</li> <li>performing the governed activities.</li> </ul> <p>Normally this team would include a number of engineers, along with the Problem Owner, Product Lead, UX Lead, Engineering Owner, and Delivery Owner.</p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Delivery-Team/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Delivery Team Deployment Logs Are responsible for ensuring that all production changes are reflected in deployment logs. Delivery Team Code Peer Review Are responsible for ensuring that all changes are reviewed effectively. Delivery Team Release Planning The group responsible for creating and enacting a successful release plan Delivery Team Requirements Definition The group responsible for reviewing the requirements and making sure they understand them"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Engineering-Owner/","title":"Engineering Owner","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Engineering-Owner/#engineering-owner","title":"Engineering Owner","text":"<p>The person who will be:</p> <ul> <li>accountable and responsible for technical validation.  </li> <li>accountable for the implementation and technical design.</li> <li>responsible for coordinating engineering resources.</li> </ul> <p>This person must be consulted with for technology insights to inform technical requirements, and may be responsible for conducting or coordinating additional technical research. </p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Engineering-Owner/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Engineering Owner Deployment Logs Is responsible for ensuring that deployment log mechanisms are in place and meet the stated requirements, and is accountable for the continued adherence to these mechanisms Engineering Owner Technical Validation Review Is responsible for ensuring that Technical Validation Review is planned and performed before the end of the project, and accountable or ensuring that Technical Validation results are actioned before the end of the project. Engineering Owner Code Peer Review Is responsible for ensuring that peer review mechanisms are in place and meet the stated requirements, and is accountable for the continued adherence to these mechanisms. Engineering Owner Requirements Definition The person responsible for surfacing any technical requirements to the Product Lead"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Other-Responsibilities/","title":"Other Responsibilities","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Other-Responsibilities/#others","title":"Others","text":"<p>Remaining responsibilities not linked to our Delivery Governance </p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Other-Responsibilities/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Principal Engineer Technical Validation Review Is responsible for performing thorough and timely Technical Validation, providing clear and actionable feedback to the delivery team. Peer Reviewers Code Peer Review Are accountable for the quality of their review, and responsible for ensuring that reviews are thorough and adhere to review guidelines. Product Manager Problem Definition A Product colleague is responsible for peer reviewing the problem definition and providing feedback. A second pair of eyes can help to explore assumptions and consolidate the understanding of value."},{"location":"Ways-of-Working/Governance/Problem-Ownership/Problem-Owner/","title":"Problem Owner","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Problem-Owner/#problem-owner","title":"Problem Owner","text":"<p>The person who will be responsible for ensuring the problem is defined and validated. Usually this will be a Product Manager, but may be an Engineer or Designer depending on the nature of the problem.</p> <p>This person is accountable for ensuring that:</p> <ul> <li>the problem is solved effectively, and</li> <li>stakeholders are consulted and informed of progress.</li> </ul>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Problem-Owner/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Problem Owner Requirements Definition The person accountable for ensuring the requirements specification aligns with the problem definition and hypothesis Problem Owner Problem Definition The person accountable and responsible for defining the problem"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Product-Lead/","title":"Product Lead","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/Product-Lead/#product-lead","title":"Product Lead","text":"<p>The person who will be responsible for:</p> <ul> <li>ensuring the problem is prioritised appropriately,</li> <li>gathering requirements, and</li> <li>coordinating the creation and refinement of functional and non-functional specifications.</li> </ul> <p>This person is accountable for ensuring the planned solution is aligned with the overarching product strategy and adds measurable value to the product.</p> <p>They are also responsible for describing changes to product behaviour to stakeholders.</p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/Product-Lead/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility Product Lead Release Planning Usually the person responsible for describing product changes, brought about by the release, to Problem Stakeholders Product Lead Requirements Definition The person responsible for gathering, sorting and refining requirements, and consolidating them into a specification"},{"location":"Ways-of-Working/Governance/Problem-Ownership/UX-Lead/","title":"UX Lead","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/UX-Lead/#titleux-l","title":"title:UX L","text":""},{"location":"Ways-of-Working/Governance/Problem-Ownership/UX-Lead/#ux-lead","title":"UX Lead","text":"<p>The person who will be responsible for effective experiential design through the creation and refinement of user journeys and design components.</p> <p>This person must be consulted with for user insights to inform requirements gathering, and may be responsible for conducting additional user research. </p> <p>This person is accountable for ensuring that planned solutions result in a net benefit to the user experience.  </p>"},{"location":"Ways-of-Working/Governance/Problem-Ownership/UX-Lead/#responsibilities","title":"Responsibilities","text":"Owner Governance Area Responsibility UX Lead Requirements Definition The person responsible for surfacing any UI/UX requirements to the Product Lead"},{"location":"Ways-of-Working/Governance/Technology-Governance/","title":"Technology Governance","text":"<p>Technology governance controls how we implement technology to ensure that we comply with relevant laws and standards, and ensure that we create stable, secure, and robust solutions to technology problems.</p> <p></p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/","title":"Architectural Design","text":"<p>An architectural design describes the technologies used and how they will be implemented to solve a problem.</p> <p>The objective of architectural designs is to:</p> <ul> <li>ensure that good practice is adhered to</li> <li>ensure that alignment is created between the team and other technical stakeholders</li> <li>support reliability impact and security impact assessments.</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#architectural-design","title":"Architectural Design","text":"<ul> <li>Using collaborative approach within team and wider technical stakeholders</li> <li>ensure use of defaults or rfc where deviating</li> <li>ensure chosen approach is well documented with ADRs</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#peer-review","title":"Peer Review","text":"<p>Architectural designs must be reviewed by relevant technical stakeholders.</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Engineering Owner The Engineering Owner  accountable for the architectural design and responsible for ensuring that designs created and documented, and that appropriate technical stakeholders are involved. Delivery Team The Delivery Team are collectively responsible for supporting the creation of architectural designs Technical Stakeholders Various technical stakeholders, such as VP Engineering, Principal Engineer, are accountable for the overarching technical architecture of our technology estate, and responsible for ensuring that architectural designs support the technology strategy."},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#triggers","title":"Triggers","text":"<ul> <li>big work, regardless of use of defaults</li> <li>small work where there is deviation from defaults</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Architectural-Design/#tag:architectural-design","title":"Architectural Design","text":"<ul> <li>            Architectural Decision Record          </li> <li>            Decision Logs &amp; Records          </li> <li>            Technical Design Workshops          </li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/","title":"Implementation Peer Review","text":""},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#objective","title":"Objective","text":"<p>Implementation Peer Reviews ensure that changes to production system meet required quality, security and reliability standards and is aligned with the technical design of the solution.  </p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#implementation-peer-review","title":"Implementation Peer Review","text":"<p>Every change to a production system must be reviewed at least one additional engineer, other than the person who implemented that change. Evidence must be retained that this review has been performed. </p> <p>Reviews, at a minimum, must look to identify quality, security, and reliability flaws, but also serve to reduce knowledge silos and provide a platform to constructively challenge one another and ultimately create better solutions.</p> <p>Changes to production systems will usually involve code changes, and the review will usually occur before the code changes are merged into the main branch, via a pull request.</p> <p>However, not all production systems are managed via code. For example, some infrastructure may not be managed via IAC. Such \"uncoded\" changes to production systems are not exempt, and different techniques may be required for uncoded production system changes.</p> <p>Types of Peer Review</p> <p>Peer reviews are used in many settings, for example during Architectural Design, and the Technical Validation Review. </p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#requirements","title":"Requirements","text":"<p>All code repositories must be configured to enforce peer review, by protecting branches used for production deployments (e.g. requiring pull requests).</p> <p>Where code changes are not available, for example when infrastructure is not coded, the changes must be documented in a deployment log, and a reviewer must digitally sign the document (or provide a tracked update) following their review.</p> <p>A reviewer may provide feedback and request clarification, or request amends to the change. A peer review will remain active until all feedback or requested amends have been satisfied.</p> <p>Reviews must include:</p> <ul> <li>Date of review</li> <li>Reviewer name</li> <li>Comments / feedback / requested amends</li> <li>Log of remediation taken</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Team Are responsible for ensuring that all changes are reviewed effectively. Engineering Owner Is responsible for ensuring that peer review mechanisms are in place and meet the stated requirements, and is accountable for the continued adherence to these mechanisms. Peer Reviewers Are accountable for the quality of their review, and responsible for ensuring that reviews are thorough and adhere to review guidelines."},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Code-Peer-Review/#tag:implementation-peer-review","title":"Implementation Peer Review","text":"<ul> <li>            Code Peer Reviewing          </li> <li>            Pull Requests          </li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Deployment-Logs/","title":"Deployment Logs","text":"<p>Every change to any production environment must be reflected in deployment logs. This includes code and infrastructure changes.</p> <p>Deployments are not releases</p> <p>We differentiate deployments from releases. We may deploy changes to production environments many times before we make those changes available to customers or users (a release).</p> <p> </p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Deployment-Logs/#why","title":"Why?","text":"<ul> <li>We must track changes to our platform, this is a vital part of change management</li> <li>Helps us understand the cause of issues, especially important in rapidly diagnosing and mitigating critical issues and security incidents</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Deployment-Logs/#requirements","title":"Requirements","text":"<p>minimum  - What has changed - this can simply be a link to the PR or branch  - date and time of change  - individuals involved - performing the deployment</p> <p>ideal  - individuals involved - making the change  - reason for change - can be a link to the specification, even indirectly through the PR  - tests performed</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Deployment-Logs/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Delivery Team Are responsible for ensuring that all production changes are reflected in deployment logs. Engineering Owner Is responsible for ensuring that deployment log mechanisms are in place and meet the stated requirements, and is accountable for the continued adherence to these mechanisms"},{"location":"Ways-of-Working/Governance/Technology-Governance/Deployment-Logs/#techniques","title":"Techniques","text":"<p>Deployment logs may be automated or manual. This will depend on the maturity of the platform being deployed to. </p> <p>Automated logs may be part of CI pipelines, for example. Manual logs may be manual documentation.</p> <p>Review regularly</p> <p>Never assume that deployment logging is automated and functioning, or that team members know when or how to log manually. Checking that deployments are being added to logs can be done quickly and made part of regular team health checks.</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/","title":"Security & Reliability Impact Assessment","text":""},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#objective","title":"Objective","text":"<p>Security &amp; Reliability Impact Assessments (SRIA) ensure that product and system security and reliability is considered and evaluated during the technical design of solutions, to ensure that the impact to security and reliability is well known, and to enable mitigations to be designed for.</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#security","title":"Security","text":"<ul> <li>includes threat analysis and modelling</li> <li>impact on security tests</li> <li>impact on known issues and vulnerabilities</li> <li>impact on maintenance / maintenance strategy </li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#reliability","title":"Reliability","text":"<ul> <li>includes performance of systems under load (user, data) - see relevant NFRs</li> <li>includes how graceful failure</li> <li>ability to recover from failures, including DR</li> <li>observability, including logging, monitoring, and alerting</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#reliability-impact-assessment","title":"Reliability Impact Assessment","text":"<p>An SRIAs is specific to the implementation of a solution. Once a solution has been delivered, future changes to that solution would require new SRIAs. </p> <p>SRIAs should be produced during and as part of solution design. Producing during allows for iteration of the solution design, and emerging and shared understanding and alignment.</p> <p>Once the solution design, including arch design, has been determined, the SRIA must be documented. The SRIA must be updated if the design changes throughout the implementation.</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Engineering Owner The Engineering Owner  accountable for the impact assessment and responsible for ensuring that it is created and documented, and that appropriate technical stakeholders are involved. Delivery Team The Delivery Team are collectively responsible for supporting the creation of the impact assessment Technical Stakeholders Various technical stakeholders, such as VP Engineering, Principal Engineer, are accountable for the overarching reliability and security of of our technology estate."},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#triggers","title":"Triggers","text":"<ul> <li>all work</li> <li>inheriting upwards (parent project SRIAs cover work within)</li> <li>IA template ensures that assessments are quick if no impact is perceived</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#toolkit","title":"Toolkit","text":"<p>Toolkit</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Security-and-Reliability-Impact-Assessment/#tag:sria","title":"SRIA","text":"<ul> <li>            Security and Reliability Impact Assessment Template          </li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Technical-Validation-Review/","title":"Technical Validation Review","text":""},{"location":"Ways-of-Working/Governance/Technology-Governance/Technical-Validation-Review/#objective","title":"Objective","text":"<p>Ensure that large-scale work is periodically reviewed during long-running projects and prior to completion to verify alignment with department-wide best practices and technology strategy by the Principal Engineer.</p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Technical-Validation-Review/#requirements","title":"Requirements","text":"<p>The Principal Engineer must:</p> <ul> <li>test the developer experience and documentation by running the code.</li> <li>ensure that the deployment process follows default patterns. If deviations exist, ensure the reasons have been documented.</li> <li>verify that security practices adhere to the department\u2019s default standards. Any deviations must have been documented.</li> <li>confirm that code practices follow established default patterns. If there are exceptions, ensure justification has been documented.</li> </ul> <p>Engineering Owner must:</p> <ul> <li>collaborate with Principal Engineers to ensure that periodic validation has occurred.</li> <li>take action to address and remediate any identified issues.</li> </ul>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Technical-Validation-Review/#triggers","title":"Triggers","text":"<p>If an Architectural Design has been required for the problem, a Technical Validation Review will be needed.  When creating an implementation plan, the delivery team and engineering owner should identify suitable points for this review. </p>"},{"location":"Ways-of-Working/Governance/Technology-Governance/Technical-Validation-Review/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Engineering Owner Is responsible for ensuring that Technical Validation Review is planned and performed before the end of the project, and accountable or ensuring that Technical Validation results are actioned before the end of the project. Principal Engineer Is responsible for performing thorough and timely Technical Validation, providing clear and actionable feedback to the delivery team."},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Guide/","title":"Engineering Leadership Guide","text":""},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Guide/#distributed-leadership","title":"Distributed Leadership","text":"<p>Leadership is not the sole responsibility of those in specific leadership positions (e.g. with seniority, or line management responsibility). Distributed leadership aims to provide every individual with the opportunity to impact change.</p> <p>Examples of places where an engineer member may take a lead:</p> <ul> <li> <p>When assigned as Engineering Owner for a problem</p> </li> <li> <p>During meeting or workshop</p> </li> <li> <p>For investigation or experiment</p> </li> </ul>"},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Guide/#key-aspects-of-distributed-leadership-include","title":"Key aspects of distributed leadership include","text":"<ul> <li> <p>Empowerment: Colleagues are empowered to take initiative and make decisions. Empowerment fosters a sense of ownership and accountability.</p> </li> <li> <p>Collaboration: Distributed leadership encourages collaboration and knowledge sharing, enabling more innovative and effective solutions.</p> </li> <li> <p>Adaptability: By not centralising leadership in a few individuals, an organization can be more adaptable and responsive to change.</p> </li> <li> <p>Diversity: Distributing leadership enables a wider range of diverse perspectives, experiences, and expertise when making decisions.</p> </li> <li> <p>Openness: Open communication channels allows ideas and feedback flow more freely across different levels of the organisation.</p> </li> </ul>"},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Guide/#servant-leadership","title":"Servant Leadership","text":"<p>Those in senior and or management positions point the spotlight away from themselves and onto their team, and are never a single point of failure.</p> <p>They continuously challenge themselves to answer the questions \"How can I best serve my team?\" and \"How can I help my team thrive?\".</p>"},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Guide/#leadership-behaviours","title":"Leadership Behaviours","text":"<p>In a distributed leadership environment, it is important to understand the behaviours expected when taking the lead.</p> <ul> <li>Active listening (vs directing conversation)</li> <li>Coaching, mentoring &amp; knowledge sharing (vs teaching or preaching)</li> <li>Taking coordinator responsibility (rather than complete ownership), for example for:<ul> <li>collaboration</li> <li>communication</li> <li>documentation</li> </ul> </li> <li>Taking accountability for what you are taking a lead on</li> </ul>"},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Manifesto/","title":"Engineering Leadership Manifesto","text":""},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Manifesto/#manifesto-statements","title":"Manifesto Statements","text":"<p>Aa a leader in engineering I am;</p> <ul> <li>A Servant: Leading from behind, I'm here to uplift and support. I recognise that commanding others diminishes my leadership strength. I distribute my responsibilities and the responsibilities of my team, so that I am never a single point of failure and to improve resilience. I actively listen, asking more questions than I answer.</li> <li>Mission driven, vision guided: I am a missionary not a mercenary. I evangelise our mission, vision and values. I look beyond the immediate, with my focus mainly in the medium and long term.</li> <li>Kind: My interactions are guided by kindness, with absolutely no exceptions.</li> <li>Trusted: I am open and honest, while acting with integrity and trust. I don't mask or warp the truth, but keep confidentiality as sacred. I have integrity, demonstrating the behaviours I expect of others, and that are expected of me.</li> <li>Accountable: I take full responsibility for my actions and those of my team, embracing both our successes and learning moments.</li> </ul> <p>I am never going to know less than I know right now, so learning is at the heart of everything. I am;</p> <ul> <li>Bold: I have strong opinions, loosely held. My views may be distinctive and unpopular. </li> <li>Brave:  The best outcome is being proven wrong, and I actively seek to disprove my views and hypotheses. I am Curious and investigative, brave and willing to explore new ways.</li> <li>A Mentor: I see the potential for learning in everyone. Encouraging curiosity, bravery, and professional development is part of my daily to-do list.</li> <li>A Student: I am a student of technology and leadership. I'm on a relentless quest for knowledge. And by extension, and among many other things, I and a student of:<ul> <li>The agile manifesto</li> <li>The rugged manifesto</li> <li>Manifesto for Software Craftsmanship</li> <li>Lean</li> <li>DevOps</li> </ul> </li> </ul>"},{"location":"Ways-of-Working/Leadership/Engineering-Leadership-Manifesto/#duties","title":"Duties","text":"<p>Each specific leadership role has specific duties (see the competency matrix), and AMPFlow carries further duties for certain roles within the problem lifecycle (see Problem Ownership). </p> <p>These are generic duties that apply to everyone in any engineering leadership role: </p> <ul> <li>Succession planning.</li> <li>Seeking Feedback.</li> <li>Giving clear and timely feedback to your colleagues around you.</li> <li>Report and proactively mitigate problems as they occur.</li> </ul>"},{"location":"Ways-of-Working/Tenets/","title":"Tenets","text":"<p>Principles are required \"permission to play\" values, which we must adhere to. Ideals are values that we aspire to.</p>"},{"location":"Ways-of-Working/Tenets/#working-with-tenets","title":"Working with Tenets","text":"<p>We must hold each other to account for adhering to these tenets, using them as foundations for positive and constructive feedback. </p> <p>We must retrospectively evaluate our success by reflecting on our adherence to these tenets.</p> <p>We must refine our ways of working such that we enhance our ability to adhere to these tenets.</p> Our PrinciplesOur Ideals <ul> <li> <p>Continuous Improvement</p> <p>We are always experimenting and learning and we aim for Continuous Discovery.</p> <p>We know we will never know less than we do right now, and learning requires effort and focus.</p> <p>We strive for greatness but understand the value of iterative and incremental improvement. </p> <p>We learn from our failures and encourage experimentation. </p> <p>We challenge ideas and never take a solution on merit. </p> <p>We ask difficult questions and respect all opinions. </p> <p>We accept honest and constructive feedback and give it to others.  </p> </li> <li> <p>Continuous Collaboration</p> <p>We communicate with each other continually and understand that this is central to the core principles of DevOps and our overall mission success.</p> <p>We recognise that, as a remote and distributed team, continuous collaboration and communication requires more effort than co-located teams. </p> <p>We make a noise when blocked, and do not wait to seek support or share progress. </p> <p>We don\u2019t wait for updates to come when we have questions. </p> <p>We work together to solve problems and share knowledge as we go to prevent dependencies and silos.</p> <p>Read more </p> </li> <li> <p>Continuous Deployment</p> <p>We break value down into the smallest deployable increments, and deploy these constantly.</p> <p>We ensure that we keep manual involvement in the release process as minimal as possible, and aim to achieve fully automated deployments, so that we can deploy value more often and without friction.</p> </li> <li> <p>Continuous Quality</p> <p>We produce hypothesis and design solutions and evaluate outcomes and outputs. </p> <p>We understand that quality means valuable as well as functional. </p> <p>We design for security, privacy, and sustainability, reliability and scalability.</p> <p>We consider what success means and how we will measure it at the start and throughout the problem lifecycle.</p> </li> <li> <p>Continuous Planning</p> <p>We plan, and re-plan our short, medium, and long-term objectives.</p> <p>We are responsible for consulting with stakeholders and informing them of the progress on the objectives. </p> <p>We are all responsible for delivering our objectives. We work autonomously and are empowered to find the most effective ways of delivering the best solutions. </p> </li> <li> <p>Continuous Autonomy</p> <p>Each team member is empowered to perform their work without interference. </p> <p>We aim to provide clarity on expected standards, and we expect teams and individuals to work autonomously within these guidelines.</p> <p>We are individually accountable for:</p> <ul> <li>Adhering to our practice principles and tenets</li> <li>Managing their own time and workload in close collaboration with their team  </li> <li>Proactively keeping themselves engaged \u2013 there is always somewhere you can be helpful, don\u2019t wait to be asked</li> <li>Working within the governance controls, understanding what is required of them, and finding a way forward </li> </ul> <p>Read more </p> </li> </ul> <ul> <li> <p>Locality &amp; Simplicity</p> <p>Keep decisions and processes close to relevant teams, and ensure simplicity in workflows.</p> </li> <li> <p>Focus, Flow &amp; Joy</p> <p>Encourage deep work with minimal interruptions to enhance productivity and job satisfaction.</p> </li> <li> <p>Psychological Safety</p> <p>Create an environment where everyone feels safe to take risks and express themselves without fear of negative consequences.</p> </li> <li> <p>Improvement of Daily Work</p> <p>Continuously seek to refine and optimize everyday tasks and processes.</p> </li> <li> <p>Value Focus </p> <p>Prioritize work that delivers the highest value to customers and the business.</p> </li> <li> <p>A Bias towards Action </p> <p>Favour taking action and making decisions, even in the face of uncertainty.</p> </li> </ul>"},{"location":"Ways-of-Working/Tenets/Continuous-Autonomy/","title":"Continuous Autonomy","text":""},{"location":"Ways-of-Working/Tenets/Continuous-Autonomy/#autonomy-principles","title":"Autonomy Principles","text":"<ol> <li>Make suggestions - If you think there\u2019s a better way of doing things, don\u2019t keep it to yourself.  An autonomous environment requires us all to make suggestions on how we can improve.  Reflect on past suggestions and outcomes to refine your approach and enhance future suggestions.</li> <li>Experiment - Don\u2019t be afraid to trial new things.  Treat each experiment as an opportunity for iterative learning and improvement.  Embrace both successes and failures as valuable sources of insight and knowledge.</li> <li>Set your own direction - Take ownership of your journey by setting your own direction while aligning it with overarching goals and values.  Embrace autonomy in decision-making, but ensure that your chosen path is purposeful and meaningful.</li> <li>Anticipate and act - Proactively identify challenges, opportunities and needs before they arise.  Take initiative by seeking out ways to add value or create positive change.  Don't wait for instructions or circumstances to dictate your actions.</li> <li>Don\u2019t be afraid to challenge - Question everything and question again!  Have courage to challenge assumptions and norms.  Innovation and progress often emerges from questioning the status quo.  Approach challenges with curiosity and a commitment to finding better solutions.</li> <li>Keep yourself informed - Understand the boundaries that you work within.  You are accountable for adhering to our expected standards and governance controls.  Staying informed empowers you to make better decisions and contribute meaningfully.</li> </ol>"},{"location":"Ways-of-Working/Tenets/Continuous-Collaboration/","title":"Continuous Collaboration","text":""},{"location":"Ways-of-Working/Tenets/Continuous-Collaboration/#collaboration-principles","title":"Collaboration Principles","text":"<ol> <li>Stop judging, start helping - If you don't like the way something is, or what someone is doing, complaining isn't going to change it. A collaborative environment requires us all to identify how we can contribute. Focus your energy on what you can do to make the situation better, rather than why the situation is bad.</li> <li>Assume positive intent - It's easy to infer a negative intent. It's always better to act on the basis that the actions and words of others were meant to produce a positive outcome. We all make mistakes. Give benefit of the doubt.</li> <li>No side chats - When discussing work, do so in a public forum - e.g. the relevant Teams channel rather than a private chat. Regardless of who the question or comment is for, it benefits everyone involved in the work to hear that it has been said.</li> <li>Over-communicate - Being bombarded by messages is bad, but not being informed of important information is much worse. And if it is worth saying once, it is worth saying again and again. Just because you have told someone something, it doesn't mean they have remembered it or understood it. Over-communicating isn't oversharing though; succinctness is kindness, critical detail should follow.</li> <li>Ask stupid questions - There are no stupid questions - if someone is explaining something and you're unsure about it, ask them to explain it again. If they are not explaining in a way that resonates with you, ask if they can explain it in a way that does. If someone has told you something and you don't remember what they said, be comfortable asking them again - we are all growing and you won't be able to remember everything you are told.</li> <li>Be transparent &amp; informative - Making information available to others is transparency. Directly telling people that information is being informant. Good communication requires both.</li> <li>Offer and ask for feedback - We all need to improve. Useful feedback is a gift of immeasurable value. You'll get more of it if you go looking for it. And remember, you don't have to like it.</li> <li>Call it out - If someone isn't following one of these principles, let that person know. Remind each other what great collaboration and communication looks like. We all get it wrong some times.</li> </ol>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/","title":"Continuous Improvement","text":""},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#what-is-continuous-improvement","title":"What is Continuous Improvement?","text":"<p>Continuous improvement is the ongoing process of analysing performance, identifying opportunities, and making incremental changes to processes, products, and personnel. By consistently fine-tuning processes, we can save time, reduce costs, and deliver excellent products.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#principles","title":"Principles","text":"<ol> <li>Team Involvement - Everyone must engage in the improvement process. Their insights and participation are crucial for identifying issues and generating ideas for enhancement.</li> <li>Process-centric Approach - Focus on improving processes rather than blaming individuals. Understand and optimise workflows to reduce waste and increase efficiency.</li> <li>Incremental Improvements - Adopt a mindset of making small, gradual changes rather than large transformations. This approach minimises risk and allows for continuous, manageable progress.</li> <li>Root Cause Analysis - When problems arise, identify the root cause rather than treating the symptoms. Addressing the root cause prevents the issue from recurring.</li> <li>Training - Continuous learning equips team members to contribute effectively to improvement efforts.</li> <li>Feedback Loops - Use feedback to make ongoing adjustments and improvements.</li> <li>Adaptability - Be open to change and adapt to new information, technologies, and methodologies. Flexibility allows for effective responses to challenges and opportunities.</li> <li>Sustainability - Improvements must be sustainable. Regularly monitor, review, and refine processes to maintain progress.</li> </ol>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#tools-and-methodologies","title":"Tools and Methodologies","text":"<p>Integrating continuous improvement into your daily work involves adopting tools and practices that foster an improvement mindset. The best tools and practices are those that are revisited regularly and seamlessly integrated into your workflow.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#retrospectives","title":"Retrospectives","text":"<p>Retrospectives are a key tool for creating a culture of continuous improvement. They facilitate discussions about what went well and what could be improved. Effective teams hold regular retrospectives, independent of specific events, often every two weeks, to ensure continuous progress.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#the-plan-do-check-act-principle-pdca","title":"The Plan-Do-Check-Act Principle (PDCA)","text":"<p>PDCA is a widely used tool in continuous improvement. The steps are:</p> <ul> <li>Plan: Identify an opportunity and plan for change.</li> <li>Do: Implement the change on a small scale.</li> <li>Check: Use data to analyse the results and determine if the change made a difference.</li> <li>Act: Implement the change more broadly if successful or start the cycle again if not.</li> </ul>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#5-whys","title":"5 Whys","text":"<p>The 5 Whys technique involves asking \"why\" multiple times to drill down to the root cause of a problem. This method helps focus improvement efforts on the underlying causes rather than just addressing symptoms.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Improvement/#benefits","title":"Benefits","text":"<p>Here are key benefits:</p> <ul> <li>Improving Product Quality: Consistent refinements lead to better products.</li> <li>Enhancing Efficiency and Productivity: Streamlined processes boost team performance.</li> <li>Reducing Costs: Incremental changes can significantly lower development and deployment costs.</li> <li>Cutting Down Waste: Efficient processes minimise waste.</li> <li>Boosting Employee Satisfaction: Engaged teams are more satisfied and collaborative.</li> </ul>"},{"location":"Ways-of-Working/Tenets/Value-Focus/","title":"Value Focus","text":""},{"location":"Ways-of-Working/Tenets/Value-Focus/#what-is-value-focus","title":"What is Value Focus?","text":"<p>Value Focus is ensuring you prioritise work by balancing the effort and value ratio of your development.  Everyone in Platform Development is responsible for delivering value everyday - to our users, customers, the business, and to our platform. Because there are so many ways to deliver value, we must prioritise our work in a way that allows the delivery of the most amount of value to the highest number of people in the shortest time possible.</p>"},{"location":"Ways-of-Working/Tenets/Value-Focus/#what-has-value","title":"What has value?","text":"<p>To become Value Focused and prioritise work that delivers the highest value, we need to be engaging with our users and customers during the Discovery Zone. This will allow us to deeply understand present problems and assign value to solving them by disambiguating the user, customer and business impact. How to achieve Value Focus?</p>"},{"location":"Ways-of-Working/Tenets/Value-Focus/#tenets","title":"Tenets","text":"<ol> <li> <p>Become a user: by listening to our users, empathising with their problems and understanding their needs we can understand how best to deliver value to them. </p> </li> <li> <p>Seek out feedback &amp; actively listen: proactively seek feedback from users, customers and the business and take this feedback seriously. We can do this via lots of different methods such as informal conversations, building relationships that include regular communication, building our network of contacts via customer-facing teams, or more formal methods such as focus groups, surveys, requesting engagement through ProductBoard, or interrogating usage data.  </p> </li> <li> <p>Understand business value: we must continually engage with the direction of travel across the business and ensure we have a deep understanding of our business's mission, values and therefore strategic ambitions. We can do this in many ways; by interrogating available business financials, critically engaging with company communications around goals, ensure we understand what work we're carrying out support  launching products/publications etc., ensuring the creation of our department and team OKRs align with these goals and link hierarchically to them. </p> </li> <li> <p>Cross-business collaboration: by understanding business value we are then well positioned to collaborate with the wider business; consider the goals, aims and OKRs of other departments and where we have shared goals or aims. Seek out opportunities to approach problems collaboratively and work together to deliver value. This means that there may be ways of deliver the most value for the business by pooling our resources with other departments to support each department's objectives, </p> </li> <li> <p>Be realistic: we don't have time or budget to deliver all developments. If we choose to deliver this value then what are we not delivering? Focusing on value provides a guiding principle for us to be empowered to say no to certain developments, which will then allow us to focus on the highest value areas. </p> </li> <li> <p>Effectively prioritise: The process of factoring in all this information (user value, customer value, business value, understanding our business and department goals and balancing this against budget and resource) is prioritisation. By engaging with value and what this means for AM, we are empowered to effectively prioritise and have a framework to transparently share this prioritisation with the wider business. </p> </li> <li> <p>Get it out quickly: every release doesn't have to be perfect, it just has to be better. Iterative developments enable use to more quickly deliver value and by reflecting on the success of releases we can work to continually improve our work. </p> </li> <li> <p>Measure success: This is an essential part of value-focused delivery. We must review whether we delivered value after we've released a development. We should ask ourselves questions before working on developments, throughout our work and after a development is released. Questions like: what will success look like for this development? During development -- are we still focusing on value? By our planned measures, was it successful? If so, why? If not, why? What have we learned? What can we do differently next time to improve? </p> </li> </ol>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/","title":"Secure by Design","text":""},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#10-key-principles","title":"10 Key Principles","text":"<p>These principles are essential for creating robust, secure software that can withstand various threats and protect user data and privacy throughout the software development lifecycle.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#1-minimize-attack-surface-area","title":"1. Minimize Attack Surface Area","text":"<p>Reduce the number of entry points and exposed interfaces in your software. By limiting the points of interaction, you decrease the potential vulnerabilities that attackers can exploit.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#2-establish-secure-defaults","title":"2. Establish Secure Defaults","text":"<p>Ensure that your software is secure by default. Out-of-the-box configurations should be set to the most secure settings, requiring users to deliberately reduce security if they choose to.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#3-the-principle-of-least-privilege","title":"3. The Principle of Least Privilege","text":"<p>Grant the minimum level of access necessary for users and processes to perform their tasks. This limits the potential damage in case of a breach by restricting access to critical systems and data.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#4-the-principle-of-defence-in-depth","title":"4. The Principle of Defence in Depth","text":"<p>Implement multiple layers of security controls throughout the system. This strategy ensures that if one layer is compromised, additional layers provide continued protection.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#5-fail-securely","title":"5. Fail Securely","text":"<p>Design systems to handle failures gracefully and securely. Ensure that when errors occur, the system defaults to a secure state to prevent unintended access or data leakage.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#6-dont-trust-services","title":"6. Don\u2019t Trust Services","text":"<p>Assume that external services and components are not secure. Validate and sanitize all inputs and outputs, and implement additional security measures to protect against compromised third-party services.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#7-separation-of-duties","title":"7. Separation of Duties","text":"<p>Divide tasks and privileges among multiple users or systems to prevent any single entity from having too much control. This reduces the risk of insider threats and unauthorized access.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#8-avoid-security-by-obscurity","title":"8. Avoid Security by Obscurity","text":"<p>Do not rely on secrecy of design or implementation as a primary security measure. Ensure that your security mechanisms are robust and can withstand public scrutiny and attacks.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#9-keep-security-simple","title":"9. Keep Security Simple","text":"<p>Design security measures that are straightforward and easy to understand. Complex systems are more prone to errors and harder to manage, increasing the risk of vulnerabilities.</p>"},{"location":"Ways-of-Working/Tenets/Continuous-Quality/Security-by-design/#10-fix-security-issues-correctly","title":"10. Fix Security Issues Correctly","text":"<p>Address security vulnerabilities thoroughly and correctly the first time. Implement proper fixes and avoid temporary patches that could lead to recurring issues or new vulnerabilities.</p>"},{"location":"Ways-of-Working/Theory/","title":"Theory","text":"<p>This section is all about the theory, the developed understanding, that has influenced or informed our ways of working.</p> <p>The purpose of this section is to allow documents that outline our ways of working to be simple and succinct, and not drill into the theory. They can instead link to this section or external documents. </p>"},{"location":"Ways-of-Working/Theory/Business-Value/","title":"Business Value","text":"<p>Every organisation produces \"Business Value\". The term refers to anything that supports the health of the organisation in the long term. For a commercial enterprise this usually means sustained revenue growth and profitability, although it may also be tightly linked to the organisation's mission.</p> <p>Ideally, all the work done by and for an organisation should enable (directly or indirectly) the creation or maintenance of business value. Work that does not is either wasteful or damaging.</p> <p>However! It may not always be apparent how work supports or negates the creation of value, especially where it isn't clear what business value actually is.</p> Example <p>A team perform an experiment which turns out not to create the expected positive outcome.</p> <p>This work could be perceived as wasteful or even damaging. However, the team have gained valuable knowledge that could improve their ability to support the health of the organisation in the long term (business value generated). If the team fail to leverage this knowledge, or even carry on with their experiment regardless of its outcome, it may well in fact be wasteful or damaging (business value lost).</p> <p>Creating a link between Business Value and the work we do helps to guide us to do more valuable work, and even improve our ability to do more valuable work. Not only does this make our organisation more effective, but it can improve individual motivation, job satisfaction, and happiness.</p>"},{"location":"Ways-of-Working/Theory/Business-Value/#the-topology-of-business-value","title":"The Topology of Business Value","text":"<p>This model aims to demonstrate the link between business value and the common structures used in software delivery environments. Visualising this model can help us to express this link and its importance, as well as help us to explore how a specific things are related. </p> Example <p>You are working to refine and implement a backlog item, such as a new feature. It is relatively easy to explore, plan, and even execute the work required to deliver this backlog item, but it may not be immediately clear in how this backlog item brings value to the business. </p> <p>Exploring and understanding the problem, the business objective or the overarching outcome that is being addressed may be the missing link. </p> <p>Now we might look to improve this link: Is the problem well defined? Has this information been effectively shared? What other expertise could help validate that this problem is worth solving?</p> <p>And then we look further: what kind of value is being created? How does this support the health of the organisation in the long term?</p> <p>The model image is created using Miro. This board may change over time and these changes are not recorded in this document's git history. The board is publicly visible.</p>"},{"location":"Ways-of-Working/Theory/Business-Value/#approach-agnostic","title":"Approach agnostic","text":"<p>The model above uses some language that implies certain approaches, such as \"backlog\" or \"roadmap\". Regardless of the approach being used, the theory should stand true. We evolve our techniques to support improved links, and in turn create better value.</p>"},{"location":"Ways-of-Working/Theory/Business-Value/#further-reading","title":"Further reading","text":"<p>Directly related:</p> <p>The Art of Business Value, Mark Schwartz</p> <p>Peripherally related:</p> <p>Good to Great, Jim Collins Sooner Safer Happier, Jonathan Smart</p>"},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/","title":"DevOps 3 Ways","text":""},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/#intro","title":"Intro","text":"<p>This is a simplified summary of the 3 ways. It is highly recommended that all team members read \"The Phoenix Project\" or \"The DevOps Handbook\" both by Gene Kim.</p> <p>Additionally, you can learn about the 5 ideals, in \"The Unicorn Project\"</p>"},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/#first-way-understanding-and-optimising-flow","title":"First Way: Understanding and optimising flow","text":"<p>Understanding and optimising flow means improving the rate at which we deliver work: i.e. maximising our net effectiveness.</p> <p>When we talk about \"flow\" or \"flow of work\", we mean entire system or \"whole\". Often software delivery teams only evaluate their effectiveness within one part of the system, for example the bit when engineers write and test code. In fact the system is much larger and than this. Looking at just one part of the whole may allow us to make that part more efficient, and yet the whole system could become less effective.</p> <p>Evaluating a whole system is often known as systems thinking. When we look at an entire system we can see the interactions between system components, and where there are bottlenecks, also known as constraints. This helps us improve our system.</p> <p>For example: understanding system interactions helps clarify the impact of quality on subsequent parts of the system, and understanding constraints helps us discover which parts of the system are the slowest and make improvements.</p> <p>Technology teams are often expected to just \"get it done\" and discouraged from understanding the dynamics of the system in which they play a critical role. This approach impacts autonomy and reduces the ability of rapid decision making and learning.</p>"},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/#second-way-shortening-and-amplifying-feedback-loops","title":"Second Way: Shortening and Amplifying Feedback Loops","text":"<p>Equipped with a good understanding of flow and a desire to improve it, we need to ensure we have feedback.</p> <p>Feedback and Feedback</p> <p>Feedback may refer to the practice of providing an individual with your opinion of their performance, either relating to a specific action they have taken or their day to day duties. </p> <p>Feedback in the context of the Second Way refers more broadly to any information going upstream (right to left). This includes the  feedback described above, automated processes (e.g. integration test, build errors), or manual workflow information. </p> <p>Feedback loops are a critical part of improvement in iterative delivery environments. Each time a process or action is executed, there is an opportunity to provide information back \"upstream\", so that the next iteration can adapt.</p> <p>Shortening feedback loops means reducing the time it takes for feedback to be given.</p> <p>Amplifying feedback loops means ensuring that we pay enough attention to the information that is being created by the feedback loop.</p>"},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/#feedback-loop-examples","title":"Feedback loop examples","text":"<ol> <li> <p>A team following Scrum delivery practices have a 4 week sprint. They start the sprint with a set of deliverables and set to work. 4 weeks later they present their output to stakeholders. What could be done to shorten this loop?</p> </li> <li> <p>A software engineer is working on a task as part of a deliverable which will create various modules of code and new functionality. Once he has completed the work he passes it on to a tester who tests that the new functionality, and existing functionality works. The tester completes the testing then provides a list of defects back to the developer. What could be done to shorten this loop? How many loops could be created here?</p> </li> <li> <p>A junior software engineer is working on a task. They identify that the acceptance criteria for the backlog item is ambiguous and that the test plan is has not accounted for this. The senior test engineer that created the plan reviews it and determines that the plan and acceptance criteria are fine. How might this feedback be amplified?</p> </li> </ol>"},{"location":"Ways-of-Working/Theory/DevOps-3-Ways/#third-way-a-culture-of-continuous-experimentation-and-learning","title":"Third Way: A Culture of Continuous Experimentation and Learning","text":"<p>Feedback is coming thick and fast. What do we do with it? Experiment,  learn, and improve.</p> <p>Successful experimentation - experiments that result in improving our net effectivenes - lead us to improve our value stream: our delivery practices.</p> <p>Being brave and taking risks is how we ensure we are experimenting and able to learn.</p>"},{"location":"Ways-of-Working/Theory/Problem-Discovery/","title":"Problem Discovery","text":"<p>\u201cThe work you do to decide what to build\u201d Teresa Torres*</p> <p>*For more detailed theory, read Continuous Discovery Habits by Teresa Torres</p> <p>The objective of Problem Discovery is to build an in-depth understanding of the stated problem and it\u2019s context. This may include, but will not be limited to:</p> <ul> <li>who does the problem affect?</li> <li>what is the extent of the problem?</li> <li>is the stated problem the right problem?</li> <li>what assumptions are inherent in the stated problem?</li> <li>what value might solving the problem bring?</li> <li>what risks does solving the problem present?</li> <li>what dependencies are inherent in the problem or pathways to a solution?</li> <li>the viability of existing solution ideas.</li> </ul>"},{"location":"Ways-of-Working/Theory/Problem-Discovery/#discovery-planning","title":"Discovery Planning","text":"<p>In an ideal world, discovery runs continuously alongside design and implementation. When done effectively, continuous discovery informs problem definition and prioritisation iteratively, and on an ongoing basis.</p> <p>In practice, problems often arise which take work to understand. Planning how you will go about understanding the problem, who will contribute, and how you will measure the results of your discovery activities are all essential steps that need to happen before you can start effectively planning a solution.</p> <p>We strongly recommend planning discovery with colleagues who can bring different perspectives and expertise to the conversation. Consider forming a product trio \u2013 a Product Manager, a UX Designer and a Software Engineer \u2013 to build an understanding of what you\u2019re trying to achieve, together. Depending on the problem you\u2019re trying to solve, it may also be effective to extend the trio and bring in a colleague from another part of the business, such as a Test Engineer, or a member of Editorial or CX.</p> <p>Discovery activities should be selected based on what information you\u2019re looking to acquire, and the viable avenues open to you. Some activities result in qualitative feedback, some quantitative, some offer subjectivity, some objectivity, and some are tools for sorting known information.</p> <p>Discovery activities you may wish to consider include:</p> <ul> <li>stakeholder workshops</li> <li>surveys</li> <li>user interviews</li> <li>usability testing</li> <li>A/B tests</li> <li>customer journey mapping</li> <li>assumption mapping</li> <li>competitor analyses</li> <li>customer visits</li> <li>reviewing usability metrics</li> <li>reviewing Support feedback</li> <li>root cause analysis</li> <li>opportunity solution trees</li> <li></li> </ul>"},{"location":"Ways-of-Working/Toolkit/","title":"Toolkit","text":"<p>The toolkit outlines the many different mechanisms we may use throughout the problem lifecycle, and provides guidance in how to operate with these mechanisms.</p> <p>AMPFlow is an an evolving, adaptive, open-closed technology delivery system</p> <p>For each problem, different mechanisms will be employed by teams as they see fit, and teams are encouraged to adapt them and discover new mechanisms which can then be added to the toolkit.</p>"},{"location":"Ways-of-Working/Toolkit/#defaults","title":"Defaults","text":"<p>In some cases, particularly where there are many mechanisms available for performing certain operations or where an approach is preferred or strongly encouraged, we may select a \"default\", in the same way we may select default technologies or patterns. </p> <p>Guided not Forced</p> <p>We use the principle of guidelines and defaults to enable autonomy. Guidelines and defaults combined is preferred to \"best practices\", which infer that the best way is already known, and discourages continuous improvement.</p> <p>Teams would be expected to use the Default approach, unless they have a clear justification for not doing so - for example suitability to their current problem, or while experimenting with new mechanisms.</p> <p>Current Defaults</p>"},{"location":"Ways-of-Working/Toolkit/#tag:default","title":"Default","text":"<ul> <li>            After Action Review          </li> <li>            BDD best practices for writing test scenarios          </li> <li>            Code Peer Reviewing          </li> <li>            Community of Practice          </li> <li>            Decision Record Template          </li> <li>            Estimation &amp; ROM          </li> <li>            Hit Squads          </li> <li>            Playwright Test Automation Guidelines          </li> <li>            Project Register          </li> <li>            RAID          </li> <li>            Repo READMEs Guidelines          </li> <li>            Security and Reliability Impact Assessment Template          </li> <li>            Structured Experiments          </li> </ul>"},{"location":"Ways-of-Working/Toolkit/#adding-to-the-toolkit","title":"Adding to the Toolkit","text":""},{"location":"Ways-of-Working/Toolkit/#tips","title":"Tips","text":"<ul> <li>Mechanisms may be added by team members at at time. </li> <li>Remember to review existing mechanisms. Can you improve, extend, or replace an existing mechanism?</li> <li>Use tags to categorise, and to mark a default. Tags help with searching and listings.</li> <li>Keep documents simple, and use references to reliable external resources rather than repeating what is already published.</li> <li>Review and update documents regularly. If you don't think it is right, it may well benefit from improvement.</li> <li>Use AMPFlow language, and refer back to AMPFlow components: for example refer to \"Problems\" and the \"Problem Lifecycle\" rather than projects, or link back to governance components relevant to a mechanism.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/#avoid","title":"Avoid","text":"<ul> <li>Avoid nesting in folders. This is usually done for categorisation, but this often creates unnecessary borders.</li> <li>Avoid referencing external resources from highly opinionated or disreputable sites, or where the content is likely to change over time.  </li> <li>Don't leave outdated content unresolved. If you think it should be improved, fix it! </li> </ul> <p>Note</p> <p>If there is a default defined, it should be tagged with \"Default\".</p>"},{"location":"Ways-of-Working/Toolkit/After-Action-Review/","title":"After Action Review","text":"","tags":["AAR","Default"]},{"location":"Ways-of-Working/Toolkit/After-Action-Review/#guide-to-running-aar-meetings","title":"Guide to Running AAR Meetings","text":"<p>At any point throughout the problem lifecycle when an opportunity for learning is identified, the Delivery Team facilitate an After Action Review Event and produce an After Action Report.</p> <p>Plan Ahead</p> <p>Identify during planning when After Action Reviews may be useful (i.e. what are the likely triggers) and communicate this with stakeholders.</p> <p>Book your AAR meetings in early to ensure stakeholders can attend and understand expectations</p> <p>Plan your meeting carefully in advance.</p> <p>Teams can use any approach they wish to perform reviews and document outcomes. </p> <ul> <li>Review the toolkit section for documented approaches, or perform your own research.</li> <li>Review the tooling section of the Knowledgebase for current default document templates.</li> </ul>","tags":["AAR","Default"]},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/","title":"Backlog Refinement Sessions","text":""},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#backlog-refinement","title":"Backlog Refinement","text":"<p>The purpose of this meeting is for the team to review the prioritised items in the backlog before accepting them. We will make necessary adjustments for clarity and estimate the effort it will take to complete each Backlog Item (BLI).</p> <p>Refinement sessions help to accumulate a shared, comprehensive understanding of requirements among the dev team reducing the level of unplanned rework.</p> <p>As a result of the refining activities, the next chunk of backlog items is ready for delivery meaning that it has the necessary level of transparency for its accurate implementation.</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#desired-outcome","title":"Desired Outcome","text":"<p>The outcome of the backlog refinement is a list of BLIs that should be clear to all team members and be ready to be implemented in an upcoming Sprint.</p> <p>Later, at the Sprint planning event, the team agrees a set of BLIs for the Sprint and plans the tasks it will take to complete them.</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#attendees","title":"Attendees","text":"<p>Ideally, the entire team will attend a Refinement sessions, this includes developers, testers, product managers, and UX when required.</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#prerequisites","title":"Prerequisites","text":"<p>The team lead and product manager will groom the backlog prior to refinement, this may include:</p> <ul> <li>Engaging with key stakeholders to gather requirements</li> <li>Removing BLIs that are no longer relevant</li> <li>Prioritising the BLIs</li> <li>Review BLIs that are ready for refinement, ensuring that there is enough to understand the resources involved to complete it</li> <li>Prior to refinement, a list of BLIs that are due to be refined will be made available for the team. It is recommended that team members review the list prior to the meeting</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#agenda","title":"Agenda","text":""},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#backlog-item-discussion","title":"Backlog Item Discussion","text":"<p>Discuss what needs to be done and how it needs to be done to satisfy the acceptance criteria. When discussing BLIs the team should:</p> <ul> <li>Ensure Acceptance Criteria is valid</li> <li>Review dependencies</li> <li>Review order of work</li> <li>Create / Review tasks</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#decompose-backlog-items","title":"Decompose Backlog Items","text":"<p>Items must be sized appropriately. This means that they can be realistically \"Done\" within the Sprint time-box. If discussions reveal that a Backlog Item is unclear or high level and complex, the team should break it up into more precise and detailed BLIs to better understand and estimate them.</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#estimate-planning-poker","title":"Estimate / Planning Poker","text":"<p>Everyone in the team makes up their mind about the estimated effort for the BLI, typically we will be estimating using Story Points. When ready, they simultaneously reveal their estimates. If the estimations differ within the team, the members discuss their concerns until they reach an agreement.</p> <p>If the agreement still can\u2019t be reached, the facilitator, can go with the highest, the lowest, or the most common estimation. But a better way is to remove this BLI from the current agenda as most probably it needs to be reworked</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#guidelines","title":"Guidelines","text":"<p>Here are some tips to ensure the success of the refinement session.</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#keeping-on-track-timeboxing-discussions","title":"Keeping on track: Timeboxing Discussions","text":"<ul> <li>Discussion on a single BLI will be initially limited to 10 minutes</li> <li>If the BLI is still deemed unclear, we will move onto the next item</li> <li>Any questions regarding the BLI should be recorded, answers to these questions will be gathered by the team lead and product manager</li> <li>The BLI in question will be adjusted accordingly and brought back into refinement later</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#psychological-safety","title":"Psychological Safety","text":"<p>Refinement sessions are meant to discover requirements collaboratively. Conversations are so important because they forge BLIs into concrete tasks and items of the backlog. So, invest more in discussions and motivate the participants to express any concerns they may have.</p> <ul> <li>There are no stupid questions</li> <li>Everyone is entitled to an opinion</li> <li>Every member of the team is free to express their concerns</li> <li>Estimates are not promises, we are providing our best educated guesses!</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#build-on-feedback","title":"Build on feedback","text":"<p>A good practice is to consult the former Sprints within the production process. How much cost and effort did previous items take to be completed?</p>"},{"location":"Ways-of-Working/Toolkit/Backlog-Refinement-Session-Guidelines/#development-is-a-team-sport","title":"Development is a team sport","text":"<p>We have the freedom and flexibility as a team to decide how we want to work. This document is a guideline for how we could handle our refinement sessions - if something isn't working well, or we can improve in some way, the team should feel encouraged to speak up!</p>"},{"location":"Ways-of-Working/Toolkit/Community-of-Practice/","title":"Community of Practice","text":"<p>Stub</p> <p>This page is currently a stub, and requires further expansion</p>","tags":["Default","Community of Practice","Draft"]},{"location":"Ways-of-Working/Toolkit/Community-of-Practice/#communities-of-practices","title":"Communities of Practices","text":"<p>Communities of Practice (or CoPs) are derived from the Scaled Agile Framework (SAFe), which describes them as groups with a common interest in a technical or business issue, and who collaborate to share information, skills, and ideas in order to mutually develop their mastery.</p> <p>We can develop this idea to cover two areas:</p> <ol> <li>core departmental competencies, which covers the primary skill areas within the department, such as product management, software development, testing, design</li> <li>emergent competencies, which covers newly developed or learnt skill or knowledge areas which may later become part of core departmental competencies, such as security testing, behaviour driven development, editorial production workflows, estimation</li> </ol> <p>Note</p> <p>Communities of Practice, Centres of Excellence, and Special Interest Groups are various terms for similar principles. Here we are simplifying this into singular term.  References:     - https://enterprise-knowledge.com/the-difference-between-organizational-community-programs-cop-coe-erg-sig/    - https://www.pmi.org/disciplined-agile/people/centers-of-excellence</p>","tags":["Default","Community of Practice","Draft"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/","title":"Estimation & ROM","text":"<p>This document outlines an approach to normalising the outputs from software estimation, for each of layers of the workflow hierarchy.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#estimation-vs-rough-order-of-magnitude","title":"Estimation vs Rough Order of Magnitude","text":"<p>It is often necessary to provide an indication of likely scale of work early on the the problem lifecycle, sometimes even before a solution has been determined. This is a Rough Order of Magnitude (ROM), not an Estimate.</p> <p>Estimation, on the other hand, is used to determine the effort required to perform some work or deliver some outcome. Estimates a coupled to a scope. Therefore, as the scope changes the estimate must also change. </p> <p>ROMs are not Estimates</p> <p>The term \u201cEstimate\u201d should be dropped completely when referring to Rough Order of Magnitude, so as to prevent conflation and to make them \"safer\". Instead refer to them only as \u201cRough Order of Magnitudes\u201d or \u201cROMs\u201d. e.g. \"No, we haven't estimated this yet, there is a ROM though.\"</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#outcome","title":"Outcome","text":"<p>Outcomes may require ROMS and Estimates at different points in their lifecycle. </p> <p>Both use an Outcome Size as the estimate value, which represent a range of weeks it will take to complete.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#rough-order-of-magnitude","title":"Rough Order of Magnitude","text":"<p>This is an early form of estimation provided when design has not been performed. Estimating \u201cproblems\u201d is not possible,  we must at some point make a leap to assume solutions, so ROM estimates must be accompanied by a \u201cROM Rationale\u201d which would typically detail the assumptions made and the risks associated with those assumptions, by way of caveat.</p> <p>ROMs have inherently low confidence, so confidence does not need to be captured.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#estimate","title":"Estimate","text":"<p>This estimate is iteratively refined throughout the design process, however no Estimate should be produced until it has a high level of confidence, e.g: 75%+. Where no estimate can be produced a ROM must be provided instead. If an estimate can be produced before a ROM has been created, then there is no need to produce a ROM. </p> <p>It is possible in some situations that estimating Outcomes directly is impractical, and that ROMs are enough for Outcomes. This aligns well with a continuous discovery approach, but may be less favourable in project based work.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#ready-to-estimate","title":"Ready to Estimate","text":"<p>\u201cReady to Estimate\u201d means you can estimate with 75%+ confidence, which can be described as: </p> <p>We express strong confidence in the accuracy of the estimate, grounded in the information available and the team's expertise. We expect the actual time spent delivering this to be no more than 25% over the estimate provided, given the scope as it is stated.</p> <p>Ready to Estimate Status indicates the item's readiness. A traffic light (RAG) value is used, where: -  Red indicates little design progress has been made.  -  Amber indicates a solution has been determined and agreed, with limited detailed specifications. -  Green indicates there is enough detail to perform an estimate. </p> <p>Therefore Green indicates \u201cReady to estimate\u201d with at least 75% confidence.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#outcome-size","title":"Outcome Size","text":"<p>Outcome Sizes include:</p> Size Time-frame XS 0-2 weeks S 2-4 weeks M 4-8 weeks L 8-16 weeks XL 16-32 weeks Unmeasurable NA <p>Unmeasurable infers that there is not enough information to determine or assume a possible solution, or that the Outcome is too large and must be broken down.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#feature","title":"Feature","text":"<p>Features have two types of estimates, Rough Order of Magnitude, and Estimate.</p> <p>Both use a Feature Size as the estimate value, which represent a range of weeks it will take to complete, however is a different scale to the Outcome Size.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#rough-order-of-magnitude_1","title":"Rough Order of Magnitude","text":"<p>Same as Outcome. ROMs are used when there is not enough information to provide an Estimate, e.g. a solution has not been designed.</p> <p>The same traffic light system applies, to indicate readiness and ability to estimate with high confidence.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#estimate_1","title":"Estimate","text":"<p>Same as Outcome. </p> <p>As features belonging to an Outcome are estimated, the Outcome estimate should be updated.</p> <p>A Feature\u2019s Estimate must be updated when the child BLIs are estimated. As BLIs may have different scales, the team must agree on and consistently use a mapping between their BLI scales and the Feature Size scale, e.g. if using Story Points 0 -1 = XS, 2 = S, 3-5 = M etc.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#feature-size","title":"Feature Size","text":"<p>Feature Sizes include:</p> Size Time-frame XS 0-1 weeks S 1-2 weeks M 2-4 weeks L 4-6 weeks XL 6-10 weeks Unmeasurable NA <p>Note</p> <p>The Feature Size scales are smaller than Outcome Size. XL caps at 10 weeks, and it (almost) uses a Fibonacci scale, whereas the Outcome Size uses a doubling sequence. </p> <p>A lower cap should force very large features to be disaggregated. Side note: Future measurements can provide insights to show whether smaller features are delivered more predictably.    </p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Estimation-and-ROM/#backlog-items-tasks","title":"Backlog Items &amp; Tasks","text":"<p>It is up to teams to determine what the appropriate estimation scales are. Estimation is not necessarily required at these levels, but may enhance planning, accuracy, and analysis.</p> <p>Backlog Items and Tasks contain a Numeric Estimation field which can be used for different types of estimation \u2013 points, hours, days, weeks. Numeric Estimate Type is used to specify the scale being used.</p> <p>Backlog items also include a Backlog Item Size field, as a possible alternative to the numeric estimate options.</p> <p>Teams can use whichever approach they like, being mindful that consistency will enable better analysis. Other types of estimate can be added later, and a unified approach may be considered.</p>","tags":["Delivery Planning","Workflow Management","Estimation","Default"]},{"location":"Ways-of-Working/Toolkit/Example-Mapping/","title":"Example Mapping","text":""},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#what-is-example-mapping","title":"What is Example Mapping?","text":"<p>Example Mapping, also known as Feature Mapping is a technique used for refining and establishing clearer and better-defined user acceptance criteria for a certain user story/business requirements</p> <p>Through Example mapping, those directly involved in product development, such as product owners, developers, and testers, can quickly and efficiently break down the product backlog of a given product by structuring their conversations around it.</p> <p>During these discussions, the team(s) participating should flesh out user acceptance criteria and draw out relevant scenarios and ask important questions associated with the product or its feature. By asking these questions and using the examples of the rules, the participants in the session can explore possible solutions and come up with the one that is optimal for both the user and the organisation developing the product.</p> <p>Furthermore, this technique helps them develop a shared understanding of the path forward and the need to add, remove, or adjust certain features. Having people who cover the various aspects of product development in the same room provides an opportunity to view a user story and a potential issue from different angles. </p> <p>Product owners can provide an explanation of business rules and exemplary story scenarios, and developers and other members of the technical team can ask all the right questions about those rules and examples, while testers offer observations about how the feature will actually work.</p>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#when-should-example-mapping-be-used","title":"When should Example Mapping be used?","text":"<p>During the Design and Definition stage, as part of the Readying process. Normally in the form of discovery workshops or 3 Amigo's sessions. </p>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#what-should-an-example-mapping-session-identify","title":"What should an example mapping session identify?","text":"<ul> <li> <p>The user acceptance criteria that will determine the constraints on the scope of a user story/business requirement.</p> </li> <li> <p>Questions about the user story, or scenarios where the team isn\u2019t certain what the expected behaviour will look like.</p> </li> <li> <p>Necessary assumptions needed to move forward.</p> </li> <li> <p>New product backlog items discovered during the process.</p> </li> <li> <p>Product backlog items that are deferred or removed from the development. </p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#what-are-the-key-benefits-of-example-mapping","title":"What are the key benefits of Example Mapping?","text":"<ul> <li> <p>We can breakdown a backlog item and understand it, preventing large BLI's entering a sprint\u200b in the process.</p> </li> <li> <p>We can Define Business rules\u200b related to the BLI</p> </li> <li> <p>Obtain a shared understanding (understanding the knowns, unknowns and answers to these)\u200b</p> </li> <li> <p>Create examples / Scenario's\u200b</p> </li> <li> <p>Use those Examples to turn into Executable Specifications (Given, When, Then)\u200b that can drive development and automated acceptance tests</p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#example-mapping-colours-explained","title":"Example mapping colours explained","text":"<p>The process of Example mapping itself involves four differently-coloured sticky notes, each for one aspect of the implementation of this technique. This is the colour-coded card system proposed by the creator of the example mapping technique, Matt Wynne:</p> <ul> <li> <p>Yellow sticky notes should be used to define the story itself and serve as the headline for the entire example map.</p> </li> <li> <p>Blue sticky notes will indicate specific business and other rules directly associated with the story.</p> </li> <li> <p>Green sticky notes serve for defining the examples of the rules in the row above represented by the blue sticky notes.</p> </li> <li> <p>Red / Pink sticky notes are used for making notes of the questions that arise during the discussion. These questions can be related to the examples, rules, or the definition of the story itself.</p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#how-does-example-mapping-work","title":"How does Example mapping work?","text":"<ul> <li> <p>1 - Gather people from your team who bring different perspectives. </p> </li> <li> <p>2 - Start by picking a story (backlog item) and writing it on the yellow sticky note. This sticky note will be placed at the top of the example map, serving as a header. </p> </li> <li> <p>3 - Write the business rules or the acceptance criteria that are already known on the blue sticky notes. These cards should be placed in the first horizontal row beneath the story (yellow sticky note).</p> </li> <li> <p>4 - Underneath the blue sticky notes with the rules, place green cards with one or more relevant examples for each rule written on them. (Of course, the examples should be placed under the rule they refer to. As for the format of the examples, there are no restrictions, you can use gherkin syntax, or leave them unstructured, as long as everyone understands them.)</p> </li> <li> <p>5 - Write down All unanswered questions and issues that can only be resolved by people NOT currently participating in the discussion on pink sticky notes, preferably next to the example or the rule they pertain to. (As the conversation moves on and you fill the table or board with sticky notes, certain issues or misunderstandings will arise, either relating to a specific example or, perhaps the entire rule.)</p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#how-do-we-define-the-visual-process","title":"How do we define the Visual Process?","text":"<p>Through conversation, you\u2019ll soon be done with the basic setup and have a visual representation of how the team currently views the story. The large presence of certain colours on the table or board indicates the level of story understanding at that point. </p> <ul> <li> <p>Plenty of pink cards will mean that there are a lot of unresolved issues and that a team still has a lot to learn to gain a full understanding of a story.</p> </li> <li> <p>If the blue colour is dominating the table, meaning that there are multiple business rules, the story is likely very large and complex. In that case, it\u2019s a good idea to slice the story into smaller fragments and add the new, smaller slice to the backlog. </p> </li> <li> <p>A lot of green cards with examples points to the complexity of the row above, indicating that rules are perhaps overly complicated. Just like stories, rules can also be set apart and then taken into consideration in smaller chunks. On the other hand, some rules will be so simple and obvious that you may not need examples at all.</p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#how-long-should-an-example-mapping-session-be","title":"How long should an example mapping session be?","text":"<ul> <li> <p>One of the big advantages of implementing the example mapping technique is that it takes only a chunk of your time and allows the team to efficiently use their time and resources to define acceptance criteria and explore the user story. A well-prepared team should be able to create an example map for an average-sized story fairly quickly, The time box in which the example mapping will take place should take no more than 60 minutes.</p> </li> <li> <p>Setting the timing in advance will help the flow of discussion and allow things to swiftly move forward. Example mapping the story in the set time commonly means that it\u2019s ready to be put into development. Once the set time expires, the team can vote decide whether they think the story has been properly mapped and the acceptance criteria is clear or further readying is required. </p> </li> <li> <p>If the time box is not met, it means that the participants probably should practice the example mapping techniques more, or that the user story example map has too many rules or too many questions, In that case, it should be reworked and refined. </p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#is-there-an-example-mapping-template-i-can-use","title":"Is there an Example Mapping template I can use?","text":"<ul> <li>Yes, you can find it here &gt; Miro Board template</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Example-Mapping/#references","title":"References","text":"<ul> <li> <p>Feature Mapping \u2013 a lightweight requirements discovery practice for agile teams</p> </li> <li> <p>Miro Board template</p> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Hit-Squads/","title":"Hit Squads","text":"","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#hit-squads","title":"Hit Squads","text":"<p>A hit squad is a cross-team group of individuals focussed on solving high priority, well-defined ways of working problems.</p> <p>A ways of working problem could be anything that affects the department\u2019s practices and capabilities. </p> <p>Priority of problems is relative, but should consider the impact of the problem (and its solution), as well as the urgency, where compared to other known problems that need solving. Priorities will change continuously, and therefore a hit squad must readily review priorities, and pause or cancel their programme of work.</p>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#commencing-hit-squads","title":"Commencing Hit Squads","text":"<p>Anyone can create a hit squad, at any time. However, the following principles must be followed:</p> <ul> <li>The problem must be well defined, meaning it is:<ol> <li>Clear \u2013 it is described using plain and simple language, and is unambiguous. It describes a problems that needs solving, not a solution.</li> <li>Specific \u2013 it is a single and discrete problem, not a general theme or idea.</li> <li>Aligned \u2013 the group are aligned that this is the problem that the group must solve.</li> </ol> </li> <li>Priority is determined:<ul> <li>Key stakeholders, typically including members of the department leadership, agree that this problem needs solving and should take priority over other problems</li> <li>There are enough team members interested, able, and committed solving this problem as a priority, taking into consideration their other work commitments.</li> </ul> </li> <li>Membership and sponsorship must be identified (see Ownership)</li> <li>Documentation must be maintained: the purpose, plan, and status of the hit squads activities must be kept updated.</li> </ul>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#creating-solutions","title":"Creating Solutions","text":"<p>The fundamental goal of a hit squad is to solve a problem, however, it likely to be necessary to perform experiments in order to determine the best solution/s to the problem.</p> <p>Experiments</p> <p>Following the conclusion of an experiment, the hit squad will determine whether further experimentation is required, or whether an acceptable solution has been found. </p> <p>The outcomes of this may include:</p> <ol> <li>Creation and/or cessation of mechanisms for the Ways of Working toolkit, which may be determined to be \u201cDefaults\u201d</li> <li>Training, knowledge sharing, and/or the creation of a Community of Practice.</li> <li>The adoption and/or retiring of software tools.</li> </ol>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#tag:experiments","title":"Experiments","text":"<ul> <li>            Structured Experiments          </li> </ul>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#concluding-hit-squads","title":"Concluding Hit Squads","text":"<p>A Hit Squad may conclude (come to an end) for several reasons, such as:</p> <ol> <li>A solution has been found and agreed upon</li> <li>No viable solution has been found, and the problem is determined to be unsolved.</li> <li>The problem has gone away or is no longer a priority</li> </ol> <p>The members of a hit squad are responsible for reaching a conclusion and ending their activities. They are also responsible for documenting the hit squad activities and outcomes, and communicating the conclusion to the department. </p> <p>The sponsor can support the team in reaching a conclusion, and may request that the hit squad concludes if they become aware of concerns or issues with or surrounding the hit squad's activities.</p>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#ownership","title":"Ownership","text":"Owner Responsibility Hit Squad Owner One specific hit squad member. Responsible for ensuring that the hit squad perform their activities, particularly communication and consultation with stakeholders. Hit Squad Responsible for scoping, planning, conducting the hit squad, and documenting and communicating all plans and outcomes. Hit Squad Sponsor A DMT or LG member who acts as primary stakeholder and consultant to the hit squad and supports the team with decision making.","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#suggested-flow","title":"Suggested Flow","text":"<p>The members of a hit squad can conduct their actions as they see fit, this suggested flow aims to provide a starting point if you are not sure what to do. You may well need to adapt this as your situation requires.</p> <p>Before kick-off, two of more team members will have decided that a problem may benefit from a hit squad. They will have a simple understanding of what the problem is, but may not have defined it fully. They may already have a sponsor and </p> <p>Between each stage, consult with stakeholders and evaluate priority and viability, and whether the hit squad should continue, change course, or conclude. In this suggested flow, stakeholders includes the hit squad sponsor.</p> <ol> <li> <p>Define and align</p> <ol> <li>Produce a well-defined problem, and ensure everyone is aligned. Determine:<ul> <li>the value of solving the problem</li> <li>impact and urgency, and priority</li> <li>stakeholders</li> <li>membership, ownership, and sponsorship</li> </ul> </li> <li>Document and seek feedback from stakeholders. </li> </ol> </li> <li> <p>Determine an objective and simple success measures</p> <ol> <li>Identify what success means for solving this problem, and how it can be measured. Keep it simple and achievable. Consider qualitative and quantitative measures. </li> <li>Document and seek feedback from stakeholders.</li> </ol> </li> <li> <p>Ideate</p> <ol> <li>Ensure sufficient research and knowledge acquisition is performed. Identify SMEs in the department. Identify resources.</li> <li>Identify possible solutions to the problem. Use structured workshops where possible.</li> <li>Present proposals to stakeholders and seek feedback.</li> <li>Iterate the above until you have converged on a small number of proposed solutions.</li> </ol> </li> <li> <p>Experiment</p> <p>Perform structured experiments to validate (or disprove) proposed solutions. This may be a single experiment, a series of experiments, or experiments run in parallel.</p> </li> <li> <p>Review</p> <p>Share the outcome of the experiments with stakeholders. </p> <p>Has this experiment successfully solved the problem? Have your success criteria been satisfactorily met? Do they need to be modified based on what you have learnt.</p> </li> <li> <p>Iterate</p> <p>Iterate through the ideation and experimentation as appropriate.</p> </li> <li> <p>Conclude</p> <p>Wrap up the hit squad once a conclusion has been made, ensuring that a plan is in place for communicating the conclusion, and implementation, including knowledge sharing, or training.</p> </li> </ol>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#tips","title":"Tips","text":"<p>Be quick. Hit squads should aim to be as short lived as possible. This can be enabled by:</p> <ol> <li>Focus and simplicity: make sure the problem and objective is clear and small. Larger problems are more complex and harder to solve, require a larger time commitment. </li> <li>A  bias towards action: avoid decision paralysis and over preparation: find the smallest, simplest action that can be taken rapidly, then iterate fast. </li> <li>Short, quick experiments create learnings faster. Avoid long running experiments that produce no insights or outcomes for long periods.</li> </ol> <p>Avoid waste. Your time is limited and valuable, use it carefully:</p> <ul> <li>A little research goes a long way. Don\u2019t rely on assumptions or past experiences alone.</li> <li>Measuring success and performing experiments is time consuming, keep them simple and achievable, and prioritise carefully.</li> </ul> <p>Failure is good, iteration is great.</p> <ul> <li>Experiments may fail, and that is OK. It is perfectly valid to disprove a solution.</li> <li>Create success metrics before defining the experiments, to avoid creating biases.</li> <li>The objective may well aim for a first iteration of a solution, upon which there will be continuous improvement.</li> </ul>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#objective-examples","title":"Objective Examples","text":"","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#simple-objective","title":"Simple Objective","text":"<p>Problem: It isn\u2019t clear who has read RFCs</p> <p>Objective: Create a mechanism for identifying when RFCs have been by relevant stakeholders.</p> <p>Success Measures:</p> <ol> <li>RFC creators can find out who has read the document, regardless of whether they provided feedback, without having to ask around</li> <li>Business stakeholders identify an improvement in RFC visibility</li> </ol>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Hit-Squads/#using-okrs","title":"Using OKRs","text":"<p>In this example, the same discrete problem links to other problems, and so a higher level objective could be determined. Which may have numerous key results. This Hit Squad identify the first key result, and this becomes the focussed goal of the hit squad. Later or concurrent hit squads could tackle other key results for the same objective.</p> <p>Problem: It isn\u2019t clear who has read RFCs</p> <p>Objective: Improve RFC engagement</p> <p>Key Result: Create a mechanism for identifying when RFCs have been by relevant stakeholders.</p> <p>Success Measures:</p> <ol> <li>RFC creators can find out who has read the document, regardless of whether they provided feedback, without having to ask around</li> <li>Business stakeholders identify an improvement in RFC visibility</li> </ol>","tags":["Default","Hit-Squads"]},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/","title":"Meeting Guidelines","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#meetings-meeting-types","title":"Meetings &amp; meeting types","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#what-is-a-meeting","title":"What is a meeting?","text":"<p>A meeting is a scheduled calendar event where people come together to figure something out, make decisions, or align on important matters.</p>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#what-is-not-a-meeting","title":"What is not a meeting?","text":"<ul> <li>Hopping on a quick call to collaborate or brainstorm.</li> <li>Pair programming or working through code together. That\u2019s just teamwork.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#meeting-types","title":"Meeting types","text":"<p>There are many different types of meeting, which influence their nature. They can broadly be grouped into the following categories:</p> <ol> <li>Decision making<ul> <li>Where a specific decision needs to be made as the primary outcome.</li> </ul> </li> <li>Design &amp; problem solving<ul> <li>Where the outcome is to identify possible solutions to problems </li> </ul> </li> <li>Communication, learning &amp; alignment<ul> <li>Where information is shared to and the outcome is to create alignment or improve group knowledge</li> </ul> </li> <li>Connection<ul> <li>Where the outcome is to strengthen relationship and build culture</li> </ul> </li> </ol> <p>Meetings that attempt to combine multiple categories may suffer from lack of clarity or struggle to reach a meaningful outcome.</p> <p>In addition, meetings have other common qualities, such as:</p> <ul> <li>Strategic or tactical</li> <li>Recurring or one-off</li> <li>Facilitated, chaired, or collaborative</li> <li>Pre-read required</li> <li>Synchronous or asynchronous</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#guidelines-for-meetings","title":"Guidelines for meetings","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#general-guidance","title":"General guidance","text":"<ul> <li>Objective oriented: Meetings should always state their objective(s), so that everyone is clear what the group aims to achieve.</li> <li>End 5 minutes early: Meetings of 30 minutes or more should end 5 minutes early by default.</li> <li>Breaks for long meetings: If your meeting goes beyond an hour, include a 5-10 minute break every 45-60 minutes.</li> <li>Accept/decline meetings: Respond to invites promptly (\"Accept and send response\"). If you can't make it, decline so people aren't left guessing.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#before-the-meeting","title":"Before the meeting","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#objective-format","title":"Objective &amp; format","text":"<ol> <li> <p>An objective should be shared when the meeting is initially booked.</p> <ul> <li>A clear meeting objective is more important than an agenda.</li> <li>A good meeting objective should describe both the purpose (why you're meeting) and the outcome (what success looks like).</li> <li>If the objective isn\u2019t clear, the meeting probably isn\u2019t necessary.</li> </ul> <p>Examples: </p> <ul> <li>\"To align on product priorities for the next sprint, so that we can create a plan.\"</li> <li>\"To discuss and create a better understanding of problem X, and identify next steps.\"</li> </ul> </li> <li> <p>Determine and communicate an appropriate format:</p> <ul> <li>Short meetings are not better than long ones, it is more important to make the meeting effective rather than quick.</li> <li>In person meetings are better for longer meetings or complicated and complex issues.</li> <li>\"Async\" meetings often work well for simple decisions and communications, and can remove scheduling issues. </li> </ul> </li> </ol>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#attendees","title":"Attendees","text":"<ul> <li>Make it clear if attendance is required or optional.</li> <li>Make it clear if attendees can be added by others (forwarding) or requested.</li> <li>Establish roles where needed, if a facilitator or minute-taker is needed, ask someone to take on the role beforehand and outline it in the invite.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#agenda-flexibility","title":"Agenda &amp; flexibility","text":"<ul> <li>Agendas are useful for many meeting types, especially tactical ones.</li> <li>Where possible, allow agendas to be flexible to enable real-time adjustments.</li> <li>Sharing agendas in advance can help everyone prepare effectively.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#pre-meeting-materials","title":"Pre-meeting materials","text":"<ul> <li>Share relevant documents, data, or context well in advance if possible.</li> <li>For meetings with deep context (strategy, planning), consider a short read-ahead memo.</li> <li>Alternatively, adopt the \"Amazon style\" \u2013 spend the first 5-10 minutes reading together in silence before discussion.</li> <li>Be considerate of the time and context switching burden, your priorities aren't the same as others.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#during-the-meeting","title":"During the meeting","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#start-strong","title":"Start strong","text":"<ul> <li>Restate the meeting objective.</li> <li>Summarise the purpose and any key background points.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#chairs-facilitators-and-note-takers","title":"Chairs, facilitators and note takers","text":"<ul> <li>Assign a chair or facilitator to:<ul> <li>keep the meeting focused and on track.</li> <li>capture and share outcomes, decisions, and actions</li> <li>Tips:</li> <li>Use time-boxing to ensure each topic gets appropriate attention.</li> <li>If decisions are needed, allocate time for debate and resolution.</li> <li>Record the meeting if appropriate.</li> </ul> </li> <li>Assign a note taker if required to:<ul> <li>Keep a record of the conversation, to provide context for actions and decisions</li> </ul> </li> <li>Consider using transcriptions instead of a note taker, as it is hard to participate in fluid conversations while capturing notes. </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#encourage-healthy-conflict-and-foster-inclusion","title":"Encourage healthy conflict and foster inclusion","text":"<ul> <li>Actively seek out diverse perspectives and healthy ideological conflict by mining for conflict.<ul> <li>For example, ask: \"What\u2019s the counterpoint to this idea?\" or \"Is there a risk we\u2019re overlooking?\"</li> </ul> </li> <li>Allow space for all voices. <ul> <li>Use workshopping techniques such as structured turns, hand-raising in virtual calls, or break-out groups </li> <li>Practice active listening, repeat back what you have understood to produce clarity.</li> </ul> </li> <li>Psychological safety leads to better outcomes. Debate ideas, not people.</li> <li>Encourage colleagues to contribute in ways that work for them. Sometimes typing something in the chat is easier.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#minimise-slides","title":"Minimise slides","text":"<ul> <li>Use PowerPoint or slides sparingly. Prioritise discussion over presentation.</li> <li>Slides often shift attention away from discussion. Use them to support, not lead, the conversation.</li> <li>If slides are needed, keep them short and sharp. Don't read from them.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#action-oriented-mindset","title":"Action-oriented mindset","text":"<ul> <li>Apply a bias towards action. Keep discussions time bound and move to decisions and determining actions:<ul> <li>Identify clear decisions.</li> <li>Assign actions and owners.</li> <li>Clarify targets and deadlines.</li> </ul> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#stay-focused","title":"Stay focused","text":"<ul> <li>Stick to the objective. If tangents arise, note them and return to them later.</li> <li>Park non-urgent or off-topic discussions for follow-up.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#finish-on-time","title":"Finish on time","text":"<ul> <li>Respect people's calendars and energy.</li> <li>If needed, schedule a follow-up rather than overrunning.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#after-the-meeting","title":"After the meeting","text":""},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#record-outcomes-decisions-actions","title":"Record outcomes, decisions &amp; actions","text":"<ul> <li>Summarise and share with attendees promptly after the meeting:</li> <li>the outcome and key takeaways</li> <li>actions including owners and timelines.</li> <li>meeting notes (if taken)</li> <li>Capture important decisions in the Decision Log</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#feedback-and-improvement","title":"Feedback and improvement","text":"<ul> <li>Gather feedback to help improve future meetings of this nature</li> <li>Regularly evaluate if recurring meetings are:<ul> <li>Still required</li> <li>Still effective</li> </ul> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#hybrid-and-virtual-meetings","title":"Hybrid and virtual meetings","text":"<p>Check out AM's guidelines for effective virtual and hybrid meetings. </p> <p>In addition, as a department we suggest the bellow: </p>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#use-video-thoughtfully","title":"Use video thoughtfully","text":"<p>Cameras are encouraged to help foster better collaboration, but not always required. Certain types of meetings and conversations benefit from visual cues more than others.</p> <ul> <li>Attendees should be considerate of their colleagues ability to engage.  </li> <li>Meeting organisers should be considerate of camera fatigue. </li> <li>Where appropriate, it is great to let individuals choose. Where cameras are essential, it is best to make this clear in advance.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Meeting-Guidelines/#use-collaboration-tools","title":"Use collaboration tools","text":"<ul> <li>Whiteboards (e.g. MS Whiteboard or Miro) for collaboration.</li> <li>Notes &amp; lists (e.g. Loop, Azure DevOps, MS To Do, or MS Planner) for tracking tasks and actions.</li> <li>MS Teams reactions and hand raises for participation and energy.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Project-Register/","title":"Project Register","text":"","tags":["Project Information Framework","Default"]},{"location":"Ways-of-Working/Toolkit/Project-Register/#introduction","title":"Introduction","text":"<p>The Project Register provides a simple mechanism for surfacing key information for upcoming, current, and historic delivery.</p> <p>It lives within the Technology SharePoint site and is accessible to all AM staff.</p> <p>Project</p> <p>\"Project\" is a proxy term for any deliverable in the problem lifecycle e.g. discrete features, OKRs, projects or programmes.</p>","tags":["Project Information Framework","Default"]},{"location":"Ways-of-Working/Toolkit/Project-Register/#process","title":"Process","text":"<p>Problem Owner must ensure that when a project or objective enters the Design Stage ensure that it is added to the Project Register and include:</p> <ul> <li>Title and Project/Objective Summary</li> <li>Delivery Owner</li> <li>Engineering Owner</li> <li>Team are added to the Project Register </li> </ul> <p>The Delivery Owner is thereafter responsible for ensuring that the Register is kept up to date, by:</p> <ul> <li>Once implementation planning has been performed:<ul> <li>Setting the Scheduled Completion Date </li> <li>Providing a link to a delivery plan (if appropriate)</li> </ul> </li> <li>Throughout the Design and Implementation Stages, at least fortnightly:<ul> <li>Providing an updated Delivery Status Summary</li> <li>Updating the Stage, Health, and Expected Completion Date</li> </ul> </li> </ul>","tags":["Project Information Framework","Default"]},{"location":"Ways-of-Working/Toolkit/Project-Register/#fields","title":"Fields","text":"<ul> <li>Title - A memorable name of the project or objective</li> <li>Project/Objective Summary - A succinct summary of the purpose of the project. E.g. the intended outcome. Link out to documentation such as Product Board.</li> <li>Stage: <ul> <li>Planning - Design Stage has commenced</li> <li>In progress - Implementation Stage has commenced</li> <li>In Warranty - Implementation is complete and the solution is released but within warranty</li> <li>Complete - Design, implementation, and release, is complete, and the warranty period has finished. </li> </ul> </li> <li>Ownership, as outlined in Problem Ownership. Not all ownership fields are included for brevity.<ul> <li>Problem Owner</li> <li>Delivery Owner</li> <li>Engineering Owner</li> </ul> </li> <li>Health:<ul> <li>On Track: The planned delivery date will be achieved </li> <li>Ahead: Delivery will be achieved ahead of schedule</li> <li>At Risk: Known risks may cause the delivery date to be missed.</li> <li>Complete: Delivery is done. (In Warranty or Complete stage only).</li> </ul> </li> <li>Delivery Plan: a link to the relevant detailed delivery plan</li> <li>Status Summary: a point in time summary of the delivery status.</li> <li>Completed Date: The date that the project state changed to Complete.</li> <li>Scheduled Completion Date: The agreed date that the project is scheduled to completed. This is not the same as the expected completion date, which may change throughout the project.</li> <li>Expected Completion Date: The date that the project is expected to finish based on the current and most recent estimates.     </li> </ul>","tags":["Project Information Framework","Default"]},{"location":"Ways-of-Working/Toolkit/Project-Register/#responsibilities","title":"Responsibilities","text":"Owner Responsibility Problem Owner Responsible for adding new projects to the Register and keeping it up to date. Delivery Owner Accountable ensuring the Project Register is correct. Responsible for providing regular and timely status updates","tags":["Project Information Framework","Default"]},{"location":"Ways-of-Working/Toolkit/Pull-Requests/","title":"Pull Requests","text":"","tags":["Implementation Peer Review"]},{"location":"Ways-of-Working/Toolkit/Pull-Requests/#pull-requests","title":"Pull Requests","text":"<p>A pull request (PR) is required when merging a child branch into a parent.</p> <p>NOTE: manually merging or committing directly to a parent branch is not permitted. Firstly because it skips the PR mechanism (and therefore bypasses an important quality control step), and secondly because only a PR will trigger the relevant Continuous Integration workflows and builds.</p> <p>A pull request will ideally not be the first time another engineer has seen the work in progress! Think of it more as a final check; pair programming and ad-hoc discussions on possible approaches and patterns would ideally have already given one or more other engineers in the team an opportunity to see the code and provide feedback. Remember, early feedback means we can spot and rectify mistakes earlier. Doing so later in the process will require more time and effort.</p>","tags":["Implementation Peer Review"]},{"location":"Ways-of-Working/Toolkit/Pull-Requests/#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>When an engineer has completed their work on a child branch, and has committed and pushed it to GitHub, they should visit the GitHub website and issue a pull request. This can be done either on the repository's main page (GitHub will usually prompt a user to issue a pull request if they have recently pushed a child branch), or by navigating to the Pull requests tab and clicking the green New pull request button.</p> <p>When creating the pull request, the engineer submitting their work should make sure to:</p> <ul> <li>Ensure the base branch is correct (this should be the parent branch, e.g. a Feature branch when merging in a Work branch when working on a new feature)</li> <li>Ensure the compare branch is correct (this should be the engineer's work branch in most situations)</li> <li>Populate the title with a concise summary of what is being submitted</li> <li>Populate the body with an explanation of their approach to solving the problem, including any patterns used</li> <li>Link the request to the relevant backlog item in Azure DevOps by adding <code>AB#123</code> where 123 is the ID of the backlog item. At a minimum, you must always link the backlog item, though it can be useful to also link the relevant task or defect in Azure DevOps - so add multiple <code>AB#123</code> tags where applicable.</li> <li>If there are PRs in other repos that are related to the same piece of work, link to them in the PR description (see hints, below)</li> <li>This shouldn't need to be too detailed, as ideally this won't be the first time they are seeing the code</li> <li>In the case of a shared code repository, provided the information about version number update (i.e. MAJOR vs MINOR vs PATCH) and why it is appropriate</li> <li>Assign their team as a reviewer</li> </ul> <p>NOTE: the final step will automatically assign all other team members, and only one team member needs to approve the PR. The engineer submitting the PR should communicate with the rest of their team to request a review.</p> <p>If feedback is not provided within a reasonable amount of time, the engineer submitting the PR should remind their team that it is still outstanding. The reviewing engineer(s) should remember that not providing timely feedback could well hold up work, and that this is also likely to increase the amount of WIP.</p> <p>Finally, if the changes made are no longer needed the Pull Request should be closed, and the work branch deleted. Similarly, avoid creating PRs that won't get merged for a long time, as this is likely to lead to merge conflicts and increases the chances that the changes are no longer valid or necessary.</p>","tags":["Implementation Peer Review"]},{"location":"Ways-of-Working/Toolkit/Pull-Requests/#reviewing-pull-requests-providing-feedback","title":"Reviewing Pull Requests &amp; Providing Feedback","text":"<p>The reviewing engineer(s) should get a GitHub notification, and should review the PR at the earliest opportunity, and discuss any questions they may have or suggested changes/fixes that need to be made with the original engineer. Once the review has been completed and the reviewing engineer is happy with the changes (including any agreed changes having been completed and committed), they should approve the changes.</p> <p>The original engineer is then responsible for merging the changes into the parent branch, and monitoring any CI workflows to ensure they complete successfully.</p> <p>Feedback should be giving via comments in the pull request in GitHub.</p> <p>Any member of the team can perform a peer review for anyone else, not just a more senior member!</p>","tags":["Implementation Peer Review"]},{"location":"Ways-of-Working/Toolkit/Pull-Requests/#hints-for-working-with-pull-requests-in-github","title":"Hints for working with Pull Requests in GitHub","text":"<p>You can open a draft Pull Request even before the work is ready for review. When you have finished working on it, you can then click the Ready for Review button on the PR page.</p> <p>Any further commits pushed to the same branch before the Pull Request is merged will be included. This works for both draft and non-draft PRs</p> <p>Beware, the default behaviour is that GitHub will create a PR that merges into the <code>main</code> branch, which is rarely correct. However, it is possible to change the base of a PR before it is merged, simply by clicking the Edit button at the top of the PR page, and then selecting the relevant <code>feature</code> or <code>release</code> branch from the drop down.</p> <p>If you add a link to another GitHub Pull Request (usually from another repo) in the body of your pull request, or within another comment, GitHub will display the status of the linked PR with the main one. Hovering over the link will show a \"card\" containing more details of that other PR.</p>","tags":["Implementation Peer Review"]},{"location":"Ways-of-Working/Toolkit/Quick-Start-Guide/","title":"Quick Start Guide","text":"<p>This guide will be a basic runbook with links for typical \"type 1\" problems.</p>"},{"location":"Ways-of-Working/Toolkit/RAID/","title":"RAID","text":"","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#introduction","title":"Introduction","text":"<ul> <li>RAID capture, management and mitigation is a continuous process throughout the entire problem lifecycle. </li> <li>If you are unsure of how to approach RAID capture, management and mitigation, the following guide documents a default approach.</li> <li>This may be a useful starting point for delivery teams, and as competency grows, teams are encouraged to experiment with, define and evolve their own processes and procedures whilst operating within the stipulated minimum viable guardrails.</li> <li>The guidance demonstrates several options for managing RAID so that teams can find what works best for them. If a team is unsure where to start they are encouraged to arrange a short session with a RAID SME who, through discussion, can make recommendations on the best approach for the team.</li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#raid-subject-matter-experts","title":"RAID Subject Matter Experts","text":"<ul> <li>Alex Rae / Agile Delivery Manager: alex.rae@amdigital.co.uk </li> <li>Carol Webb / Senior Business Analyst: carolw@amdigital.co.uk   </li> <li>Matt Braisher / Product Manager: mattb@amdigital.co.uk  </li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#raid-reporting-mechanisms","title":"Raid Reporting Mechanisms","text":"<p>Reporting RAID (Risks, Assumptions, Issues, and Dependencies) is crucial for effective project management and ensuring transparency across the team and stakeholders.</p>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#how-to-report-raid","title":"How to Report RAID","text":"<ul> <li>Maintain a comprehensive RAID log, typically in a shared document or tool like AzDo, Jira or Miro or any project management tool </li> <li>Ensure the RAID log is updated regularly, before key meetings or ceremonies</li> <li>Use a standardized format for reporting to ensure clarity and consistency</li> <li>Tailor the RAID log for the audience: this may entail extracting key RAID items and adding them to a PowerPoint deck.  Key items can be discussed individually or rolled up to form key RAID themes to discuss with stakeholders (see example below).</li> <li>Be mindful of the level at which you're communicating at, and tailor the level of detail to suit the audience </li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#when-to-report-raid","title":"When to Report RAID","text":"<p>Define requirements for reporting RAID with your delivery team and stakeholders and continuously monitor and review this as things change </p> <ul> <li>Project initiation: during the initial planning phase, identify and document all potential RAID elements to establish a baseline</li> <li>Sprint planning: before each sprint, review and update the RAID log to ensure any new items are captured and addressed</li> <li>Daily standups: briefly mention any critical RAID updates that might impact daily work to keep the team informed </li> <li>Sprint reviews / Retrospectives: at the end of each sprint, review the RAID log to discuss what was resolved, what new items were added, and what ongoing items need further attention </li> <li>Ad hoc reporting: anytime a significant RAID item emerges, update the RAID log and communicate it to the team promptly to mitigate impacts   </li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#what-to-report","title":"What to Report","text":"Risks <ul> <li>Description: Clearly describe the potential problem</li> <li>Impact Rating: Rate the risk based on how severe the impact would be if the risk materializes</li> <li>Impact Description: Explain the potential impact on the project if the risk materializes</li> <li>Likelihood Rating: Assess the likelihood of the risk occurring. Determine Likelihood Guidance</li> <li>Mitigation Plan: Outline steps to mitigate the risk</li> <li>Owner: Assign responsibility for managing the risk</li> </ul> Assumptions <ul> <li>Description: Document assumptions made during project planning</li> <li>Rationale: Explain why these assumptions are considered valid</li> <li>Impact: Describe the impact if the assumptions prove incorrect</li> <li>Impact Rating: Rate the risk based on how severe the impact would be if the assumption is incorrect</li> <li>Confidence Level Rating: Indicate the degree of certainty associated with the accuracy or likelihood of a RAID item, helping prioritise actions and focus resources effectively</li> <li>Validation: Outline steps to validate the assumptions during the project</li> </ul> Issues <ul> <li>Description: Identify tasks or components that depend on each other</li> <li>Impact: Explain how issues affect the project timeline and milestones</li> <li>Impact Rating: Rate the risk based on how severe the impact would be if the issue cannot be resolved or removed</li> <li>Management Plan: Describe how dependencies will be managed</li> <li>Owner: Assign responsibility for managing the dependencies</li> </ul> Dependencies <ul> <li>Description: Identify tasks or components that depend on each other</li> <li>Impact: Explain how dependencies affect the project timeline and milestones</li> <li>Impact Rating: Rate the risk based on how severe the impact would be if the dependency cannot be resolved or removed</li> <li>Management Plan: Describe how dependencies will be managed</li> <li>Owner: Assign responsibility for managing the dependencies</li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#raid-workflows","title":"RAID Workflows","text":"<p>RAID workflow applied to the full-problem solving lifecycle (AMPFlow) - A RAID workflow as it applies to the AMPFlow delivery system </p>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#key-pointers","title":"Key Pointers","text":"<p>Ownership</p> <ul> <li>typically, ownership of the RAID log will change throughout the full problem-solving lifecycle </li> <li>ensure that ownership: roles and responsibilities are clearly defined at all times, if they aren't, take action to resolve ASAP</li> </ul> <p>Handovers Between Zones</p> <ul> <li>handovers generally occur between zones</li> <li>schedule a RAID handover event, ensure all knowledge is transferred: key findings / next steps are clearly understood</li> </ul> <p>Managing RAID's impact on viability / feasibility of the problem / solution</p> <ul> <li>RAID has the potential to influence whether a piece of work, be it a product, feature, BLI etc is still valid</li> <li>Therefore, we must be continuously discovering and monitoring new RAID entries, assessing their potential impact, likelihood and communicating this with our colleagues and stakeholders</li> <li>Draw on Product Manager, Engineer, UX, Delivery Manager perspectives to ensure we are covering all areas</li> <li>It's challenging to manage this effectively amongst other responsibilities</li> <li>Therefore use 'mechanisms' to define a workflow for RAID and assign responsibilities - this workflow can and will adapt to change and evolve over time. continuously review its effectiveness and look for new ways to improve it</li> </ul> <p>Operation Zone</p> <ul> <li>once work is passed from the 'implementation zone' into the 'operation zone' the RAID log will be handed over to the support team</li> <li>TBD - currently working with support to define an initial workflow for this </li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#raid-applied-to-sprint-planning-at-delivery-team-level","title":"RAID applied to sprint planning at delivery team level","text":"<p>A RAID workflow as it applies to delivery team sprint planning</p> <p></p>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#key-pointers_1","title":"Key Pointers","text":"<p>Assigning RAID Entries to a Project or Sprint</p> <ul> <li>ensure that it is clear whether a RAID item relates to a sprint or a project so that it is managed and reported appropriately</li> <li>use separate RAID logs or a single RAID log with items labelled appropriately - there is no right or wrong way to do this</li> <li>a sprint RAID item will typically be managed by the sprint team and will be short lived</li> <li>project RAID items may require communication with a wider audience, e.g. as part of stakeholder updates</li> </ul> <p>Assigning Ratings:</p> <ul> <li>ratings can take several different formats, for example High/Medium/Low, 1-5</li> <li>choose a consistent way of rating all items so that they can be easily compared against each other</li> <li>for all types of RAID, rating the impact helps determine whether mitigations are required</li> <li>for Risks a rating for the likelihood of it materialising provides further insight into the need for mitigation planning</li> <li>likelihood and Impact ratings can be combined to determine which risks pose the biggest threat</li> <li>for Assumptions a confidence rating on the accuracy of the assumption, combined with the impact rating, provides insight into the priority that should be given to validating the assumption</li> </ul> <p>Planning Mitigations:</p> <ul> <li>mitigations or management plans should be recorded for RAID items that have the potential to cause a significant impact on a sprint or project</li> <li>these plans should be reviewed and updated in light of new information or a change to the ratings assigned to the RAID item</li> </ul> <p>Defining Continuous Review Mechanisms:</p> <ul> <li>it can be difficult to find time for RAID amongst other responsibilities</li> <li>identifying regular checkpoints for reviewing the RAID log can prevent it being lost amongst all the work that is happening </li> <li>what 'regular' means depends on whether the item is a project or sprint level item.  For example, sprint items may be reviewed daily whereas project items may be reviewed once per sprint</li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/RAID/#raid-tooling-options","title":"RAID Tooling Options","text":"<ul> <li>Review the tooling section of the Knowledgebase for current default document templates.</li> </ul>","tags":["draft","RAID","Default"]},{"location":"Ways-of-Working/Toolkit/Release-Notifications/","title":"Release Notifications","text":"<p>When carrying out a release, it is good practice to let stakeholders know the release is about to happen, and what it will mean for them. </p>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#what-types-of-work-require-notification","title":"What types of work require notification?","text":"<p>Any work that involves a release to a production environment, for any platform. Work includes:</p> <ul> <li>Product features and changes</li> <li>Bug fixes that involve code changes</li> <li>Technical improvements and infrastructure changes</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#how-to-notify-colleagues-of-a-release","title":"How to notify colleagues of a release","text":"<ul> <li>Release notifications can be carried out by any member of the team that performed the release.</li> <li>Delivery team member posts to the Release Announcements channel in MS Teams (in the Platform Support team) ahead of release.</li> <li>Use tags (groups or individuals) to alert the relevant stakeholders identified in your Release Plan.</li> <li>Send a follow-up message to the same stakeholders to confirm when the release has been completed successfully, or if there\u2019s been an issue and you have to change course/roll back.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#what-to-communicate","title":"What to communicate","text":"<p>When communicating to stakeholders, think about their perspective and what they might need to know. Be sure to:</p> <ul> <li>Provide a short summary of the change, including the area of the platform and whether it is part of a larger suite of changes.</li> <li>Provide context behind the change. Stakeholders may not know the change is coming, or why! A brief note on practical applications can be useful.</li> <li>State any visible changes they\u2019ll see as a result, including whether the change has been feature flagged. Even if there are no visible changes, letting stakeholders know that a release is taking place can help manage expectations in the event that there\u2019s an issue.</li> <li>State any actions that are required by users in order to see the desired changes, e.g. clear browser cache, re-promote or re-publish.</li> <li>If this is a bug being fixed, link to the original support ticket affected by the release.</li> </ul> <p>If the release is part of a larger set of changes, the Product Manager should be in discussions with stakeholders throughout development, and will prepare accompanying Feature Notes.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#examples","title":"Examples","text":""},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#a-good-level-of-detail","title":"A good level of detail","text":"<p>Hi [tag(s)] we are about to release the fix for font colours in high contrast mode.  This should fix a few instances where font was not sufficiently contrasting when using the high contrast mode toggle. This will require a republish for sites that\u2019s users are using a screen reader.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#poor-detail-valuable-information-is-missing","title":"Poor detail: Valuable information is missing","text":"<p>Hi [tag(s)] [Product Delivery Team] are releasing a change that will improve accessibility when using keyboard focus visibility on video player. This is a visual change and will effect everybody. Will notify when release is complete.</p> <p>In this scenario, a stakeholder had to ask what the visual change was.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Notifications/#poor-detail-contextual-information-is-missing","title":"Poor detail: Contextual information is missing","text":"<p>Morning [tag(s)], we are planning to perform an update to the Export Asset Metadata feature today. This will add an Asset ID column to any newly generated asset exports.</p> <p>In this scenario, a stakeholder had to ask what the Asset ID was/how it was different from other IDs. They benefited from a response that told them the reason for the change, and how it could be applied to their own use cases.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/","title":"Release Plans","text":"<p>Any releases to production environments that are not fully automated must be acompanied by a release plan. This is to ensure that software is released smoothly and efficiently, with minimal disruption to users. A deployment plan can help in the following ways:</p> <ul> <li>Reduce the risk of errors by ensuring engineers performing it know exactly what to do</li> <li>Ensuring engineers can perform the release quickly and efficiently and thereby reducing downtime</li> <li>Improve quality by having a smoke test plan in place to quickly assert that the release has been successful</li> <li>Mitigate potential risks by explicitly identifying risks and having rollback plans and mitigation plans</li> </ul> <p>In addition to these benefits, any changes to platforms that are subject to SOC2 must be documented to maintain compliance.</p> <p>Info</p> <p>See also: Release Notifications</p>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/#what-types-of-release-need-a-release-plan","title":"What types of release need a release plan?","text":"<p>Any release that changes production infrastructure in any way and is not fully automated requires a release plan. This can include</p> <ul> <li>Deploying code to existing infrastructure</li> <li>Adding or creating new infrastructure</li> <li>Modifying existing infrastructure</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/#what-types-of-release-do-not-need-a-release-plan","title":"What types of release do not need a release plan?","text":"<p>Any release that is fully automated via some kind of pipeline, requiring little to no manual intervention does not need a release plan to be created. These types of release are usually initiated by merging a Pull Request which kicks off the pipeline. Fully automated releases include:</p> <ul> <li>Changes to infrastructure that is managed via Terraform</li> <li>Applications that have a full CI/CD pipeline</li> </ul> <p>In these instances, the associated Pull Request, pipeline logs and source control changes are sufficient documentation to satisfy the SOC2 requirement to document any changes to production infrastructure.</p> <p>Note</p> <p>Deployments to non-production environments or deployments of not-yet-live platforms also do not require any kind of release plan.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/#documenting-release-plans","title":"Documenting Release Plans","text":"<p>Regardless of how they are documented, a release plan should include at least the following:</p> <ul> <li>Stakeholders to communicate with</li> <li>Risks associated with the release</li> <li>Steps required to perform the release</li> <li>Smoke test plan</li> <li>Rollback plan where applicable</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/#simplified-release-plans","title":"Simplified release plans","text":"<p>For any simple, low-risk release that only involves components from a single repository, teams may document their release plan within with the Pull Request (PR) that merges the changes being released into the <code>main</code> branch. There is a template for this which can be applied when merging to main.</p> <p>Documenting and performing the release can then be done by following these steps:</p> <ul> <li>Create PR to main, adding the <code>release</code> label to the PR<ul> <li>Automation populates updates the PR details with the template</li> </ul> </li> <li>Engineer updates the release plan with risks, steps and smoke test plan</li> <li>Plan is reviewed by another engineer. Approving the PR records the fact of the plan being approved</li> <li>Perform release steps manually as we currently do</li> <li>Check off steps using checkboxes in the PR as they are performed</li> <li>Merge to main once all complete</li> </ul> <p>Info</p> <p>Adding the template for simplified release plans to a repository is as straightforward as adding this shared workflow</p> <p>Note that GitHub repositories don't automatically have the <code>release</code> label created, so simply create it manually the first time.</p>"},{"location":"Ways-of-Working/Toolkit/Release-Plans/#full-release-plans","title":"Full release plans","text":"<p>For any higher-risk releases, or ones that involve the simultaneous deployment of multiple components from different repositories, teams must use our existing full release plan template.</p> <p>This takes the form of a Word Document saved within the Technology <code>&gt;&gt;</code> General <code>&gt;&gt;</code> Deployment Plans folder in Sharepoint.</p> <p>Teams must create their release plan from the template, and save it within the relevant Platform &amp; Year subfolder as appropriate.</p>"},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/","title":"Repo READMEs Guidelines","text":"","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#readme-files","title":"README files","text":"<p>Every repository must have a file called <code>README.md</code> in the root folder. Using markdown files instead of a plain text file allows us to format documentation, add links and images to enrich the documentation. As an added bonus, they get rendered nicely when browsing the repository via the GitHub web UI.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#why-include-a-readme-at-all","title":"Why include a README at all?","text":"<p>Every repo must include a README file so that viewers know what the code does and how they can get started using it. Most importantly a README should serve to significantly reduce or remove friction when a new engineer starts working with a repository, so that they can start being productive as quickly as possible.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#required-sections","title":"Required sections","text":"<p>Note</p> <p>The layout for our README files is based loosely on the Best README Template project.</p> <p>The Azure DevOps README guidelines are also a useful reference.</p> <p>Every README file must have the following sections:</p> <ul> <li>Overview</li> <li>Built with</li> <li>Architecture</li> <li>Getting started</li> <li>Usage</li> <li>Contributing</li> </ul> <p>Whilst these sections are a minimum, and must appear on the README for every repository we manage, they don't need to be lengthy! A brief summary or link out to existing documentation elsewhere is acceptable.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#overview","title":"Overview","text":"<p>Provide a brief overview of the repository, and the problem it aims to solve.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#built-with","title":"Built with","text":"<p>List the major technologies and frameworks used within the repository, as a bullet-point list. Ideally link out to some documentation for each item, this is especially important for technologies and frameworks outside our usual tech stack.</p> <p>Bullet point list of any other first-party components that we depend on/query.</p> <p>Bullet point list any storage used.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#architecture","title":"Architecture","text":"<p>This section is only required if the repo being worked on is a microservice. If you are not working on a microservice, feel free to skip this section.</p> <p>The architecture should highlight the structure of the microservice. A diagram should be supplied, informing readers on how projects relate to each other. Mermaid-js diagrams are best used since changes can be tracked easily. An example is shown below:</p> <p></p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#flows-of-interest","title":"Flows of interest","text":"<p>The Flows of interest section should contain any particularly complex API calls. Basic CRUD operations should NOT be described here. Sequence diagrams are a good way to outline this, with participants relating to classes (once inside the API). An example is shown below.</p> <p></p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#getting-started","title":"Getting started","text":"<p>This section must clearly describe how someone who has just downloaded the repository can get started running/using it. It must include any pre-requisites or frameworks that must be installed locally, and any additional installation steps where relevant.</p> <p>This will usually take the form of:</p> <ul> <li> <p>An \"Onboarding\" section</p> </li> <li> <p>For Quartex repos, you can usually link out to the Engineer Onboarding steps</p> </li> <li> <p>A \"Running the platform\" section</p> <ul> <li>A bullet point list with steps and commands required to run the repository</li> </ul> </li> <li> <p>Ad hoc sections</p> <ul> <li>A bullet point list with steps that will only need to be run rarely (updating the database, etc.)</li> </ul> </li> </ul> <p>Note: Never make any assumptions about the engineer's local environment or tools.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#usage","title":"Usage","text":"<p>The exact contents here will be different depending on the type of repository in question. </p> <p>A microservice repository must document the endpoints it implements, whilst a shared code repository must explain how to include any packages/modules and give examples of how to use the classes/libraries exposed.</p> <p>For a microservice, you can instruct users how to access the swagger documentation for the microservice. </p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#microservice","title":"Microservice","text":"<p>For microservices, link out a markdown document for each controller in the microservice. These documents should detail the following for each request in the controller:</p> <ul> <li>Methods (GET, POST, PUT, DELETE, etc.)</li> <li>URL </li> <li>Query Parameters</li> <li>Request body</li> <li>Response body</li> </ul> <p> WARNING Instructions on how to generate these documents will be added in future, for now they can be skipped.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#contributing","title":"Contributing","text":"<p>How should an engineer who wishes to contribute to the repository do so? In most cases, a link out to the relevant branching strategy and detailing how to test the application will usually be sufficient.</p>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Repo-Readmes/#template","title":"Template","text":"<p>If starting from a blank slate, you could use this template as a guide for a new <code>README.md</code> file.</p> <pre><code># ACME project\n\n## Overview\n\nThe ACME project is a thing that does stuff.\n\n## Built with\n\nThis repository is built using the following technologies:\n\n- technology\n- etc\n\nThe Microservice interacts with the following other Quartex Microservices:\n\n- XXX\n\nFor storage, we are using:\n\n- XXX\n\n## Architecture\n\nThe XXX microservice is used to XXX. Its main responsibility is to XXX.\n\nBelow is architectural diagram showing the relationship between different projects in the microservice, as well as all external calls.\n\n&lt;--! Diagram !--&gt;\n\n### Flows of interest\n\n#### XXX\n\nBelow is a sequence diagram outlining XXX.\n\n&lt;--! Diagram !--&gt;\n\n## Getting started\n\nTo get started with the XXX Microservice, please follow our [Engineer Onboarding steps](https://dev.azure.com/AMDigitalTech/Platform%20Development/_wiki/wikis/AMD-Technology.wiki/385/Engineer-Onboarding).\n\n### Running the application\n\nOnce you have followed these steps, you can start running the application.\n\nTo do this:\n\n- Intercept on the environment you will be working on (as mentioned in the Engineer Onboarding steps)\n- Run the following in command line (where `{env}` is the environment you have intercepted on):\n\n  `dotnet run --launch-profile XXX-{env} --project XXX`\n\n### Setting up the database\n\nIf you are running the microservice on a new environment or you have added migrations, you will need to run the microservice's migrator to update the database. \n\nTo do this:\n\n- Run the following in command line (where `{env}` is the environment you have intercepted on):\n\n  `dotnet run --launch-profile XXX-{env} --project XXX`\n\n## Usage\n\nWe use [Swashbuckle](https://learn.microsoft.com/en-us/aspnet/core/tutorials/getting-started-with-swashbuckle?view=aspnetcore-6.0&amp;tabs=visual-studio) to generate our swagger for the various endpoints in the XXX Microservice. Once the Microservice is running, you can view details of the endpoint on http://localhost:{port}/swagger/index.html (generally, it'll be http://localhost:XXX/swagger/index.html).\n\n## Contributing\n\nWhen making changes to this repository, ensure that: \n\n- You follow the branching strategy outlined in [Playbook](https://amdigital-co-uk.github.io/Engineering/Source-Control%2C-Versioning-%26-Branching-Strategy/#branching-strategy)\n- No code is touched before failing tests are written\n- There is a preference for integration tests over unit tests (where pragmatic)\n</code></pre>","tags":["Engineering","Default"]},{"location":"Ways-of-Working/Toolkit/Runway-Planning/","title":"Runway Planning","text":""},{"location":"Ways-of-Working/Toolkit/Runway-Planning/#objective","title":"Objective","text":"<p>Understand and communicate what is likely to be delivered in the near term (e.g. 6-12 weeks), with a high degree of confidence.</p>"},{"location":"Ways-of-Working/Toolkit/Runway-Planning/#overview","title":"Overview","text":"<p>As part of iterative and incremental delivery planning, it is valuable to carefully plan the near future with a high level of detail.</p> <p>During runway planning, teams look ahead and map out how the current highest priority backlog items will be delivered over the coming sprints (e.g. next 3-6 sprints). Each delivery team has their own runway plan.</p> <p>By repeating this exercise at regular intervals, a team can maintain a clear runway of work and in doing so: - provide visibility of expected delivery - feed this information back into longer term delivery plans and delivery models - adapt their plans accordingly</p> <p>Important</p> <p>Maintaining a clear runway of work enables the team to understand the impact of pushing work out of the current work cycle/sprint - i.e. if we can't do this now, when will we? And what else will be impacted? This supports the team's autonomy, and empowers them to make informed decisions about the best way to complete work.</p>"},{"location":"Ways-of-Working/Toolkit/Runway-Planning/#inputs","title":"Inputs","text":"<p>Where available:</p> <ul> <li>Backlog of work, including context (readiness, priority, estimate)</li> <li>RAID Management</li> <li>Existing runway</li> <li>Delivery plans including context (such as a critical path map)</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Runway-Planning/#relative-sprint-priority","title":"Relative Sprint Priority","text":"<p>Priority of backlog items should be ranked using standard criteria, such as impact and urgency, and should not be subjective.</p> <p>Relative Sprint Priority ranks sprint deliverables, i.e. backlog items within the context of a sprint. For example, multiple backlog items may have P2 or P3 priority against them, so they can be ordered in a way that indicated the priority within the context of this specific sprint. Equally, given wider implications (such as blockers or dependencies) it may be preferable or necessary to work on a lower priority item before a higher one.</p> <p>The product delivery team are responsible for determining their own Relative Sprint Priority. Stakeholders may of course offer their feedback.</p>"},{"location":"Ways-of-Working/Toolkit/Runway-Planning/#tips-for-success","title":"Tips for Success","text":"<ol> <li>Remember that you are planning to be dynamic, not creating a rigid plan. </li> <li>Even though you are planning speculatively, the goal is to produce a plan that you are confident in. Don't overfill upcoming sprints. It will be tempting when stakeholders are all wanting competing work to be complete, but the team understand their competency better than anyone else, so they must communicate what they feel is achievable, and not just what they think stakeholders want to hear.</li> <li>Good estimation will help with good planning. It is important that we measure the success and impact of our estimates.</li> <li>The closer to \"Ready\" upcoming work is, the easier it will be to plan for it. Make sure you set aside time to get upcoming work ready.</li> </ol>"},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/","title":"Security and Reliability Impact Assessment Template","text":"<p>This template is the default template for Security and Reliability Impact Assessment documents. </p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#how-to-use","title":"How to use","text":"<p>Make a copy of this template in a branch in the Knowledgebase, ensuring that it is placed alongside the solution's other design documentation. Submit a Pull request and ensure that appropriate stakeholders are requested to review. If risks or concerns are raised, ensure that senior technical stakeholders such as the VP of Engineering and Principal Engineer are informed. </p> <p>It is the responsibility of the Engineering Owner to ensure that the SRIA is performed accurately and that the correct technical stakeholders are informed. </p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#solution-projectfeature","title":"Solution Project/Feature:","text":"<p>[link to design documents / tickets]</p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#engineering-owner","title":"Engineering Owner:","text":"<p>[name of engineering owner]</p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#1-security-impact-assessment","title":"1. Security Impact Assessment","text":"","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#11-overall-impact","title":"1.1 Overall Impact","text":"<ol> <li> No perceived impact on security. No further assessment is required.</li> <li> There is a likely impact on security.</li> </ol> <p>If No skip to 2.0. If Yes, continue to section 1.2.</p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#12-general-security-concerns","title":"1.2. General Security Concerns","text":"<ol> <li> <p>Does this solution introduce new data storage or transmission techniques or systems?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If Yes, describe the type of data and associated risks:</p> </li> <li> <p>Will sensitive or personally identifiable information (PII) be stored, processed, or transmitted?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If Yes, specify types of data:</p> </li> <li> <p>Does the solution expose any external interfaces (e.g., APIs, web services)?  </p> <ul> <li> Yes  </li> <li> No </li> </ul> <p>If Yes, reference relevant parts of technical design covering exposed interfaces:</p> </li> <li> <p>Are there any authentication or authorization mechanisms being used or implemented?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If No, and 1.2.3 is Yes, specify reasons:</p> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#13-threat-modelling-known-vulnerabilities","title":"1.3. Threat Modelling &amp; Known Vulnerabilities","text":"<ol> <li> <p>Have you created or updated a threat model for this solution?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If no, specify reasons:</p> </li> <li> <p>Does the solution mitigate known vulnerabilities in line with OWASP guidelines (see OWASP top 10 vulnerabilities)?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If No, specify reasons:</p> </li> <li> <p>Are there any third-party dependencies that could introduce security risks?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If Yes, reference relevant parts of technical design covering relevant third-party dependencies and mitigations:</p> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#14-maintenance-security-tests","title":"1.4. Maintenance &amp; Security Tests","text":"<ol> <li> <p>Will this solution impact existing security test strategies (e.g., penetration testing, vulnerability scans)?  </p> <ul> <li> Yes  </li> <li> No </li> </ul> <p>If Yes, reference solution test strategy regarding security:</p> </li> <li> <p>Will this solution deviate from any existing maintenance strategy, or require changes to the existing maintenance strategy?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If Yes, or if no maintenance strategy exists, describe maintenance strategy:</p> </li> <li> <p>Will a penetration test be performed by a third party prior to deploying this solution?  </p> <ul> <li> Yes  </li> <li> No  </li> </ul> <p>If No, specify reasons:</p> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#2-reliability-impact-assessment","title":"2. Reliability Impact Assessment","text":"","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#21-overall-impact","title":"2.1 Overall Impact","text":"<ol> <li> No perceived impact on reliability. No further assessment is required.</li> <li> There is a likely impact on reliability.</li> </ol> <p>If No skip to 3. If Yes, continue to section 2.2.</p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#22-performance-under-load","title":"2.2. Performance Under Load","text":"<ol> <li> <p>Will this solution change the system's ability to handle user or data load?  </p> <ul> <li> Yes  </li> <li> No  </li> </ul> <p>If Yes, reference relevant parts of technical design covering performance:</p> </li> <li> <p>Are performance testing be performed for this solution?  </p> <ul> <li> Yes  </li> <li> No</li> </ul> <p>If No, specify reasons:</p> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#23-failure-recovery","title":"2.3. Failure &amp; Recovery","text":"<ol> <li> <p>Does the design include mechanisms for failing gracefully?  </p> <ul> <li> Yes  </li> <li> No   </li> </ul> <p>If No, outline key failure points and reasons:</p> </li> <li> <p>Does the design include mechanisms for recovery from error/failure?  </p> <ul> <li> Yes  </li> <li> No   </li> </ul> <p>If No, specify reasons:</p> </li> <li> <p>Will this solution affect the system's disaster recovery (DR) capabilities, or is additional DR required in order to meet defined Restore Point and Recovery Time Objectives (RPO/RTO)?  </p> <ul> <li> Yes  </li> <li> No </li> </ul> <p>If Yes, reference relevant parts of technical design covering DR processes:</p> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#24-observability-monitoring","title":"2.4. Observability &amp; Monitoring","text":"<ol> <li>Does this solution modify logging, monitoring, or alerting strategies?  <ul> <li> Yes  </li> <li> No  </li> </ul> </li> </ol> <p>If Yes, reference relevant parts of technical design covering observability:</p> <ol> <li>Are metrics or logs being created?  <ul> <li> Yes  </li> <li> No   </li> </ul> </li> </ol> <p>If No, specify reasons:</p> <ol> <li>Are there new alerts that need to be introduced?  <ul> <li> Yes  </li> <li> No  </li> </ul> </li> </ol> <p>If Yes, reference relevant parts of technical design covering alerting strategy:</p>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Security-and-Reliability-Impact-Assessment-Template/#3-summary-of-mitigations","title":"3. Summary of Mitigations","text":"<ol> <li>The solution and architectural designs effectively mitigate necessary security and reliability concerns: <ul> <li> Yes  </li> <li> No  </li> </ul> </li> </ol>","tags":["SRIA","Default"]},{"location":"Ways-of-Working/Toolkit/Sprint-Review-Guidence/","title":"Sprint Review Guidance","text":"<p>This Sprint Review is for our colleagues to be aware of what\u2019s in flight and what\u2019s coming up, giving them the information they need to do their job and support the delivery of the functionality that we\u2019ve been working on.</p> <p>We should aim for these Sprint Reviews to be valuable to all stakeholders, including senior business stakeholders.</p>","tags":["Agile","Sprint Ceremonies"]},{"location":"Ways-of-Working/Toolkit/Sprint-Review-Guidence/#some-suggestions","title":"Some suggestions:","text":"<ul> <li>Focus on what will be interesting and valuable to our colleagues</li> <li>Inform our attendees of what\u2019s coming up in the Sprint Review and why they\u2019d be interested in attending - put on a sales pitch.</li> <li>Talk about value delivered at the feature/functionality scale and progress towards key outcomes, not BLIs completed.</li> <li>Communicate the impact on customers and users.</li> <li>Make effective use of demos, but do not demo for the sake of it \u2013 focus on functionality that our stakeholders, customers, and users might see.</li> <li>Communicate anything that colleagues need to do to help deliver this functionality, i.e. BAT expectations, QCP (Quartex Community Platform) updates, customer communications, etc.</li> <li> <p>Invite conversation with our colleagues.</p> </li> <li> <p>Save department-specific discussions for our Department Sprint Review</p> </li> <li> <p>Use Departmental Sprint review to talk about specific BLIs, challenges, tech debt, and dev experience.</p> </li> <li> <p>Prepare for and run the review as a team</p> </li> <li>Each team should announce (via the meeting chat) what they\u2019re going to talk about in advance, so that colleagues can plan to attend.</li> <li>Collaborate as a team, everyone brings their expertise to the presentation.</li> <li>Leads and PM support the presenter when there are questions, without discouraging engagement.</li> </ul>","tags":["Agile","Sprint Ceremonies"]},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/","title":"Staff Engineering","text":""},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#who-is-this-for","title":"Who is this for?","text":"<p>This document is aimed at staff engineers, as well as anyone within the organisation who may be working with staff engineers.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#overview","title":"Overview","text":"<p>Staff engineers work across all areas of the department, and across our entire technology estate. They are responsible for supporting all engineering teams, and maintaining a good working knowledge of the platforms and systems the department is responsible for. Staff engineers are also expected to work both independently and collaboratively on a range of projects to improve the departments suite of engineering tools, and more generally improve our effectiveness.</p> <p>Staff engineers will spend much of their time working in the Support Hub as part of the Engineering Support function, but should also be expected to spend significant portions of their time working with other teams.</p> <p>Staff engineers should be explicitly working within the Support Hub and participating in that team's activities and meetings, or explicitly embedded in another delivery team and temporarily be part of that team's structure and participating in it's activities. It is up to each Staff engineer to always make it clear where they are spending their time.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#types-of-work","title":"Types of work","text":"<p>A staff engineer can expect to engage in a number of different types of work, which can be broadly categorised as below.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#project-work","title":"Project work","text":"<p>This category is deliberately generic, and includes both Support Hub projects the staff engineer is contributing to, as well as individual projects they may be working on.</p> <p>Individual project work should be managed just like any other Support Hub planned work. This will improve visibility of the work and provide opportunities for other Support Hub members to collaborate on readying or implementation, though it doesn't necessarily mean that other Support Hub members are available or expected to participate!</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#research-and-investigations","title":"Research and investigations","text":"<p>This could be research or investigation into how to solve a specific problem, which would typically be done with the intention of contributing to subsequent technical design sessions with another delivery team. This might also be done to support a Product Manager where a problem has not yet been assigned to a specific delivery team.</p> <p>As above, investigations should be managed and readied like any other Support Hub planned work. In this case the increased visibility could well result in opportunities for other Support Hub members to learn about relevant topics or contribute ideas that might not otherwise get heard.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#technical-design-support","title":"Technical design support","text":"<p>A staff engineer can use their existing domain or technology expertise to help a delivery team create a technical design for some upcoming work. In most cases, participating in technical design will involve taking part in a design session; this may be anything from an hour to multiple days, depending on the scope and complexity of the work being designed.</p> <p>Even when they lack technical expertise in a relevant area, participating in technical design sessions (or being updated with the relevant outcomes) can be an effective way for staff engineers to develop and maintain their domain knowledge across areas of our technical estate they are less familiar with.</p> <p>Design sessions should appear as events in the staff engineer's calendar, which should serve to communicate their availability. However, extended design sessions should be communicated in advance with the rest of the Support Hub, to help mitigate the impact of their absence.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#delivery-team-support","title":"Delivery team support","text":"<p>A staff engineer will often spend some time embedded within a delivery team. This will often be a natural follow-up to help implement something they have helped in the design phase of. It could also be providing practical support to a team working with a particular technology or part of the domain that the staff engineer has expertise with, or it could simply be a way of providing additional software engineering resource to a team that needs it.</p> <p>Whilst working with another team, the staff engineer will use whatever mechanisms the team they are joining already uses to manage their work and record their time.</p> <p>Note</p> <p>Given that staff engineers can work across any team, delivery teams should be aware that the staff engineer joining them to provide support may not be very familiar with their ways of working. Estimation is likely to be a particular challenge, as different groups of people will develop different shared subjective scales.</p> <p>This makes it especially important for teams to document their working practices.</p>"},{"location":"Ways-of-Working/Toolkit/Staff-Engineering/#working-with-staff-engineers","title":"Working with Staff Engineers","text":"<p>This section is particularly aimed at anyone who wants to get some support from a staff engineer, including:</p> <ul> <li>Delivery teams working on particularly complex or unknown problems</li> <li>Product Managers working on a problem that hasn't yet been assigned to a delivery team</li> </ul> <p>There is currently no set process for \"booking\" an engineer's time, so start by having an open conversation with them to discuss your needs and how they might be able to support. Be mindful that staff engineers will have commitments within the Support Hub, as well as requests from teams or department members, so engage with them early! It may also be worth bringing a Delivery Manager into the conversation, as they should have a good overview of delivery plans across the department.</p>"},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/","title":"Structured Experiments","text":"<p>Experiments are used to enable continuous improvement by producing insights that can lead to incremental change. Any team or individual can conduct an experiment. As we continue to learn from our experiences, everything we do can be considered an experiment. </p> <p>Structured Experiments, are purposeful and targeted experiments, with specific purposes and defined parameters.</p> <p>Experimentation can be time consuming and costly, so it is important to ensure they are performed effectively, with minimal waste, and that the insights produced are maintained.</p>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#performing-structured-experiments","title":"Performing Structured Experiments","text":"<p>Anyone can perform a Structured Experiment. Typical scenarios include:</p> <ol> <li>A team have identified a constraint and have an idea of how to remove it</li> <li>A hit squad are working on solving an inter-team problem, and have identified a possible solution</li> <li>An individual wants to try a new approach to personal work, and wants to share their learnings</li> </ol> <p>Structured Experiments can be performed at any time, so long as those impacted by the experiment are aware and have agreed with the proposed approach, and that the experiment does not knowingly negatively impact another experiment or area of work. Be mindful of introducing WIP, and the burden of additional cognitive load.</p>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#structure","title":"Structure","text":"<p>A Structured Experiment requires the following parameters, actions, and outputs:</p>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#parameters","title":"Parameters","text":"<ul> <li>Objective: what we are looking to learn, what problem are we solving</li> <li>Hypothesis: what we are expecting to happen given specific experiment being performed, including success criteria.</li> <li>Definition: what the experiment be testing, and how the experiment will run, e.g.:<ul> <li>Who will be involved</li> <li>The mechanisms are being used</li> </ul> </li> <li>Timeframe: the start and end of the experiment</li> <li>Ownership: those who will be responsible for creating and performing this experiment, and who will be accountable for its outcomes?</li> </ul>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#actions","title":"Actions","text":"<ul> <li>Planning: Structured Experiments require planning to ensure that they are able to be successful.</li> <li>Monitoring: Structured Experiments require data to be gathered, as well as oversight to ensure that they are running effectively.</li> <li>Analysis: Data and outcomes must be analysed in order to produce insights. Analysis should include environmental influences.</li> <li>Conclusion: <ul> <li>Summarises the outcome, determining whether the hypothesis has been proven or disproven, and whether the experiment has been successful or not. </li> <li>Makes recommendations for next steps.</li> </ul> </li> <li>Knowledge Sharing: Stakeholders must be appraised of the conclusion, and this information must be made accessible for future review.</li> </ul>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#outputs","title":"Outputs","text":"<ul> <li>Documentation including:<ul> <li>All experiment parameters, which will provide a complete written summary of the experiment that has been/will be performed</li> <li>Data captured and analysis notes</li> <li>Conclusion report</li> </ul> </li> </ul>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#pollution","title":"Pollution","text":"<p>Interactions between activities may cause unintended side affects, or pollution. It is important to consider:</p> <ol> <li> <p>How will this experiment interact with other experiments.</p> <p>Running multiple experiments concurrently may make it impossible to identify which experiment caused what outcome. Consider overlapping areas of concern between experiments, and how they are timed. </p> <p>Additionally, multiple experiments can reduce focus, cause confusion, and reduce buy in.</p> </li> <li> <p>How will this experiment interact with other work.</p> <p>It is important to be aware if there is sensitive, complex, or time critical work in progress or upcoming which may negatively impact, or be impacted by, an experiment. </p> </li> </ol>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#outcomes-from-structured-experiments","title":"Outcomes from Structured Experiments","text":"<p>Successful experiments are experiments that produce useful insights in an effective way. This means that the experiment may prove or disprove a hypothesis, and still be considered successful.</p> <p>There are therefore 3 primary outcomes:</p> <ol> <li>Success, hypothesis proven</li> <li>Success, hypothesis disproven</li> <li>Failure, experiment unable to prove or disprove hypothesis</li> </ol> <p>Whichever outcome, it is important that the learnings are captured and made available for future use. As experiments are subject to the environmental conditions, it is critical that as much of the environmental context is also captured.</p> <p>It is especially important that when an experiment concludes with failure, that the reasons for failure are determined and communicated.  </p>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#ownership","title":"Ownership","text":"Owner Responsibility Experiment Team Responsible for defining parameters, performing or coordinating actions, and producing outputs. Accountable for the outcome. Participants Responsible for participating in the experiment, performing the actions and providing feedback or producing data.","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Structure-Experiments/#suggested-flow","title":"Suggested Flow","text":"<ol> <li>Scope: Set out the objective and define a hypothesis. This process may require research and iterative discussion, in order to align on the most valuable scope. Remember that a hypothesis requires success criteria. This is a sensible time to determine ownership.</li> <li>Plan: Define the solution being experimented and set out the practical parameters of the experiment: <ol> <li>who is involved? </li> <li>what is being done? </li> <li>when will it start?</li> <li>when will it finish?</li> <li>how will it be measured / how is information gathered?</li> </ol> </li> <li>Commence: Start the experiment</li> <li>Monitor: monitor the experiment to ensure it is running correctly, gather data</li> <li>Analyse: once enough data is collected, analyse it</li> <li>Conclude and Share: determine conclusions, and present findings to stakeholders</li> <li>Iterate: This experiment is now over. Is further learning needed? Are more experiments required?</li> </ol>","tags":["Default","Experiments"]},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/","title":"Team Health Checks","text":""},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#why-do-we-need-a-health-check","title":"Why do we need a health check?","text":"<p>Health checks, named appropriately, provide an insight into team health. They get the team to step back and reflect on a longer period, which highlights issues which may seem too entrenched to change. They are intentionally reductionist in their scoring so that each member is made to think more absolutely. The resulting insights provide the team's sentiment on a number of wide ranging topics that affect the health of a delivery team. This sentiment is a snapshot of the team's current health. </p> <p>Health checks become even more useful when a team has done more than one and other teams have also undergone a health check. At this point you can compare a team's scores and dig into the reasons why they feel better or worse about a topic than they previously did, or why another team feels differently than they do. This provides ideas for experiments which teams can undertake in a bid to improve that aspect of their health. Comparison of many teams can highlight a department wide issue that once made aware of, the company can then address.</p>"},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#what-is-a-health-check","title":"What is a health check?","text":"<p>A team health check is effectively a broader retrospective. The topics that are reviewed are up to theam, but it is advised that they should assess the core topics laid out by Spotify in 2014. The easiest method to capture a health check is using teamhealthcheck.io. The advised topics are:</p> <ul> <li>Easy to Release</li> <li>Suitable process</li> <li>Tech Quality</li> <li>Value</li> <li>Speed</li> <li>Mission</li> <li>Fun</li> <li>Learning</li> <li>Support</li> <li>Pawns or Players</li> </ul> <p>Participants are asked to rank each topic between overwhelmingly negative, neutral, or overwhelmingly positive with a brief description of how the negative or positive response may look that differs for each topic. For example, Pawns or Players has the response options of \"We are just pawns in a game of chess, with no influence over what we build or how we build it\", \"Mehh\", or \"We are in control of our destiny! We decide what to build and how to build it\".</p> <p>Once the results are collated for all participants, it is advised that the facilitator goes through each topic as they are ranked from worst to best and canvasses the team for qualitative feedback about why they think the team views that topic that way. Notes about the responses from the team should be taken to form the informative content the explains the team's views about the topic. When further health checks take place, these notes can then be referred to after talking about the current feedback and further feedback can be provided about why the team thinks the sentiment has changed, if it has.</p> <p>It is not important whether or not someone feels the teams views are objective. The teams views are an indicator of their health, and by addressing their greatest concerns it is expected to see a rise in their health overall. It would gravely undermine psychological safety of a team to simply suggest that they are wrong.</p>"},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#how-do-i-facilitate-a-health-check","title":"How do I facilitate a health check?","text":"<p>Participants should fill out the survey indivudally first. A common time saving tactic is to get this filled out ahead of time, so that the shared session can begin with the discussion and feedback. These answers should then be collated into an average for discussion. It is worth discussing the value that health checks can provide, in order for the team to understand why they are having the session and the value that it givesd to them. First and foremost that their concerns are heard and will be acted upon. </p> <p>The facilitator should ask open ended questions, prompting the participants to share their views on why they think the team has responded in the way that they have. It is important that all participants are actively engaged in the discussion and if someone has not conrtributed around a topic, then they should be directly asked if they have anything further to add. </p> <p>It is natural that participants will have certain topics they have stronger views about, and talk more on those than others, but if participants are largely unengaged throughout then that is an indicator that they do not see the value in the health check. The best way to help someone see the value is to deliver the value. Look to the easiest/swiftest problems that the team are facing and address them as soon as possible. The result should be a more engaged health check when it is next visited.</p>"},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#who-should-be-a-part-of-a-health-check","title":"Who should be a part of a health check?","text":"<p>Each cross functional member of the delivery team and a facilitator. Primarily, the people who have been working together on the same project daily. The facilitator may be a member of the team, or a guest that is invited to ensure all members of the team can focus on sharing their views. Based on our current shape of teams, it is expected that software engineers, test engineers, and product managers would be required to attend.</p>"},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#when-should-we-do-a-health-check","title":"When should we do a health check?","text":"<p>A team can host a health check as often, or as infrequently, as they like. It is advised that a team aims to complete a health check once a quarter though. This provides sufficient time since the previous health check to address some of the concerns, whilst not leaving it so long that the previous health check feels like a distant memory. Like all things, they should be leveraged in a way the team feels is most effective.</p>"},{"location":"Ways-of-Working/Toolkit/Team-Health-Checks/#where-can-i-find-an-example-of-a-health-check","title":"Where can I find an example of a health check?","text":"<p>The first health check in this format was carried out by Team Tyrannotitan, now Team Search, and an example can be found under their Ways of Working in the Platform Development Knowledgebase.</p>"},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/","title":"Workflow Item Definitions","text":"<p>This document outlines the way in which our workflow management item types are defined and configured.</p> <p></p>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#workflow-item-configuration-guidelines","title":"Workflow Item Configuration Guidelines","text":"<p>Workflow items will evolve over time. Keep the following guidelines in mind when making changes to how they defined:</p> <ol> <li>It is important to find the balance between simplicity and usefulness. Too much to fill in will create blockers. Err towards simplicity first.</li> <li>Fields should generally never be made mandatory, as often information is emergent during the items lifespan.</li> <li>Reports should be used to identify items that are missing required information or are misconfigured.</li> <li>\"Rules\" can be used to enforce field completion under certain conditions, but this should be done cautiously.</li> <li>Uniformity across teams is generally necessary, even though it can impede experimentation. Carefully consider the impact of deviation.</li> </ol> <p>''' Info \"Further information outstanding\"     It may be useful to include:     - what each field is for     - the reports that are run, when, and how they are used     - any rules applied to specific fields</p>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#outcomes","title":"Outcomes","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states","title":"States","text":"<ol> <li>Discovery</li> <li>Design</li> <li>Implementation</li> <li>Operation</li> </ol>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields","title":"Primary Fields","text":"<ul> <li>Outcome Summary </li> <li>Description</li> <li>Ownership: <ul> <li>Problem Owner, </li> <li>Engineering Owner, </li> <li>Product Lead, </li> <li>Delivery Owner, </li> <li>UX Lead, </li> <li>Delivery Team</li> </ul> </li> <li>Estimate</li> <li>Roadmap Item: link</li> <li>Maintenance Period (Weeks): Number </li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields","title":"Additional Fields","text":"<ul> <li>Rough Order of Magnitude: Outcome Size</li> <li>RAID: related items \u2003</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#features","title":"Features","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states_1","title":"States","text":"<ol> <li>New</li> <li>Readying</li> <li>Ready</li> <li>In Progress</li> <li>Complete</li> </ol>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_1","title":"Primary Fields","text":"<ul> <li>Description</li> <li>Key Stakeholders</li> <li>Requirements and Specifications</li> <li>Estimate</li> <li>Owners: Item Assignee is Problem Owner</li> <li>Purpose Type: <ul> <li>New development, </li> <li>Perfective, </li> <li>Corrective, </li> <li>Preventative, </li> <li>Adaptive</li> </ul> </li> <li>Outcome: Parent Item Link</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields_1","title":"Additional Fields","text":"<ul> <li>RAID: related items </li> <li>Rough Order of Magnitude: Feature Size</li> <li>Design and Implementation Plan</li> <li>Target Date: date</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#ready-criteria","title":"Ready Criteria","text":"<p>For Feature to be marked as Ready, the following fields must populated: </p> <ul> <li>Owners</li> <li>Estimate</li> <li>Requirements and Specifications</li> <li>Description</li> <li>Key Stakeholders</li> <li>Purpose Type \u2003</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#bug","title":"Bug","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states_2","title":"States","text":"<ul> <li>New</li> <li>In Refinement</li> <li>Ready</li> <li>In Progress</li> <li>Resolved</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_2","title":"Primary Fields","text":"<ul> <li>Bug Summary</li> <li>Estimate: Feature Size</li> <li>Steps to replicate </li> <li>Requirements and Specifications affected </li> <li>Requirements data</li> <li>Test Data</li> <li>Reported By</li> <li>Feature: Related Item Link</li> <li>Outcome: Parent Item Link</li> <li>Priority: integer</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields_2","title":"Additional Fields","text":"<ul> <li>Service desk ticket: Link</li> <li>Rough Order of Magnitude: Feature Size</li> <li>Root Cause</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#ready-criteria_1","title":"Ready Criteria","text":"<p>For a Bug to be marked as Ready, all Primary Fields must be populated</p>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#backlog-item","title":"Backlog Item","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states_3","title":"States","text":"<ul> <li>New</li> <li>In Refinement</li> <li>Ready</li> <li>In Progress</li> <li>Done</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_3","title":"Primary Fields:","text":"<ul> <li>Description</li> <li>Requirements and Specification summary</li> <li>Specifications: link</li> <li>Estimate either:<ul> <li>Numeric Estimate: decimal</li> <li>AND Numeric Estimate Type:  <ul> <li>Points, </li> <li>Hours, </li> <li>Days, </li> <li>Weeks</li> </ul> </li> <li>OR Size Estimate:<ul> <li>XS, </li> <li>S, </li> <li>M, </li> <li>L, </li> <li>XL </li> </ul> </li> </ul> </li> <li>Estimation Confidence: Percentage</li> <li>Engineering Owner</li> <li>Owners</li> <li>Actual Effort</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields_3","title":"Additional Fields","text":"<ul> <li>Design and Implementation Notes</li> <li>Test plan: link</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#ready-criteria_2","title":"Ready Criteria","text":"<p>Following fields must be populated for a Backlog Item to be marked as Ready: </p> <ul> <li>Owners, </li> <li>Estimate, </li> <li>Estimate Confidence, </li> <li>Specification Summary OR Specifications link, </li> <li>Description</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#done-criteria","title":"Done Criteria","text":"<p>Following fields must be populated for a Backlog Item to be marked as Done: </p> <ul> <li>Design and implementation notes</li> <li>Test Plan \u2003</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#spike","title":"Spike","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#status","title":"Status","text":"<ul> <li>New</li> <li>In Refinement</li> <li>Ready</li> <li>In Progress</li> <li>Done</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_4","title":"Primary Fields","text":"<ul> <li>Learning objective</li> <li>Estimate either:<ul> <li>Numeric Estimate: decimal</li> <li>AND Numeric Estimate Type:  <ul> <li>Points, </li> <li>Hours, </li> <li>Days, </li> <li>Weeks</li> </ul> </li> <li>OR Size Estimate:<ul> <li>XS, </li> <li>S, </li> <li>M, </li> <li>L, </li> <li>XL </li> </ul> </li> </ul> </li> <li>Estimation Confidence: Percentage</li> <li>Owners</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields_4","title":"Additional Fields","text":"<ul> <li>RAID: related items</li> <li>Approach</li> <li>Learning Outcome</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#ready-criteria_3","title":"Ready Criteria","text":"<ul> <li>Owners, </li> <li>Estimate, </li> <li>Estimate Confidence, </li> <li>Approach, </li> <li>Learning objective</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#done-criteria_1","title":"Done Criteria","text":"<ul> <li>Learning outcome populated</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#defect","title":"Defect","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states_4","title":"States","text":"<ul> <li>New </li> <li>Readying </li> <li>In Progress</li> <li>Done</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_5","title":"Primary Fields","text":"<ul> <li>Defect Summary</li> <li>Environment: Select test environment</li> <li>Steps to replicate</li> <li>Requirements and Specification affected</li> <li>Requirements and Specification delta</li> <li>Test Data</li> <li>Reported By: Assigned to</li> <li>Backlog Item: link</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#tasks","title":"Tasks","text":"","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#states_5","title":"States","text":"<ul> <li>Todo</li> <li>In Progress</li> <li>Done</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#primary-fields_6","title":"Primary Fields","text":"<ul> <li>Description</li> <li>Actual Effort: integer</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#additional-fields_5","title":"Additional Fields","text":"<ul> <li>Numeric Estimate: decimal</li> <li>Numeric Estimate Type: <ul> <li>Points</li> <li>Hours</li> <li>Days</li> <li>Weeks</li> </ul> </li> <li>Remaining: integer</li> </ul>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Workflow-Item-Definition/#done-criteria_2","title":"Done Criteria","text":"<p>Actual Effort is populated with total number of hours spent, for all individuals who performed work for this task.</p>","tags":["Workflow Management"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/","title":"Decision Logs & Records","text":"<p>Decision logs and records reduce time wasted relearning past decisions and support faster decision-making by the right people.</p> <p>Decision logs and records enable:</p> <ul> <li>A clear record of previous decisions, their reasoning, and who made them</li> <li>Clear and recorded feedback on proposed decisions (Request for Comment, or RFC)</li> <li>Rapid decision-making by the appropriate people</li> </ul> <p>There are five primary decision types:</p> <ol> <li>Discovery: Deciding on outcomes following research</li> <li>Scope: Deciding which requirements will be included in a solution</li> <li>Design: Deciding the high-level and low-level overarching solution to problems</li> <li>Architecture: Deciding the technical design of a solution</li> <li>Action: Deciding what we will do</li> </ol> <p>Not for requirements or specifications</p> <p>While scope, design, and architecture decisions may include details of solution requirements or specifications, they are not a substitute for proper requirements and specification documents.</p> <p>Decisions relating to specifications would not normally require a decision record - unless there is a meaningful design or architectural decision to be made.</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#decision-log","title":"Decision log","text":"<p>The Decision log is a list of all the past and current decisions. It presents key information and signposts to the full Decision Record documents and is accessible to all staff via the intranet.</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#decision-records","title":"Decision records","text":"<p>Decision Records are individual documents that describe a decision in full, including the context, research, alternatives, and final choice.</p> <p>Defaults:</p> <ul> <li>decision records should be saved in the decisions library, ensuring tha the document is accessible to all staff and retained for future reference. </li> <li>use the template format, and the document template provided in the decision library.</li> </ul> <p>The general guidance for all decision records is the same, however where appropriate specific guidance is available for creating records for each decision type.</p> <ul> <li>Architecture Decision Record guide</li> </ul> <p>Use appropriate tools</p> <p>Records must have the following capabilities:</p> <ul> <li> Access control: Accessible to all staff, but not to the public</li> <li> Commenting</li> <li> Change history and revision control</li> <li> Discoverable: can be found easily</li> </ul> <p>Avoid collaboration tools</p> <p>Collaborative tools are often designed for transient documentation, do not effectively track changes, and usually encourage formal structures. Avoid tools such as Microsoft Loop and Miro for documentation such as this. </p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#process-overview","title":"Process overview","text":"<p>In its most simple form, an individual or team puts forward a proposal and then the individuals with the correct authority decide if that proposal should be accepted. There are some additional nuances to how this works in practice.</p> <p>The lifecycle of a decision follows these steps:</p> <ol> <li> <p>Identify need for decision    A need for a decision is identified (e.g., a new requirement, technical challenge, or opportunity).</p> </li> <li> <p>Assign Problem Owner    A Problem Owner is assigned. This person ensures the decision progresses.</p> </li> <li> <p>Determine Decision Authority and Decision Owners    The Problem Owner determines Decision authority and identifies appropriate Decision Owners, who must make the final decision.</p> </li> <li> <p>Research and proposal development    Research is conducted, and the problem owner ensures that one or more proposals (solutions, outcomes etc.) are drafted.</p> </li> <li> <p>Create the Decision Record and log entry </p> <p>A formal Decision Record is created, capturing the essential fields </p> <ul> <li>Add the Decision to the Decision Log, ensuring it is linked to the document</li> <li>Set the status to \"Draft\"</li> </ul> </li> <li> <p>Request for comment (Optional) </p> <p>If feedback is needed on the proposed solutions, the status is changed to \"RFC Open\"</p> <ul> <li>Stakeholders are notified by the Problem Owner</li> <li>Feedback is provided via comment directly on the decision record</li> <li>The Decision Record is refined based on input</li> <li>Process is repeated until problem owner is comfortable with proposal</li> </ul> </li> <li> <p>Request for approval</p> <ul> <li>Once the problem owner is ready, the status changes to \"Request for Approval\"</li> <li>The Decision Owners are then notified by the Problem Owner</li> </ul> </li> <li> <p>Finalise decision     The Decision Owners finalise the decision. </p> <ul> <li>The Resolved Date is recorded, and status is updated to Approved or Rejected.</li> <li>The Problem Owner is then notified by the Decision Owners </li> </ul> </li> </ol> <p>Decisions library automations</p> <p>Decision records added to the Decisions library in SharePoint will automatically be added to the decision log and remain in sync. Changes to the record will be reflected in the log and vice-versa. </p> Flow diagram <pre><code>flowchart TD\n   A(Identify need for decision) --&gt; B(Assign Problem Owner)\n   B --&gt; C(Determine Decision Authority and Decision Owners)\n   C --&gt; D(Research and proposal development)\n   D --&gt; E(Create Decision Record and log entry&lt;br&gt;&lt;b&gt;Status:Draft&lt;b&gt;)\n   E --&gt; F{Request&lt;br&gt;for Comment?}\n\n   F -- Yes --&gt; G(Request for Comment process&lt;br&gt;&lt;b&gt;Status:RFC Open&lt;b&gt;)\n   G --&gt; H(Request for approval&lt;br&gt;&lt;b&gt;Status:Request for Approval&lt;b&gt;)\n\n   F -- No --&gt; H\n\n   H --&gt; I(Finalise decision&lt;br&gt;&lt;b&gt;Status:Approved or Rejected&lt;b&gt;)</code></pre>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#decision-log-fields","title":"Decision log fields","text":"<p>The following fields are stored in the decision log. Decision records created in the decisions library will also have these fields as metadata.</p> Field Description Title A short, clear title for the decision. Summary Brief description of the context, the problem, or the decision purpose. Created Date Date and time the Decision Record was first created. Resolved Date Date and time when the decision was finalised (approved or rejected). Status Current status of the decision: Draft, RFC Open, Pending Approval, Approved, Rejected. Problem Owner Person or group responsible for progressing the decision including coordinating the proposals. Link Hyperlink to the full Decision Record document. Impact Importance or consequences of the decision Minor, Moderate, Major Decision Type Categorization: Discovery, Scope, Design, Architecture, or Action. Decision Authority The organisational level at the authority to decide resides (e.g., Team, Department, Executive). Decision Owner Person or group responsible for approving the final decision. Project/Objective (Optional) Associated project or business objective (linked lookup field). <p>RFC stakeholders</p> <p>Key stakeholders required to provide feedback to an RFC are not recorded on the decision log. This is because this group may evolve and adapt quite quickly (e.g. one stakeholder may share the document with another). Their comments will however be recorded on the decision record document.</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#decision-authority","title":"Decision authority","text":"<p>The decision authority describes who has the authority to make the decision.</p> <p>In many cases, decisions can be owned and decided by the same individual or team. It is still necessary to record the decision for posterity, and to gather and record feedback via the Request for Comments process.</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#devolved","title":"Devolved","text":"<p>Individual or team ownership. This is used then those proposing the solution are entirely able to select the solution themselves. </p> <p>This is most well suited to operational decisions, or immediate impact tactical decisions. For example, backlog items and features, lower level UX design or architecture (e.g. component level).</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#departmental","title":"Departmental","text":"<p>Owned by a leadership community within the Technology Department.</p> <p>The leadership community may vary depending on the decision. Examples include the divisional management team (DMT), the engineering leadership community, the DevOps team, Product Management team. </p> <p>This is most well suited to tactical decisions with inter-team or medium term impact. For example, complex features and outcomes, higher level architecture (e.g, system context or container).</p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#organisational","title":"Organisational","text":"<p>Requires cross-department agreement, or executive team sponsorship. This is most well suited to strategic decisions with inter-departmental or long-term impact.</p> <p>Tip</p> <p>Break issues down into small decisions to prevent decisions that could be devolved being swept up in more complex strategic issues. </p>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#request-for-comments-process","title":"Request for Comments process","text":"<p>The Request for Comments process is a tool to enable devolved decision making. </p> <p>The primary goal is to ensure that key stakeholders are consulted or informed, while the individuals who are closest to the work put forwards the proposal, and even make the decision.</p> <p>Benefits</p> <ul> <li>Helps prevent knowledge silos - new initiatives are made public</li> <li>Collates expertise and diverse perspectives - everyone gets to have an input</li> <li>Record of though process retained - allowing deeper insights into past decisions</li> <li>Buy-in and trust building - everyone has had a chance to contribute towards the proposed solution, making alignment easier</li> <li>Reduces repeated mistakes - catching problems early</li> <li>Quicker than meetings and emails - a structured process should reduce waste</li> </ul>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/#rfc-process-summary","title":"RFC Process summary","text":"<p>When a decision record's status is set as Request for Comment, the decision record should clearly outline the problem being solved, the context of the decision (why we need a decision), and the proposal(s). </p> <p>More than one option can be put forward, but ultimately one proposal will need to be selected before the decision record can move on to request for approval. Equally, it is encouraged that the problem owner put forward options that are not being proposed, but have been considered.</p> <ol> <li>Stakeholders are notified by the Problem Owner</li> <li>Feedback is provided via comment directly on the decision record</li> <li>The Decision Record is refined based on feedback</li> <li>Process is repeated until problem owner is comfortable with proposal</li> </ol>","tags":["Design","Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/","title":"Architectural Decision Record","text":"<p>An Architectural Decision Record (ADR) captures a significant decision that impacts the structure, qualities, or core technical direction of a system. ADRs typically document choices around technologies, patterns, integration methods, scaling strategies, security postures, and data flows that are not easily reversed and have long-term implications.</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#when-to-create-an-adr","title":"When to create an ADR","text":"<p>Create an ADR either:</p> <ol> <li>The decision has a significant and lasting impact on overall system architecture<ul> <li>You are introducing or changing a foundational aspect of a system\u2019s architecture. Even if you are changing it to use a default pattern.</li> <li>A decision materially impacts scalability, maintainability, security, or interoperability.</li> <li>You're choosing between frameworks, languages, cloud services, or deployment models.</li> <li>A decision introduces long-term commitments (e.g., event-driven architecture, microservices, serverless).</li> </ul> </li> <li>A Request for Comments is needed</li> </ol>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#ownership-and-decision-authority","title":"Ownership and decision authority","text":"","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#problem-ownership","title":"Problem Ownership","text":"<p>Typically the problem owner for an ADR would be an Engineering Lead or Engineering Owner for the project or objective</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#decision-owners-decision-authority","title":"Decision Owners &amp; decision authority","text":"<p>Problems owners must make a balanced decision to determine decision owner and decision authority, but should seek guidance from the Head of Engineering. </p> <p>Tips</p> <ul> <li>Use existing escalation routes: If a decision has implications beyond your domain, consult higher-level leadership early</li> <li>Look for ownership and domain expertise: e.g.<ul> <li>Security \u2192 consult the Executive Director of Technology</li> <li>Networking or cloud infrastructure \u2192 consult the DevOps team</li> </ul> </li> <li>Don\u2019t over-escalate: Avoid pushing decisions too far up the hierarchy if they can be devolved. Over-escalation slows delivery and prevents autonomy.</li> <li>Use shared ownership: If a decision spans multiple domains (e.g., both application and infrastructure), indicate joint ownership or co-sign-off from both authorities.</li> </ul> <p>As a principle, match the impact to the level of authority.</p>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#impact-is-minor-or-moderate","title":"Impact is minor or moderate","text":"<p>Affects this team and immediate work or is architectural component level.</p> <ul> <li>Authority: Devolved</li> <li>Decision Owner: Same as problem owner</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#impact-is-moderate","title":"Impact is moderate","text":"<p>Affects multiple teams immediate or upcoming work, or is architectural container level. </p> <ul> <li>Authority: Department (Engineering leadership)</li> <li>Decision Owner: Head of Engineering or multiple Lead Engineers</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#impact-is-major","title":"Impact is major:","text":"<p>Affects medium or long term work or technology strategy, is architectural system context level.</p> <ul> <li>Authority: Department (DMT) or Organisational </li> <li>Decision Owner: Head of Engineering and/or Executive Director of Technology</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Architectural-Decision-Records/#tips-to-writing-an-adr","title":"Tips to writing an ADR","text":"<ul> <li>Use diagrams, but sparingly. Ensure they help to improve clarity.</li> <li>Use plain language \u2014 remember future readers may not have the same context.</li> <li>Keep ADRs small and focused. Multiple decoupled decisions = multiple ADRs.</li> <li>Include links to supporting evidence (e.g., spike results, benchmarks, risk logs).</li> <li>The use of generate AI can be problematic. The problem owner must maintain a complete understanding of their proposal.</li> <li>Start simple and add more detail further down. Allow the reader to get the most important information fast, and choose if they want to read more.</li> </ul>","tags":["Architectural Design"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/","title":"Decision Record Template","text":"<p>This template is the default structure to be used for decision records.</p> <p>In addition to this, the record must clearly show the current state, problem owner, and decision owner properties.</p>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#title","title":"Title","text":"<p>A short description of the decision to be made.</p>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#context","title":"Context","text":"<p>What situation or need triggered the decision?</p> <p>Keep this to a brief paragraph that can be used as a summary in the decision log. Describe:</p> <ul> <li>The business or technical problem</li> <li>Relevant constraints, projects, objectives, outcomes </li> <li>Any urgency or timing considerations</li> </ul>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#proposal","title":"Proposal","text":"<p>This is the outcome of the research process. The decision being made is whether to accept this proposal.</p> <ul> <li>State the proposed decision concisely.</li> <li>Ensure you clearly explain why this proposal has been made (over alternatives)</li> <li>Ensure it is clear and actionable.</li> <li>Use declarative language \"We will do x\" rather than \"we could do x\"</li> </ul> <p>Request for Comments</p> <p>When submitting RFCs, you may propose multiple options in order to gain feedback, and ideally clarify your preference (and why).</p>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#considerations","title":"Considerations","text":"<p>What is the impact of this proposal?</p> <ul> <li>Describe the benefits and drawbacks / pros and cons</li> <li>Ensure that the positives and negatives conveyed clearly and to mitigate biases</li> </ul>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#alternatives","title":"Alternatives","text":"<p>List the main options considered and why they weren\u2019t chosen. For each alternative, include:</p> <ul> <li>Each alternative's pros/cons</li> <li>Why it was rejected</li> </ul>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Decision-Records/Decision-Record-Template/#decision-conclusion","title":"Decision conclusion","text":"<p>[Once a decision has been made, briefly summarise the decision and any deciding factors. Ensure that the Resolved Date and status are updated.]</p>","tags":["Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/","title":"Code Peer Reviewing","text":"","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/#overview","title":"Overview","text":"<p>The purpose of a peer review is to identify mistakes as early as possible and ensure that the way a solution is implemented is:</p> <ol> <li>Understood by more than one member of the team - creating a shared understanding of our platform</li> <li>Inline with our quality standards</li> </ol> <p>Peer reviewing must not be left until last minute, or performed as a one-time event. Instead, we should be working closely with our colleagues to share our approach throughout the development cycle. This allows for early feedback around the way a solution is built, and allows for the reviewer to gain a greater degree of context.</p> <p>The final stage of peer reviewing is when code is merged into a parent branch (e.g. Work Branch --&gt; main). This process allows for in depth reviewing of the full solution.</p>","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/#pair-programming-wip-reviewing","title":"Pair Programming &amp; WIP Reviewing","text":"<p>Think about potential review points as a team during sprint planning! Creating discrete review tasks will help track progress and remind the team of the need to review.</p> <p>Pair programming, screen share walk throughs, or simply reviewing a work branch are some ways to perform peer reviews of WIP.</p> <p>Any member of the team can perform a peer review for anyone else, not just a more senior member!</p>","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/#providing-feedback-for-wip","title":"Providing Feedback for WIP","text":"<p>Feedback should be given directly to the original engineer by the reviewer. The reviewer should feel free to ask questions and provide their honest perspective. It is wise to support feedback with rationale;</p> <ul> <li>in what way could the solution be improved?</li> <li>how will these improvements help us improve quality?</li> </ul> <p>The original engineer is not obliged to act upon all feedback, but an open discussion will be very beneficial.</p>","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/#reviews-whilst-pair-programming","title":"Reviews whilst pair programming","text":"<p>A review should still be performed for any code written during a pair programming session. However, it may be helpful for the two engineers to perform the review together at the end of the pairing session. E.g. the engineer that has been screen sharing/writing the code should check everything in, and then the other engineer lead the review. However both engineers would be encouraged to discuss whether or not the code they have written together fulfils the guidelines.=</p>","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/#submitting-code-for-a-review","title":"Submitting code for a review","text":"<p>It is best to submit code to be reviewed frequently, both to get early feedback and to ensure that the reviewing engineer can get a good picture of the changes without being overwhelmed by a huge amount of changes all at once. In other words, follow the principle of little and often!</p> <p>When submitting a PR the engineer should follow the Pull Request Guidelines, and should ensure to provide some context of what the code being reviewed is try to achieve and how it is structured.</p> <p>If refactoring existing code (in preparation for subsequent changes), the refactoring should be performed separately and submitted for review in isolation. It would otherwise be much harder for the reviewing engineer to understand how the refactoring has been done if there are also additional changes and new functionality mixed in.</p>","tags":["Implementation Peer Review","Default"]},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Performing-a-Peer-Review/","title":"Performing a Peer Review","text":"<p>The engineer performing the review must:</p> <ul> <li>Copy and paste the template checklist (below) into their a new comment on the PR in GitHub</li> <li>Start reviewing the changes with respect to the Quality Standards</li> <li>When the reviewer is happy that a particular guideline has been met, the relevant item in the checklist is checked</li> <li>If any guidelines are not met, the reviewer should add a comment (either a general comment, or next to the offending portion of code) to explain why</li> </ul> <p>When the reviewer has finished reviewing the code, they must submit the review via GitHub:</p> <ul> <li>If all the guidelines have all been met, they should tick the Approve option</li> <li>Otherwise, they should tick the Request Changes option</li> </ul> <p>Engineers are also encouraged to provide positive feedback. If code being submitted for review is well*structured and meets all guidelines, then this should be celebrated.</p>"},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Performing-a-Peer-Review/#checklist-template","title":"Checklist Template","text":"<ul> <li> Code implements the backlog item</li> <li> Code is readable and well*structured</li> <li> Code adheres to SOLID design principles</li> <li> Code is not duplicated, or is moved into shared packages where relevant</li> <li> Endpoint paths are restful and follow guidelines</li> <li> Avoid hardcoded variables * all behaviour should be configurable via configuration settings</li> <li> Code has good logging throughout</li> <li> Code is well unit*tested</li> <li> Minimum coverage level of approx 80% is maintained</li> <li> Code coverage has been increased where it is not already at approx 80%</li> <li> New UI elements are Accessible</li> <li> Code follows Security best*practices</li> <li> Code follows Performance best*practices</li> <li> Documentation has been created or updated</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Release-Plan-Review/","title":"Release Plan Review","text":""},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Release-Plan-Review/#why-do-we-have-release-plans","title":"Why do we have Release Plans?","text":"<p>For any platforms without a fully automated release process, delivery teams are required to create a Release Plan and make sure care and consideration is taken in reducing downtime and releasing the BLI as safely as possible.</p>"},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Release-Plan-Review/#who-can-approve-a-release","title":"Who can approve a release?","text":"<p>All Senior Software Engineers and Tech Leads can approve Release Plans.</p> <p>Warning</p> <p>A reviewer cannot sign-off a Release Plan they've had a hand in writing. </p>"},{"location":"Ways-of-Working/Toolkit/Peer-Reviewing/Release-Plan-Review/#what-does-a-review-entail","title":"What does a review entail?","text":"<p>The following is a checklist an engineer should use when performing a Release Plan review. </p> <ul> <li>Are all sections filled in?</li> <li>Do links to external resources <ul> <li>Go somewhere?</li> <li>Go to the correct place?</li> </ul> </li> <li>Understand the complexity of the release.</li> <li>Given the evident complexity?<ul> <li>Are there risks that have not been identified?</li> <li>Have identified risks been mitigated sufficiently for the given probability and impact?</li> <li>Are release steps (and rollback steps) detailed enough?</li> <li>If multiple components are to be released, do they need to be deployed (and rolled back) in any particular order?   </li> <li>Is there sufficient Smoke Testing? </li> </ul> </li> <li>If there is low automated e2e test coverage for a given scenario, would a greater level of smoke testing be required?</li> <li>Is there an agreed communication plan?<ul> <li>Have timelines been clearly and explicitly shared?</li> <li>Are identified risks and mitigations being communicated appropriately?</li> </ul> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/","title":"Who is this for?","text":"<p>Outlines the standards to which Software Engineers and Test Engineers must adhere when writing code.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#overview","title":"Overview","text":"<p>Quality means more than simply the way code is structured! Great quality solutions cover many facets, including:</p> <ul> <li>Readability &amp; Maintainability</li> <li>Security &amp; Compliance</li> <li>Robustness &amp; Performance</li> <li>Architectural integrity</li> <li>Cost &amp; environmentally friendly</li> </ul> <p>This is why it is important to share our approach to solutions early! Peer reviews should be looking to improve any/all of these areas, and it may often be too late by the time you have working code ready to merge.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#guiding-principles","title":"Guiding Principles","text":"<ul> <li>Code must be easy to read and understand</li> <li>C# Code must follow OO patterns and SOLID principles</li> <li>Coding and naming conventions must be followed</li> <li>Unit and integrations test coverage must be maintained or improved</li> <li>Event logging must be used to provide useful diagnostic information</li> <li>Code must be self describing, and must not rely on code commenting to demystify chaos</li> <li>Code must be well documented, and must use code commenting and READMEs to enable rapid discovery</li> <li>User interfaces must be accessible and conform to WCAG AA</li> <li>Code must be secure and follow industry recommended practices</li> <li>Code must be performant, and able to handle live-like datasets and load</li> <li>Code should be green</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#guidelines-for-high-quality-code","title":"Guidelines for high-quality code","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#readable-and-maintainable","title":"Readable and Maintainable","text":"<p>First and foremost, high-quality code must be easy to read and understand. Code must also follow our in-house coding conventions. The names of methods and classes etc. must clearly indicate what they do, and methods and classes must not be too lengthy.</p> <p>Code must also follow the SOLID principles, which will help to make it better structured, more readable and keep methods and classes manageable sizes.</p> <p>When creating new endpoints on microservices, ensure that they follow the endpoint naming conventions.</p> <p>Making code more maintainable is effectively the practice of minimising the amount of times you have to update it. Avoid using hardcoded values in code, as these values can only be changed by changing the code. Instead, consider making the behaviour of the code configurable by offloading these values to configuration.</p> <p>Similarly, do not repeat yourself (DRY)! Avoid copy/pasting code; instead consider how and where to share it. For smaller snippets of re-usable code, consider putting it in a helper class or extension method. Also consider the scope of any shared code; is it specific to the current repository, or is it more general code that might benefit from living in a shared code library for re-use across other repositories too? Following the Single Responsibility Principle (one of the SOLID principles, see above) should help with this.</p> <p>Do not commit commented-out code. It makes code less readable, and also causes confusion. When commented-out code is committed to a repository, it is not clear whether it should simply be deleted, or the code needs to be adapted and integrated, i.e. is it a cryptic TODO?</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#unit-integration-tests","title":"Unit &amp; Integration Tests","text":"<p>Code must be well covered by unit &amp; integration tests. Unit &amp; integration testing not only increases our chances of catching bugs, increases engineer confidence in any changes being made, but is also an indication that the code is well-structured.</p> <p>To meet quality guidelines, all .NET code must be covered by Unit and/or integration tests with the aim of achieving 80% code coverage. For legacy repositories that do not meet this threshold, the aim should be to increase the coverage coverage percentage when writing new code, so as to incrementally meet the desired threshold. For repositories that are already well-tested, all new code must be sufficiently well tested so as to not bring the average coverage down.</p> <p>NOTE: code coverage is not a perfect metric. It is entirely possible to write poor tests that achieve an arbitrary coverage without providing any of the real benefits.</p> <p>Code repositories must measure and report on code coverage metrics as part of Continuous Integration. If not already present, add the code coverage testing tools to the repository being worked on. As engineers write tests for a repository, they must ensure the <code>tests.yml</code> file is updated with the latest coverage level.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#observability-logging","title":"Observability &amp; Logging","text":"<p>Building observable systems enables development engineers to measure how well the application is behaving. Observability serves the following goals:</p> <ul> <li>Provide holistic view of the application health.</li> <li>Help measure business performance for the customer.</li> <li>Measure operational performance of the system.</li> <li>Identify and diagnose failures to get to the problem fast.</li> </ul> <p>A critical part of this is ensuring that services are logging useful events and errors. Log messages need to contain enough information to help an engineer understand what was happening, including for example Website Key or Client Key, ID of an asset or document affected, action being performed etc.</p> <p>See more information about logging in Quartex, and further reading on general best practices for logging.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#documentation","title":"Documentation","text":"<p>Every software development project requires documentation. Agile Software Development values working software over comprehensive documentation. However, repositories must include the key information needed to understand the development and the use of the generated software. Good documentation should work towards these goals:</p> <ul> <li>Facilitate the onboarding of new team members</li> <li>Improve communication and collaboration between teams</li> <li>Enable other engineers to successfully work with the software</li> </ul> <p>Every repository must have a README, which should succinctly explain:</p> <ul> <li>The purpose of the repository<ul> <li>For a service, this boils down to \"what is the service responsible for?\"</li> <li>Otherwise explain the use-cases for using or modifying the repository</li> </ul> </li> <li>Any external dependencies that are not automatically imported</li> <li>Additional steps required to build or debug the code</li> <li>Any processes that are unique to this repository</li> </ul> <p>Documentation must never include any passwords or other sensitive configuration. These should be stored and documented in a secure manner, such as in a Password Manager (TODO - setup password management for division) or in a Secrets Manager.</p> <p>Any hacks or shortcuts or TODOs must be documented, as these all represent the addition of different types of technical debt. Engineers must be mindful of any technical debt being committed, and must have a plan to resolve it. This might include creating a backlog item to address the technical debt, with a plan to bring it into a subsequent sprint.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#accessibility","title":"Accessibility","text":"<p>Any new UI elements must be made accessible, and conform to WCAG AA. This includes making the UI usable via Screen Reader, including adding <code>aria</code> tags where relevant. The UI must also be usable with the keyboard.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#secure-code","title":"Secure Code","text":"<p>Engineers must ensure that code adheres to industry-recommended standard practices for secure design and implementation of code. For practical purposes, engineers must be familiar with the OWASP top 10 vulnerabilities. The OWASP secure coding practices guide is also a useful reference.</p> <p>Ensuring software is secure relies not just on the software being written, but also the Frameworks and Libraries it depends on; which makes keeping these updated is important. Secure software also needs to be run on infrastructure, which must itself be up-to-date and configured securely.</p> <p>When writing and committing code, engineers must ensure they are never commit secrets (i.e database passwords, access keys or other sensitive config) into source control or documentation.</p> <p>New endpoints and pages must have the correct authentication and authorisation checks in place.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#package-dependency-management","title":"Package Dependency Management","text":"<p>When including packages/dependencies (internal or external) developers must not use a floating package version, e.g. : - Do:   - Node.js: <code>\"dependencies\": { \"ExamplePackage\": \"2.0.1\" }</code>   - C#: <code>&lt;PackageReference Include=\"ExamplePackage\" version=\"2.0.1\" /&gt;</code> - Don't:    - Node.js: <code>\"dependencies\": { \"ExamplePackage\": \"^2.0.1\" }</code>   - C#: <code>&lt;PackageReference Include=\"ExamplePackage\" version=\"2.0.*\" /&gt;</code></p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#performant-code","title":"Performant Code","text":"<p>Engineers must ensure the code they write is performant. This refers both to ensuring individual actions and pages are loaded within an acceptable timeframe, and ensuring that functionality does not degrade with large datasets. In particular it is important to perform testing with live-like datasets to ensure the software will behave as expected.</p> <p>NOTE: specific non-functional requirements for acceptable performance will be defined at a later date.</p> <p>The Microsoft article on .NET Core performance best practices is very helpful.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#general-performance-tips","title":"General performance tips","text":"<p>Use caching where ever it is possible and appropriate. </p> <p>The fastest way of doing work is to not have to do the work at all! </p> <p>Use <code>async</code>/<code>await</code> calls wherever possible. The async pattern allows the operatic system to assign idle CPU capacity to a thread that has work to do, instead of keeping the thread busy. Whilst it may be difficult to see much of a difference when developing locally, using <code>async</code>/<code>await</code> allows a webserver to handle many more requests in parallel.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/#entity-framework-tips","title":"Entity Framework tips","text":"<p>When retrieving data from databases, use <code>.Include()</code> calls only where strictly necessary. Whilst it might be quite convenient, it is likely that with a large dataset, the increased amount of data returned will have a performance impact which may not be apparent when developing locally. This simply further re-enforces the need to test with live-like datasets.</p> <p>Avoid using queries that Entity Framework will not be able to convert to SQL. A common mistake is to use <code>.ToLowerInvariant()</code> in a <code>.Where()</code> clause to perform a case-insensitive search. In these scenarios, Entity Framework will translate as much as possible into SQL, but then retrieve the rest of the data set and perform the rest of the query in memory - potentially resulting in a huge dataset being retrieved from the database.</p> <p>E.g. consider the following fictitious query which retrieves an asset that matches a given path, where deleted is false.</p> <pre><code>var children = _unitOfWork.Assets.Where(a =&gt; a.Deleted == false &amp;&amp; a.Path.ToLowerInvariant() == pathToSearchFor);\n</code></pre> <p>In this example, since EF is unable to translate <code>.ToLowerInvariant()</code> into SQL, it will effectively run a query like <code>select * from Assets where Deleted=0</code> and then run the <code>Path.ToLowerInvariant() == pathToSearchFor</code> comparison in memory, on every single returned row. For a very large database, this sort of subtlety can be cripplingly slow!</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/","title":"Coding Conventions","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#c-coding-conventions","title":"C# Coding Conventions","text":"<p>Our coding standards use the Microsoft C# conventions. All engineers must use and be familiar with them.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#additional-in-house-conventions","title":"Additional in-house conventions","text":"<p>Controllers (and other code entry points like Background Tasks and Message Queue Message Handlers which are similar to controllers) should be kept as lean as possible. Each controller should dependency inject a Service that is responsible for business logic. - The controller should do some basic input validation (returning an appropriate error code if validation fails) and then call the service to perform the bulk of the work. - The main service can then inject as many other classes as it needs to perform its function.</p> <p>Smaller repeated snippets of code should be refactored out and made re-usable, using one of the following approaches: - Simpler pieces of code can be grouped into static methods within a <code>SomethingHelper</code> class - Extension methods should generally be grouped together based on the class they extend, and be called <code>MyClassExtensions</code> - Consider whether any refactored code could be useful moved into a shared package for re-use in other repositories</p> <p>For constructing a small string, use String Interpolation (i.e. <code>string formatted = $\"My variable is {variable}\"</code>) rather than <code>string.Format()</code>. However if you need to log the value of a string, remember to use Serilog logging properties.</p> <p>For constructing a larger string e.g. within a loop, use <code>StringBuilder</code> instead of concatenating many strings together.</p> <p>Unit and Integration tests should make use Shouldly instead of <code>Assert.That</code> to make assertions more readable.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#typescript-and-javascript-coding-conventions","title":"TypeScript and JavaScript Coding Conventions","text":"<p>AM follows a code style for TypeScript and JavaScript that is based on Airbnb's JavaScript Style Guide and React/JSX Style Guide.</p> <p>This is enforced in codebases through the use of a .prettierrc file and a .eslintrc.json files. These files are maintained within the am-frontend-code-style repository. They are bundled as npm packages that can be installed and then configured to be used. Instructions on installing and using these packages can be found in the repository's readme.</p> <p>It is recommended that you configure your IDE to automatically format and fix issues in your code using the Prettier and ESLint configuration.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#vs-code-settings","title":"VS Code Settings","text":"<p>To configure VS Code to automatically format and fix the code, ensure the following settings are set in your settings JSON file.</p> <pre><code>\"editor.formatOnSave\": true,\n\"editor.codeActionsOnSave\": {\n  \"source.fixAll.eslint\": true,\n  \"source.fixAll\": true\n},\n\"eslint.validate\": [\"javascript\", \"javascriptreact\", \"astro\", \"typescript\", \"typescriptreact\"],\n</code></pre>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#terraform-standards","title":"Terraform Standards","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#general-style-guide","title":"General Style Guide","text":"<p>Terraform files should obey the syntax rules for the HashiCorp Configuration Language (HCL) and the general formatting guidelines provided by the Terraform Project through the <code>fmt</code> command.</p> <p>In addition, Adam Matthew Digital follows the following standards when writing Terraform:</p> <ul> <li>Use Snake Case for all resource names</li> <li>Use descriptive and non environment specific names to identify resources</li> <li>Declare all variables in <code>variables.tf</code>, including a description and type</li> <li>Specify sensible defaults in <code>variables.tf</code> where appropriate, rather than forcing every variable to be explicitly defined in <code>.tfvars</code> files</li> <li>Prefer using variables with defaults over hard-coding values in resources</li> <li>Declare all outputs in <code>outputs.tf</code>, including a description</li> <li>Pin all modules and providers to a specific version or tag</li> <li>Always use relative paths and the file() helper when needing to work with external files</li> <li>Prefer seperate resources over inline blocks (e.g. <code>aws_security_group_rule</code> over <code>aws_security_group</code>)</li> <li>Always define the AWS region as a variable when building modules</li> <li>Always use workspace variables in an <code>envs</code> folder, <code>{component}/envs/{workspace}.tfvars</code></li> <li>Always use <code>maps</code> over <code>sets</code> or <code>lists</code> when the variable is used for iterations such as <code>for_each</code> loops <ul> <li>Managing resources via indexes has horrible ramifications when the data structure is changed and can cause resources to be re-created/deleted unnecessarily as Terraform can quite easily loose track of what index is mapped to what resource</li> </ul> </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#running-terraform","title":"Running terraform","text":"<ul> <li>All changes should be made through CI/CD tooling, and Terraform should not be run locally - especially <code>terraform apply</code></li> <li>Terraform versions and provider versions should be pinned, as it's not possible to safely downgrade a state file once it has been used with a newer version of Terraform</li> <li>Use S3 (standard region) with DynamoDB locking, with versioning and server-side encryption in S3<ul> <li>Standard bucket name: <code>amdigital-co-uk-infrastructure-state</code></li> <li>State key: <code>{component}.tfstate</code></li> <li>KMS Key Id: <code>alias/terraform_bucket_key</code></li> <li>DynamoDB Table: <code>terraform-state</code></li> </ul> </li> <li>Always use the <code>workspace_key_prefix</code> set to <code>env</code></li> <li>Always format the terraform files before requesting a PR (<code>terraform fmt -recursive</code>)</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#using-shared-resources","title":"Using Shared Resources","text":"<p>In Terraform there are two ways to use shared resources: Data Sources, and Importing.</p> <p>Ideally we would never really use Importing as a method of re-using existing architecture, but it becomes necessary when the resource we wish to use is not managed by any Terraform State. Even then more times than not there is likely a Data Source from the infrastructure provider (<code>AWS</code>, <code>Azure</code> etc), that enables the ability to lookup the resource and access its information.</p> <p>Importing should only be used when we need to modify and now track an existing resource, that is not already being managed by Terraform in some capacity.</p> <p>With Data Sources we have the data source resource blocks provided by the providers, as well as the ability to load in output variables from other remote states using the terraform_remote_state data source block.</p> <p>In the scenario that there is a resource (such as a <code>vpc</code>) that needs re-using across multiple terraform projects, the shared resource should be created and managed seperately in its own project/component, and then the other projects/components should either use the <code>terraform_remote_state</code> to access the information (such as <code>id</code>, or <code>subnets</code> etc.) where needed or use a data source from the provider to lookup the resource (if possible) and gain access to its information that way.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#writing-and-organizing-terraform-with-modules","title":"Writing and organizing Terraform with modules","text":"<p>A common recommendation in the Terraform community is to think of modules as functions that take an input and provide an output. Modules can be used to create lightweight abstractions, so that you can describe the infrastructure in terms of its architecture, rather than directly in terms of physical objects. </p> <p>Modules can be built in shareable repositories, or locally within a component repository. If you find yourself writing the same set of resources or functionality over and over again, consider building a module instead.</p> <p>When to consider writing a module:</p> <ul> <li>When multiple resources should always be used together (e.g. a CloudWatch Alarm and EC2 instance)</li> <li>When module re-use is shallow (preferably don't nest modules)</li> <li>Over using modules can make the Terraform configuration harder to understand and maintain so it is recommended to use modules in moderation</li> <li>When you cannot find a module on the Terraform Registry for the functionality you need</li> </ul> <p>It is not recommended by Hashicorp to write modules that are just thin wrappers around single other resource types. If you have trouble finding a name for your module that isn't the same as the main resource type inside it, that may be a sign that your module is not creating any new abstraction and so the module is a adding unnecessary complexity. Just use the resource type directly in the calling module instead.</p> <p>For more information around modules and how to structure them take a look at the Official Hashicorp documentation.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Coding-Conventions/#module-standards","title":"Module Standards","text":"<p>When creating a module, any contributions should follow these guidelines.</p> <ul> <li>Use semantic versioning for shared code and modules</li> <li>Always point to Github releases (over a binary or master) when referencing external modules</li> <li>Always extend, don't re-create resources manually</li> <li>Modules should be built using the standard files: <code>main.tf</code>, <code>variables.tf</code>, <code>output.tf</code>, <code>versions.tf</code></li> <li>Readme files should contain a description of the module as well as documentation of variables. </li> <li>Use terraform-docs for auto-generation of markdown for:<ul> <li>The requirements of the module</li> <li>What providers are used</li> <li>Any modules that are used within the module itself</li> <li>The resources that are generated by the module</li> <li>Inputs for the module (including description and default values)</li> <li>Any outputs produced and exported by the module</li> </ul> </li> <li>Use Github's .gitignore contents for Terraform</li> <li>Take a map of common tags as an input which should be applied to all resource blocks that support <code>tags</code></li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Endpoint-Naming-Conventions/","title":"Endpoint Naming Conventions","text":"<p>The following guidelines are adapted from the REST API Tutorial.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Endpoint-Naming-Conventions/#endpoint-path-conventions","title":"Endpoint path conventions","text":"<p>All our microservice endpoints should start with a version (e.g. <code>v1</code>,  <code>v2</code> etc.), which will have different uses depending on the context. Most microservice endpoints will also relate directly either to a specific Client or specific Website; although some microservices don't require this (e.g. the File Validation service):</p> <ul> <li><code>/{version}/{ClientKey}/rest/of/url</code> - Version and ClientKey</li> <li><code>/{version}/{WebsiteKey}/rest/of/url</code> - Version and WebsiteKey</li> <li><code>/{version}/rest/of/url</code> - Version only</li> </ul> <p>Requests paths should use plural nouns, and indicate the hierarchy of the objects that they represent as much as possible. It can be helpful to think of every endpoint path as representing a specific object (or a specific set of objects).</p> <ul> <li><code>/{version}/{client}/jobs</code> - Get all Jobs</li> <li><code>/{version}/{client}/jobs/{JobId}</code> - Get details for a single Job</li> <li><code>/{version}/{client}/jobs/{JobId}/items</code> - Get all the Items for a single Job</li> <li><code>/{version}/{client}/jobs/{JobId}/items/{ItemId}</code> - Get details for a single Item within a given Job</li> </ul> <p>NOTE: avoid using verbs in endpoint paths wherever possible. E.g. don't use <code>getasset/{assetId}</code> because the get is already in the HTTP verb. This leads nicely onto the following section...</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Endpoint-Naming-Conventions/#use-the-relevant-http-verb-for-each-action","title":"Use the relevant HTTP Verb for each action.","text":"<ul> <li>Use <code>GET</code> requests for reading data</li> <li><code>POST</code> requests should be creating new items or uploading files</li> <li><code>PUT</code> requests should be used for updating existing items</li> <li><code>DELETE</code> requests should be used for deleting data</li> </ul> <p>If we consider each endpoint's path to be a specific object, then it makes sense that each HTTP verb is performing the relevant action on that object. E.g. a <code>GET</code> request will retrieve the object, a <code>PUT</code> request will modify the same object, and a <code>DELETE</code> request would delete that same object.</p> <p>For <code>GET</code> requests, only identifiers (e.g. numerical IDs or Paths) should go in to the URL; filters, sorting or pagination (i.e. <code>skip</code> and <code>take</code>) parameters should be included as Query String values (implement the <code>IQueryStringRequest</code> interface). In extreme cases it might be necessary to use a <code>POST</code> request to include all the required parameters but avoid doing this if at all possible as it strictly speaking the wrong verb. Some examples below:</p> <ul> <li><code>/{version}/{client}/assets/{skip}/{take}</code> - instead use <code>/{version}/{client}/assets?skip={skip}&amp;take={take}</code></li> </ul> <p>In principle, there could be several identical looking URLs - but using different HTTP Verbs would perform different actions. E.g.</p> <ul> <li><code>GET /{version}/{client}/jobs</code> - Get all jobs. This may include pagination or filtering as query string </li> <li><code>GET /{version}/{client}/jobs/{JobId}</code> - Get details for a specific job</li> <li><code>PUT /{version}/{client}/jobs/{JobId}</code> - Update a job (e.g. set its status to Complete - the exact properties to be updated would live in the request body)</li> <li><code>DELETE /{version}/{client}/jobs/{JobId}</code> - Delete the job</li> </ul> <p>Wherever possible avoid putting an action into the URL if it can be indicated by the HTTP Verb. The only exception to this is where there are multiple similar actions that would otherwise need identical URLs. For example:</p> <ul> <li><code>POST /{version}/{client}/assets/deleteasset/{id}</code> - this is very bad practice, instead use the below</li> <li><code>DELETE /{version}/{client}/assets/{id}</code> - this performs a soft delete on the asset with the specified id</li> <li><code>DELETE /{version}/{client}/assets/{id}/_force</code> - this performs a hard delete on the same asset</li> </ul> <p>The last case is effectively a variation on the previous action, so adding an extra path component for differentiation is acceptable. Use the convention of adding an underscore to signal this variation.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Endpoint-Naming-Conventions/#filtering-and-pagination","title":"Filtering and pagination","text":"<p>Wherever possible, a <code>GET</code> request should always be used for reading data. If an endpoint represents a collection of objects, (e.g. <code>/{version}/{client}/assets</code> might represent all Assets for a client), then use query string parameters to allow the caller to retrieve the objects they need.</p> <ul> <li>Use <code>?skip</code> and <code>?take</code> parameters to allow the caller to perform pagination</li> <li>Use <code>?sortBy</code> and <code>?sortDir</code> parameters to allow the caller to specify sort ordering</li> <li>Provide whatever parameters make sense in the context of the use-case to allow filtering. E.g. you might provide<ul> <li><code>?collections=A,B</code> to filter by collection A or collection B</li> <li><code>?status=InComplete,ForReview</code> to filter by assets where the status is Incomplete for For Review</li> </ul> </li> </ul> <p>A <code>POST</code> request should only ever be used in the case where the maximum length of a query string is insufficient to supply the complexity of the parameters.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Endpoint-Naming-Conventions/#make-api-endpoints-as-generic-as-possible","title":"Make API Endpoints as generic as possible","text":"<p>Try to avoid having multiple endpoints that do similar things. E.g. instead of having multiple endpoints to get a different set of assets for different purposes, instead extend the existing endpoint to provide more flexibility. E.g. assume we have the following existing endpoint that is already used for Manage Assets:</p> <ul> <li><code>GET /{version}/{client}/assets</code> - Assumes filtering and pagination are provided by Query String parameters</li> </ul> <p>Imagine then that someone needed to get a list of assets for promotion to a website; the example above might not quite meet their needs as it includes metadata-only records for example, so they decide to create a new endpoint specific to their use-case.</p> <ul> <li><code>GET /{version}/{client}/assets/for-promotion/{WebsiteKey}</code></li> </ul> <p>However this isn't ideal, as it creates more code that needs to be maintained and tested. Instead they could simply extend the existing endpoint to add a <code>?includeMetadataOnly=false</code> query string value to make sure the existing endpoint works for them too.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Exceptions-Best-Practices/","title":"Exceptions Best Practices","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Exceptions-Best-Practices/#fundamentals","title":"Fundamentals","text":"<p>Read and be familiar with the following:</p> <ul> <li>Exception Fundamentals </li> <li>Using Exceptions Fundamentals</li> <li>Exception Handling Fundamentals</li> <li>Creating and Throwing Exceptions Fundamentals</li> <li>Compiler-generated Exceptions Fundamentals</li> <li>Best Practices for Exceptions</li> <li>Using Standard Exception Types</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Exceptions-Best-Practices/#best-practices","title":"Best Practices","text":"<p>Engineers should follow Microsoft Exception Best Practises.</p> <p>Engineers should not throw <code>System.Exception, System.SystemException, System.NullReferenceException, or System.IndexOutOfRangeException</code> in their own code.</p> <p>Engineers should throw predefined Exceptions when it is suitable to do so e.g. <code>ArgumentNullException</code></p> <p>Engineers should only create Exceptions when predefined ones do not exist, but should prioritise specificity over a less detailed generic predefined exception.  e.g. Create custom <code>OutOfMoneyException</code> instead of <code>InvalidOperationException(\"OutOfMoney\")</code></p> <p>Engineers should only catch specific types of exceptions not a general Exception catch.</p> <p>Engineers should use finally blocks to clean up resources even if no exceptions have been caught. </p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Logging-Best-Practise/","title":"Logging Best Practise","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Logging-Best-Practise/#dotnet-best-practice","title":"Dotnet Best Practice","text":"<p>Engineers should use Log message template when generating log messages (See Here)</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Logging-Best-Practise/#typescript-best-practice","title":"TypeScript Best Practice","text":"<p>Engineers should not use <code>console.log</code> directly, as this can be visible by end users.  Alternatively we should be using the <code>Tracer</code> objects from the <code>Eden.Scripts</code> library.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Logging-Best-Practise/#general-best-practice","title":"General Best Practice","text":"<p>Engineers should provided enough information engineers understand what was happening when reading the log  e.g. Log the client key responsible for the call <code>_logger.LogInformation(\"Create Controlled Vocabulary '{VocabName}' for client {clientKey}\", request.ControlledVocabulary.Name, clientKey);</code></p> <p>Engineers should use the correct log level when generating logs (see here)</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/","title":"React Best Practises","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#introduction","title":"Introduction","text":"<p>React is a popular open-source JavaScript library used for building user interfaces. It was created by Facebook and has gained a lot of popularity among developers for its declarative and efficient approach to building web applications. TypeScript is a superset of JavaScript that adds optional static typing and other features to the language. By using TypeScript with React, developers can write more reliable, maintainable, and scalable code with fewer errors. In this context, it's important to follow best practices and guidelines to ensure that your code is of the highest quality. In this post, we've provided some guidelines and best practices for writing React code in TypeScript that can help you write better code and improve the overall quality of your application.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#guidelines-for-writing-react-code-in-typescript","title":"Guidelines for Writing React Code in TypeScript","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#writing-in-react","title":"Writing in React","text":"<ol> <li> <p>Read and understand the official React documentation: The React documentation at https://react.dev/ is a valuable resource for learning about React and its ecosystem. Take the time to read and understand the documentation, and follow the best practices and recommendations provided by the React team. This will help you write better code and avoid common pitfalls in your React applications.</p> </li> <li> <p>Use semantic HTML: React will still output HTML, CSS, and JavaScript; with that in mind, it's important we use semantic HTML tags that describe the content of the page rather than just the appearance. This will help with accessibility and search engine optimization, and make your code easier to read and maintain. For further reading, MDN has a good article on semantic HTML.</p> </li> <li> <p>Follow useState best practices: Removing redundant and duplicate data from the state helps ensure that all its pieces stay in sync, similar to how a database engineer normalizes the database structure to minimize bugs. See choosing the state structure for more information.</p> </li> <li> <p>Follow useEffect best practices</p> </li> <li> <p>Don't use unnecessary useEffect: Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone. See you may not always need an effect for more information.</p> </li> <li> <p>Don't use objects in your useEffect: Don't include objects in the dependency array, which can lead to unintended consequences. This is because objects are compared by reference, not by value. If the object reference changes, even if the object properties are the same, the effect will be triggered again. See some reactive value change unintentionally for more information.</p> </li> <li> <p>Keep your components small and focused: Break your UI into smaller, reusable components that are focused on a single responsibility. This will make your code easier to test, maintain, and understand. As a rule of thumb, aim to keep each component under 100 lines of code.</p> </li> <li> <p>Add global files: Enhance the structure by introducing additional folders such as \"constants\" for storing application-wide constants, \"colors\" for maintaining a color palette, and \"styles\" for global CSS styling.</p> </li> <li> <p>Be careful of excessive prop drilling: Avoid excessive prop drilling by using React Query or React Context. These provide a centralized store for managing the state of your application and can help you avoid passing props down through multiple levels of components. Alternatively lifting the state up can help reduce prop drilling see Kent C Dodds article on application state management with react. React.dev also has a great tutorial on managing state. Note we haven't yet needed a global state but lightweight libraries like zustand or jotai could fit that need depending on the use case.</p> </li> <li> <p>Reuse logic with custom hooks: Extract reusable logic into custom hooks to avoid code duplication and improve the reusability of your components. Custom hooks can be used to encapsulate logic related to data fetching, state management, and other common patterns. By using custom hooks, you can make your code more modular and easier to test and maintain. See reusing logic with custom-hooks for more details.</p> </li> <li> <p>Use strict mode: Use the React strict mode to enable additional checks and warnings for potential problems in your code. This can help you catch potential issues early and improve the overall quality of your code.</p> </li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#structuring-your-code","title":"Structuring your code","text":"<ol> <li> <p>Use the Atomic Design Methodology: The Atomic Design Methodology is a system for designing and building UI components in a structured and scalable way. By breaking down your UI into smaller, reusable components, you can create a more flexible and maintainable codebase. See Brad Frost article on Atomic Design for more information.</p> </li> <li> <p>Use CSS modules or styled-components: Use CSS modules or styled-components to manage the styling of your components. These tools provide a way to write scoped styles that are only applied to specific components and can help you avoid naming collisions and other styling issues.</p> </li> <li> <p>Use ESLint and Prettier: Use ESLint and Prettier to enforce coding standards and formatting rules in your codebase. These tools can help you maintain consistency and improve the readability of your code.</p> </li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#fetching-your-data","title":"Fetching your data","text":"<ol> <li>Use React Query: React Query is a library for managing data fetching and caching in React applications. It provides a simple and intuitive API for fetching data from APIs, and supports caching, pagination, and other advanced features. See ReactQuery for more infomation.</li> </ol> <p>Note: the <code>onSuccess()</code>/<code>onError()</code>/<code>onSettled()</code> callback methods in <code>useQuery()</code> will be deprecated in React Query v5.</p> <ol> <li>Use async/await for data fetching: Use async/await syntax to fetch data asynchronously from APIs or other sources. This can help you avoid callback hell and make your code easier to read and maintain.</li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#testing-your-code","title":"Testing your code","text":"<ol> <li>Use React Testing Library: Use React Testing Library to write unit and integration tests for your components. This library provides a simple and intuitive API for testing React components and encourages developers to write tests that reflect the way users interact with the application. See React Testing Library for more information.</li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#other-things-to-be-aware-of","title":"Other things to be aware of","text":"<ol> <li> <p>Use TypeScript generics: Use TypeScript generics to create reusable components and functions that work with a variety of data types. Generics provide a way to write type-safe code that can be used in a flexible and scalable way.</p> </li> <li> <p>Use type inference: Let TypeScript infer types whenever possible, rather than specifying types explicitly. This will make your code more concise and easier to read. For example, you can use the const keyword to infer the type of a variable, and the as const assertion to infer the type of an object literal.</p> </li> <li> <p>Use the latest version of React and TypeScript: Always use the latest version of React and TypeScript to take advantage of the latest features and bug fixes.</p> </li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/React-Best-Practises/#when-reviewing-react-code-in-pull-requests-prs-here-are-some-important-rules-and-considerations-to-keep-in-mind","title":"When reviewing React code in pull requests (PRs), here are some important rules and considerations to keep in mind:","text":"<ol> <li> <p>Follow the style guide: Ensure that the code follows the established coding conventions and style guide of the project. Consistent code style improves readability and maintainability.</p> </li> <li> <p>Code quality and readability: Evaluate the code for clarity, readability, and maintainability. Look for concise and descriptive variable and function names, proper indentation, and comments where necessary.</p> </li> <li> <p>Modular and reusable components: Encourage the use of modular components that have a single responsibility and can be easily reused throughout the application. Avoid large, monolithic components that are difficult to understand and maintain.</p> </li> <li> <p>Handling state and props: Check if the state and props are used appropriately. Avoid unnecessary state management and prefer lifting the state up when needed. Ensure that props are properly validated using PropTypes or TypeScript interfaces.</p> </li> <li> <p>Conditional rendering: Review the usage of conditional rendering. Make sure it is clear, concise, and avoids unnecessary complexity. Consider alternatives like using the logical AND operator (&amp;&amp;) instead of ternary operators for conditional rendering when applicable.</p> </li> <li> <p>Avoiding Unnecessary Closing Tags: Make sure that closing tags are used only when necessary. In React, self-closing tags are preferred for elements that don't have any children. For example, instead of '', you can use '' to indicate a self-closing tag.</p> </li> <li> <p>Eliminate empty tags: Check for instances where tags are rendered without any content or purpose. If a tag doesn't contain any meaningful content or attributes, it may be unnecessary and can be safely removed. Empty tags can clutter the code and make it harder to understand.</p> </li> <li> <p>Effective use of hooks: Verify that React hooks like useState, useEffect, and useContext are used correctly. Ensure that hooks are placed in the correct order and follow the rules of hooks (e.g., not using hooks inside loops or conditionals).</p> </li> <li> <p>Performance considerations: Assess the code for any potential performance bottlenecks. Look for inefficient rendering, excessive re-renders, or unnecessary computations. Suggest optimizations if applicable, such as memoization or using useMemo and useCallback hooks.</p> </li> <li> <p>Error handling: Check if error handling is implemented appropriately. Look for proper error boundaries, handling of asynchronous errors, and displaying helpful error messages to users.</p> </li> <li> <p>Test coverage: Evaluate if the code changes are adequately covered by unit tests or integration tests. Encourage adding or updating tests to maintain good test coverage.</p> </li> <li> <p>Consistency with existing codebase: Ensure that the code aligns with the existing architecture, patterns, and practices followed in the project. Maintain consistency to avoid introducing unnecessary deviations.</p> </li> </ol>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Unit-Integration-Testing/","title":"Unit-&-Integration-Testing","text":""},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Unit-Integration-Testing/#unit-tests","title":"Unit Tests","text":"<p>Unit testing is a fundamental tool in every engineer's toolbox. Unit tests not only help us test our code, they encourage good design practices, reduce the chances of bugs reaching production, and can even serve as examples or documentation on how code functions. Properly written unit tests can also improve engineer efficiency.</p> <p>It is no secret that writing unit tests is hard, and even harder to write well. Writing unit tests also increases the development time for every feature. So why should we write them? Unit tests should:</p> <ul> <li>reduce costs by catching bugs earlier and preventing regressions</li> <li>increase engineer confidence in changes</li> <li>speed up the engineer inner loop</li> <li>act as documentation as code</li> </ul> <p>Unit tests should also be very predictable (i.e. any failures should indicate broken code) and very fast (unit testing a )</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Unit-Integration-Testing/#integration-tests","title":"Integration tests","text":"<p>Integration testing is a software testing methodology used to determine how well individually developed components, or modules of a system communicate with each other. This method of testing confirms that an aggregate of a system, or sub-system, works together correctly or otherwise exposes erroneous behaviour between two or more units of code.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Unit-Integration-Testing/#code-coverage","title":"Code Coverage","text":"<p>The easiest way of quantitatively measuring the quality of automated tests is by examining code coverage. Whilst a high code coverage percentage does not necessarily mean that the tests are of a high quality, it is certainly true that a low code coverage is indicative of there not being enough automated tests!</p> <p>Note that we are more interested in branch coverage than line coverage.</p> <p>There are two ways that our repositories measure and report on code coverage:</p> <ul> <li>By generating an HTML report</li> <li>By checking that committed code meets a minimum coverage in GitHub Actions</li> </ul> <p>Note: if the repository does not contain the tools to measure code coverage, follow this guide for .NET repositories to add it.</p> <p>The HTML report can be very simply generated by selecting the <code>Run Code Coverage</code> item from the <code>Tools</code> menu in Visual Studio. This will take a few moments runs the tests and generates the report and displays it in the Visual Studio window. The report gives a detailed breakdown of test coverage by class. Clicking through to a class will then break this down by method and individual line.</p> <p>The report can then be used to:</p> <ul> <li>Give an indication of parts of the code that are not tested (and thus need new tests or test cases writing)</li> <li>A methods having a high number of branches (or high cyclometric complexity) is potentially and indication that the code in the method should be broken down or split out into other classes</li> <li>Provide the current code coverage </li> </ul> <p>The <code>.github/workflows/tests.yml</code> workflow definition file contains the step to validate code coverage, and sets the minimum coverage level for the repository.</p>"},{"location":"Ways-of-Working/Toolkit/Quality-Standards/Unit-Integration-Testing/#code-coverage-requirements","title":"Code Coverage Requirements","text":"<p>As part of our Quality Standards, we require that around 80% of our code is covered by automated testing. When working on a repository, an engineer should ensure that any new code is also covered by new automated tests to maintain or increase this coverage.</p> <p>Existing repositories may not hit this 80% coverage threshold, so expecting to meet it when making a change to an existing repository may not be realistic.</p> <p>When committing code, an engineer should consult the latest coverage report to get the latest branch coverage, and update the <code>BRANCH_THRESHOLD</code> variable in the <code>tests.yml</code>.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/","title":"Exploratory Testing","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#what-is-exploratory-testing","title":"What is Exploratory Testing?","text":"<p>Exploratory Testing is a type of software testing where Test cases are not created in advance but testers check system on the fly. They may note down ideas about what to test before test execution. The focus of exploratory testing is more on testing as a \u201cthinking\u201d activity.</p> <p>Exploratory Testing is all about discovery, investigation, and curiosity. It is a simultaneous process in which testers go through the software of their own accord to get a sense of the quality of the user experience it provides.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#why-exploratory-testing","title":"Why Exploratory Testing?","text":"<p>Under scripted testing, you design test cases first and later proceed with test execution. On the contrary, exploratory testing is a simultaneous process of test design and test execution all done at the same time.</p> <p>Scripted Test Execution is usually a non-thinking activity where testers execute the test steps and compare the actual results with expected results. Such test execution activity should be automated where possible, as does not require many cognitive skills.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#how-we-execute-exploratory-tests","title":"How we execute Exploratory Tests","text":"<p>Guidelines to approach Exploratory Testing follow:</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#1-classify-defectsbugs","title":"1. Classify Defects/Bugs","text":"<ul> <li>Categorise commonly detected faults and identify their root cause</li> <li>Identify risks that must be covered</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#2-create-a-test-charter","title":"2. Create a Test Charter","text":"<p>The Test Charter should include: - Scope of testing - what to test / how it can be tested / what bugs to look out for - Test ideas as a starting point for exploratory testing</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#3-time-box","title":"3. Time Box","text":"<ul> <li>Suggested to time box the session around 90minutes, working in pairs</li> <li>The session must be without interruptions</li> <li>Can be extended or reduced, depending on test progression</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#4-review-results","title":"4. Review Results","text":"<ul> <li>Evaluate the defects</li> <li>Note down any learnings</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#5-debriefing","title":"5. Debriefing","text":"<ul> <li>Communicate results</li> <li>Identify any further testing required?</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#best-practices","title":"Best Practices","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#before-the-exploratory-test-session","title":"Before the Exploratory Test session:","text":"<ul> <li>The mission of testing must be clear</li> <li>Note ideas on what needs to be tested and why</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#during-the-exploratory-test-session","title":"During the Exploratory Test session:","text":"<ul> <li>Engineer can branch out their ideas but never stray from the mission</li> <li>Keep track of any questions and issues raised during exploratory testing session</li> <li>Preferred to pair for more effective </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#following-the-exploratory-test-session","title":"Following the Exploratory Test session:","text":"<p>Document and monitor the following: - Risks - What must be covered - Test Execution Log - Consider recording the test session</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#disadvantages-of-exploratory-testing","title":"Disadvantages of Exploratory Testing","text":"<p>Some disadvantages of Exploratory testing are: - Can be limited by domain knowledge   - Minimise risk by Pairing - Replication of failure/test results can be difficult   - Minimise risk by Pairing / Recording session - Don\u2019t know when to stop   - MAddress by timeboxing the session</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#tooling","title":"Tooling","text":"<p>Here are the tools we use to support Exploratory Testing - Test Charters \u2013 TestRail - Defect Management \u2013 Azure DevOps</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Exploratory-Testing/#references","title":"References","text":"<ul> <li>Guru99</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/","title":"Functional Test Strategy","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#introduction","title":"Introduction","text":"<p>This document defines the overarching functional test strategy followed at AM to accompany and support the SDLC.  Further strategies are available to cover exploratory testing, automated testing etc in more detail.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-objectives","title":"Test Objectives","text":"<p>We use both static and dynamic testing as a means for achieving test objectives.  Both provide information to improve the Backlog Item under test, and our development and testing processes.</p> <p>Our main testing objectives are to:</p> <ul> <li>Verify documentation in order to prevent defects</li> <li>Detect defects existing in the software under test</li> <li>Determine the solution satisfies our Stakeholders needs </li> <li>Demonstrate the software is fit for purpose</li> <li>Gain confidence in and provide information about the level of quality</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-approach","title":"Test Approach","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-levels-responsibility-tools","title":"Test Levels - Responsibility &amp; Tools","text":"<p>This section details the test levels frequently applied and who has responsibility for performing this testing\u202f </p> Test Level Objective Tools Used Responsibility Unit Testing Focus on individual components Delivery Team Integration Testing Focus on interactions between components or systems Delivery Team System Testing Focus on behaviour and capability of the whole system are as designed and specified TestPad / Playwright / BrowserStack / Azure DevOps Delivery Team Business Acceptance Testing (BAT) Focus on validating the fitness of use of the system in a real or simulated operational environment Stakeholders"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-types","title":"Test Types","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#static-testing","title":"Static Testing","text":"<ul> <li>Testing at specification level without execution of the software e.g. reviewing Backlog Items</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#functional-testing","title":"Functional Testing","text":"<ul> <li>Functional testing is based on the analysis of the behaviour of the component / system i.e. \u2018what it does\u2019</li> <li>Ensures the product meets our stakeholders' requirements and doesn\u2019t have any major bugs</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#confirmation-testing","title":"Confirmation Testing","text":"<ul> <li>When a test fails and a defect reported, we can expect a new version of the software that has had the defect fixed.  In this case, we will need to execute the test again to confirm the defect has indeed been resolved </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#regression-testing","title":"Regression Testing","text":"<ul> <li>Verify that modifications in the software or environment have not caused unintended adverse side effects and that the system still meets its requirements</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#smoke-testing","title":"Smoke Testing","text":"<ul> <li>These are basic tests that are quick to execute with the goal of ensuring the major features of the system are working as expected </li> <li>Smoke tests are useful following a new build/release:</li> <li>To verify a successful build/release</li> <li>To decide whether more expensive testing can commence</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#business-acceptance-testing-bat","title":"Business Acceptance Testing (BAT)","text":"<ul> <li>This tends to be the last phase of testing.  During BAT, our Stakeholders test to make sure the software can handle required tasks in real-world scenarios, according to requirements</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-design-techniques","title":"Test Design Techniques","text":"<p>There are many different types of software testing techniques, each with its own strengths and weaknesses.  At AM, we are not limited to which technique is used and it is therefore left to the judgement of the Engineer.  Following is a list of common test techniques: </p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#specification-based","title":"Specification Based","text":"<ul> <li>Equivalence Partitioning</li> <li>Boundary Value Analysis</li> <li>Decision Tables</li> <li>Pairwise</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#experience-based","title":"Experience Based","text":"<ul> <li>Error Guessing</li> <li>Checklist-Based</li> <li>Exploratory</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#supported-browsers-devices","title":"Supported Browsers &amp; Devices","text":"<p>Please refer to the knowledgebase for supported browser for each platform</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#test-process","title":"Test Process","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#readying","title":"Readying","text":"<p>Consider how the team will approach testing the backlog Item and note a high-level strategy</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#planning","title":"Planning","text":"<p>In the planning phase, we aim to:</p> <ul> <li>Identify test scenarios</li> <li>Define the test approach, including:</li> <li>Assess which scenarios can be automated\u202f </li> <li>Define approach to manual testing</li> <li>Identify test data required</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#execution","title":"Execution","text":"<p>Once development of the Backlog Item is available on a test environment, the test approach is executed.  Further details on assessing results can be found in the relevant test strategy (e.g. Manual Test Strategy / Automation Test Strategy)</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#exit-criteria","title":"Exit Criteria","text":"<p>Exit Criteria is discussed on a per Backlog Item basis.  Points to consider:</p> <ul> <li>Number of Test Scenarios executed\u202f </li> <li>Desired and sufficient coverage of the requirements  </li> <li>Software delivered has not regressed</li> <li>Identified defects are addressed</li> <li>Any high priority/severity defects outstanding\u202f </li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#defectbug-management","title":"Defect/Bug Management","text":"<p>Defects are raised in Azure DevOps as a child task of the relevant Backlog Item.</p> <p>Production Bugs are raised in Azure DevOps as a Backlog Item.</p> <p>As a minimum, the following data is logged:</p> <ul> <li>Test Data</li> <li>Steps to replicate the defect or bug</li> <li>Expected Results</li> <li>Actual Results</li> <li>Test Evidence, where possible</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#release-control","title":"Release Control","text":"<p>Please refer to the Release Management documentation //TO DO</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Functional-Test-Strategy/#other-strategies","title":"Other strategies","text":"<p>The following strategies are an extension to this Functional Test Strategy:</p> <ul> <li>Manual Testing Strategy //TO DO</li> <li>Automation Testing Strategy //TO DO</li> <li>Testing Package Dependencies //TO DO</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Best-Practices-For-Parameterization-With-Gherkin/","title":"How to pass in parameterization with Gherkin (Regression Suites)","text":""},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Best-Practices-For-Parameterization-With-Gherkin/#introduction","title":"Introduction","text":"<p>This document outlines best practices to follow when writing Gherkin scenarios for Playwright test scripts. It is important to note that this is only applicable to the Eden and Qtui Front End regression suites, as these are the only suites that use Gherkin.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Best-Practices-For-Parameterization-With-Gherkin/#scenario","title":"Scenario:","text":"<ul> <li>Represents a single test case with fixed steps and data.</li> <li>Does not support Examples tables for parameterization.</li> <li>Each Scenario is executed as a standalone test.</li> </ul> <p>Example: Scenario:</p> <p> </p> <p>This is a single test case for downloading a PDF file.</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Best-Practices-For-Parameterization-With-Gherkin/#scenario-outline","title":"Scenario Outline:","text":"<ul> <li>Used for parameterized testing.</li> <li>Allows you to define a template for a test case with placeholders (using angle brackets) for dynamic data.</li> <li>The placeholders are replaced with actual values from the Examples table during execution</li> <li>Requires an Examples table to provide multiple sets of data for the placeholders.</li> <li>Each row in the Examples table generates a separate test case.</li> </ul> <p>Example: Scenario Outline:</p> <p> </p> <p>Notice how , 'download format' is passed in the scenario outline title with angle brackets and it MUST be.</p> <ul> <li> <p>This generates two test cases:</p> <ul> <li>One for format = PDF.</li> <li>Another for format = JPG.</li> </ul> </li> </ul> <p>And it is here through the reporting (much clearer)</p> <p> </p> <p>In summary:</p> <ul> <li>use Scenario for single test cases</li> <li>use Scenario Outline when you need to test the same steps with multiple data sets.</li> </ul>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/","title":"Playwright Test Automation Guidelines","text":"","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#introduction","title":"Introduction","text":"<p>This document outlines best practices to follow when writing Playwright test scripts.</p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#locating-selectors","title":"Locating selectors","text":"<p>When planning testing at the readying phase of a work item, locators must be considered.  This allows Engineers to plan any additional work needed in order to enable our best practices.</p> <p>It is important to use a locator that is robust and does not depend on the DOM structure.</p> <p>To make our tests resilient, we prioritise user-facing attributes and explicit contracts when locating elements on a page.  This could be text, a button name, an element's aria-label etc.</p> <p>We NEVER use CSS or XPath locators.  CSS and XPath are not recommended as the DOM can often change leading to non resilient tests. Instead, we use a locator that is close to how the user perceives the page such as role locators or define an explicit testing contract using test ids as described above.</p> <p>Keep selectors up-to-date: Regularly review and update your selectors to ensure they are still accurate and efficient. When the application under test changes, be proactive in updating the selectors in your page files to prevent your tests from breaking</p> <p>Playwright recommended built-in locators:</p> <ul> <li>page.getByRole() to locate by explicit and implicit accessibility attributes.</li> <li>page.getByText() to locate by text content.</li> <li>page.getByLabel() to locate a form control by associated label's text.</li> <li>page.getByPlaceholder() to locate an input by placeholder.</li> <li>page.getByAltText() to locate an element, usually image, by its text alternative.</li> <li>page.getByTitle() to locate an element by its title attribute.</li> </ul> <p>If an element cannot be located by any of these, then we look for data-test IDs (for more info click here). </p> <p>Playwright recommended built-in locators when using data-test-IDs:</p> <ul> <li>page.getByTestId() to locate an element based on its data-testid attribute</li> </ul> <p>For further examples of these locators, please follow the Playwright documentation found here</p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#adding-data-test-ids-to-code","title":"Adding data-test-IDs to code","text":"<p>Some Test Engineers can support creating the data-test-IDs where needed, otherwise a Software Engineer can assist.</p> <p>When adding data-test-IDs to code, it is important to follow these guidelines on the knowledgebase, please click here.</p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#use-of-annotations-for-skipping-tests-with-native-playwright","title":"Use of annotations for skipping tests with Native Playwright","text":"<p>This relates to working on these repo's:</p> <ul> <li> <p>Eden (DAM E2E tests)</p> </li> <li> <p>Qts-Clients (Client Manager E2E Tests)</p> </li> <li> <p>Qtui-front-end (Front-End E2E Tests)</p> </li> </ul> <p>When maintaining tests, it is important to use the correct annotations to handle test logic effectively as required, ie, skipping tests.  This is to ensure that the entire test suite is not unnecessarily run and to prevent false negatives. Integrating annotations into our Playwright workflow can dramatically improve our testing efficiency and enable us to gain precise control over which tests run and how they behave.</p> <p>For whichever annotation we use, it is imperative that we put a comment above the annotation to justify why it's being used, to ensure it's clear to other team members.</p> <p>For further examples of annotations playwright support, please follow the Playwright documentation found here</p> <p>In summary:</p> <ul> <li>Use <code>test.only</code> to run a single test. (Playwright will only run the test with the <code>test.only</code> annotation applied to it).</li> </ul> <p>This should be used in instances where we want to focus on a single test and ignore all other tests. </p> <p>We should NEVER merge tests with <code>test.only</code> annotations into the main branch, but it has it's uses when executing tests locally or on work / feature branches at times.</p> <ul> <li>Use <code>test.fixme</code> to mark a test that is known to be failing and requires a fix. (Playwright will not run the test and it will be skipped).</li> </ul> <p>This should be used in instances where the test logic is fine but the test is failing due to a known defect. There should be a BLI in place to fix this within the next 2 sprints and we are aware a fix is in the works. Its imperative we include a comment above the <code>test.fixme</code> annotation to explain why the test is failing, along with a reference ID of the DevOps BLI or the halo ticket ID so there is some form of traceability.</p> <p>We can merge tests with <code>test.fixme</code> annotations into the main branch, but only temporarily. This should then be reverted back to <code>test</code> once the test is fixed.</p> <ul> <li>Use <code>test.skip</code> to skip a test. (Playwright will not run the test and it will be skipped).</li> </ul> <p>There are 4 main instances why we would use this annotation:</p> <p>1 - To skip a test temporarily in order to focus on other tests. This can be beneficial when running tests locally or on work / feature branches, but shouldnt be merged to main in these instances. </p> <p>2 - To skip a work in progress test, whereby the logic in the test would fail at this particular instance in time because it's not ready for testing yet, but we want to keep the test in the codebase for future reference or enhancement. (Instances of this are rare and we should be wary of merging incomplete work into the main branch, therefore its important to review the skipped test frequently and to have a plan of action to complete the test logic so it can be included in the test suite).</p> <p>3 - To skip a test under certain conditions, such as not running the test on a specific browser if it is flaky. For example:</p> <pre><code>        import { test, expect } from '@playwright/test';\n\n        test('Safari-only test', async ({ page, browserName }) =&gt; {\n        test.skip(browserName !== 'webkit', 'This feature is Safari-only');\n        // ...\n        });\n</code></pre> <p>4 - To skip a failing test, under instances when we are unsure of the timeframe of the fix. Again, its imperative we include a comment above the <code>test.skip</code> annotation to explain why the test is failing, along with a reference ID of the associated created DevOps BLI on our test engineer minmi board here so there is some form of traceability. In the instance of a failing test with a known fix in the works, we should use <code>test.fixme</code> instead, explained above.</p> <p>We can merge tests with <code>test.skip</code> annotations into the main branch, but it is important that we review these tests frequently to ensure they are not forgotten.</p> <p>Use of <code>test.fail</code> or <code>@fail</code></p> <p>We do NOT support the use of <code>test.fail</code> or <code>@fail</code> to mark a test that is known to be failing. Playwright will run the test and it will fail in this instance but we put emphasis on fixing the test rather than marking it as a failure. Instead we use SKIP or FIXME annotations dependent on the circumstances, as explained above.</p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#use-of-annotations-for-skipping-tests-with-playwright-bdd-cucumber","title":"Use of annotations for skipping tests with Playwright BDD (Cucumber)","text":"<p>This relates to working on these repo's:</p> <ul> <li> <p>Eden (regression tests)</p> </li> <li> <p>Qtui-front-end (Front-End regression Tests)</p> </li> </ul> <p>The theory is the same as explained above, however the logic works slightly differently:</p> <ul> <li> <p>Instead of <code>test.only</code>, we use the <code>@only</code> tag in the feature file</p> </li> <li> <p>Instead of <code>test.fixme</code>,  we use the <code>@fixme</code> tag in the feature file</p> </li> <li> <p>Instead of <code>test.skip</code>,  we use the <code>@skip</code> tag in the feature file</p> </li> <li> <p>We do NOT support the use of <code>@fail</code> to mark a test that is known to be failing.</p> </li> </ul> <p> </p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/Playwright-Test-Automation-Guidelines/#visibility-of-skipped-tests-through-reporting-how-to-implement","title":"Visibility of skipped tests through reporting &amp; how to implement","text":"<p>It's important that we have visibility of our skipped tests through our reporting accross our multiple workflows. Therefore we MUST add a brief explanation within the test title itself to explain why the test is being skipped. This will then be visible in the test report and will provide context to the reader. Note, this is in addtion to the comment above the test title that can provide more detail if necessary. </p> <p> </p> <p>It will therefore look like this through the reporting:</p> <p> </p>","tags":["Default","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/","title":"BDD best practices for writing test scenarios","text":"","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#introduction","title":"Introduction","text":"<p>This document outlines Behavior-Driven Development best practices to follow when writing test scenarios</p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#behavior-driven-development-bdd","title":"Behavior-Driven Development (BDD)","text":"<p>BDD test scenarios play a crucial role when creating and maintaining the test suite in Adam Matthew Digital. The BDD scenarios are written in the Gherkin format which is a DSL (Domain Specific Language) that allows you to describe the application's behavior in a human-readable format, and also allows these scenarios to be reused later in multiple test suites.</p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#what-is-cucumber-and-why-do-we-use-it","title":"What is Cucumber and why do we use it?","text":"<p>Cucumber is a testing tool that supports Behavior Driven Development (BDD), we have incorporated it into our regression suite. It offers a way to write tests that anybody can understand, regardless of their technical knowledge, doing so utilizing a syntax called called Gherkin</p> <p> </p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#what-is-gherkin","title":"What is Gherkin?","text":"<p>Gherkin is a very simple language that uses a set of keywords to define the structure and behavior of our tests. It is easily readable by both non-technical and technical members of the team. It features a set of grammar rules that makes plain text structured enough for Cucumber to understand it.</p> <p>The scenario below is written in Gherkin:</p> <p> </p> <p>Gherkin serves multiple purposes: </p> <ul> <li>Unambiguous executable specification</li> <li>Automated testing using Cucumber</li> <li>Document how the system actually behaves</li> </ul>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#understanding-gherkin-syntax-and-creating-feature-files","title":"Understanding Gherkin syntax And Creating feature files","text":"<p>These are the primary components of Gherkin syntax:</p> <p>\u2022   Feature: A high-level description of a software feature or functionality being tested. It is always located on the top of the feature file.</p> <p>\u2022   Scenario: A specific use case of the feature that is being tested.</p> <p>\u2022   Given: Describes the initial state or preconditions of the system before the scenario.</p> <p>\u2022   When: Describes the action or event that triggers the scenario.</p> <p>\u2022   Then: Describes the expected outcome or postconditions of the system after the scenario.</p> <p>\u2022   And: Successive step</p> <p>The BDD test scenarios reside in the appropriate feature files, that reside in a special folder called \u2018features\u2019, and have the \u2018.feature\u2019 file extension associated with them.</p> <p>Here is an example of a feature file for the Home Page:</p> <p> </p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#gherkin-best-practice-using-the-specflow-editor","title":"Gherkin Best practice - using the specflow editor","text":"<p>Using the Specflow Gherkin editor is recommended. </p> <p>It is a tool that allows you to write, download and share Gherkin Feature Files. The text can also copied and pasted out straight into DevOps or Visual Studio Code as required. </p> <p>The editor is bundled with a number of handy features to enable teams to collaborate more efficiently and write better Gherkin. The Gherkin Editor is constantly improving with additional features added based on what our user community requests.</p> <p> </p> <p>In a similar fashion to the way in which Visual studio code works, there is an intelligent editor with intellisense , Specflow allows:</p> <ul> <li> <p>Highlighting of Gherkin keywords</p> </li> <li> <p>Automatic table formatting</p> </li> <li> <p>Variable highlighting</p> </li> <li> <p>Validating of your feature file</p> </li> </ul> <p>Note: The editor has a 15,000 character limit and you can store a maximum of 25 feature files.</p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#writing-meaningful-feature-descriptions","title":"Writing meaningful Feature descriptions","text":"<p>The feature file starts with the feature description. The purpose of the Feature keyword is to provide a clear understanding of the software feature that is being tested, and to group related scenarios.</p> <p>The first primary keyword in a Gherkin document must always be Feature, followed by a : and a short text that describes the feature.</p> <p>These description lines are ignored by Cucumber at runtime, but are available for reporting.</p> <p>\u2022   Be concise and descriptive, focusing on the functionality being tested. \u2022   Avoid technical jargon and write in a language that both technical and non-technical stakeholders can understand.</p> <p>Here is an example below from our regression suite:</p> <p> </p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#defining-clear-and-concise-scenarios","title":"Defining clear and concise Scenarios","text":"<p>Each Scenario represents a single, specific example of the feature's behavior. Please follow these guidelines when writing the scenarios:</p> <p>\u2022   Use simple language that is easy to understand for both technical and non-technical stakeholders.</p> <p>\u2022   Focus on one specific aspect or use case of the feature being tested.</p> <p>\u2022   Ensure that the Scenario can be executed independently and does not rely on the state of other Scenarios.</p> <p>\u2022   It is preferred to start a GIVEN statement on the page the test is being executed. This avoids unnecessary steps to navigate from elsewhere to the tested page, keeping our tests more concise and readable. An example can be seen on the screenshot below, </p> <p></p> <p>\u2022   Under each scenario, only one GIVEN statement should exist. This again makes the feature files more readable. </p> <p>\u2022   It is also important to note that for some scenarios a WHEN statement is not needed. For example, if the test is to navigate to a page and checking if a list of elements were present, this wouldn't need a WHEN statement. This example can be seen in practice in the screenshot below.</p> <p></p> <p>\u2022   Finally, as a best practice we are currently experimenting on using just one WHEN and THEN statement for each scenario. This means that we will be using AND statements if there are successive steps under each of these WHEN and THEN statements. This also means that we will avoid having a WHEN after a THEN. This will make the tests more readable as it will be clear from the feature file, which steps are the initial state, the actions and the expected outcome. This is an experiment for the time being. This approach will be continually be monitored as the solutions get larger. An example can be seen in the screenshot below.</p> <p></p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#turning-feature-files-into-reusable-and-modular-step-definitions","title":"Turning Feature files into reusable and modular Step Definitions","text":"<p>Step definitions connect Gherkin steps to programming code. A step definition carries out the action that should be performed by the step. So step definitions hard-wire the specification to the implementation.</p> <p> </p> <p>Step definitions can be written in many programming languages. Here is an example using JavaScript:</p> <p> </p> <p>Here is an example below from our regression suite:</p> <p> </p> <p>One of the greatest benefits of using BDD is the reusable scenarios or to be more precise the reusable step definitions, and this is important to understand to fully grasp the significance of the BDD approach.</p> <p>Let\u2019s start off with explaining the approach.</p> <p>As we have already seen, Given, When, Then, And represent test steps in each scenario.</p> <p>Each of these steps has a description or a step definition, for an example:</p> <p>Given the user is on the staging site</p> <p>In this case a step definition would be \u2018a user is on the staging site\u2019.</p> <p>Behind this step definition there is code that is executed. This code is in the step definition file, which resides in the \u2018step-definition\u2019 folder. The grouping of these step definitions in the AMD case are based on the functionality\u2019s location. In the hypothetical example above that would be something like the step-definition file \u201cLoginPageDefinitions.ts\u201d</p> <p>This step definition in the feature file can be reused elsewhere as well, in other scenarios.</p> <p>For an example:</p> <p>Scenario: Successful login from the staging site </p> <p>Given a user is on the staging site</p> <p>When the user navigates to the AMD login page</p> <p>And the user enters valid username and password</p> <p>And clicks on the Login button</p> <p>Then the user should be redirected to the dashboard</p> <p>As you can see in this hypothetical scenario, the \u2018the user navigates to the AMD login page\u2019 was moved to the When step.</p> <p>That said, this just shows the infinite capabilities of these tests and how different scenarios can be made by combining these test steps.</p> <p>To create reusable and modular Step Definitions, follow these best practices:</p> <p>\u2022   Write Step Definitions that are concise, focused, and implement only the necessary actions for the given step. </p> <p>In the example above, a clear distinction was made: \u2018clicks on the staging site Login button\u2019 \u2018clicks on the Login button\u2019</p> <p>This is because, the selectors or the actions taken, for the login button, might be different on the staging site.</p> <p>\u2022   Use expressive and clear language in your Step Definitions to ensure they are easy to understand and maintain.</p> <p>By following these best practices, you can create BDD test scenarios that are easy to read, understand, and maintain, allowing both technical and non-technical stakeholders to collaborate effectively on the testing process.</p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#creating-and-organizing-step-definition-files","title":"Creating and Organizing Step Definition Files","text":"<p>As we said earlier, the Step definition files contain the code that connects the Gherkin steps in your feature files to the actual implementation of the test. These files are crucial for maintaining the readability and modularity of your BDD test suite. Here are some best practices for creating and organizing step definition files:</p> <ol> <li> <p>Naming convention: Use a consistent naming convention for your step definition files. A common approach is to name them based on the feature or page they are associated with, followed by the word \"Definitions\" (e.g., DocumentsListDefinitions.ts, ListPageDefinitions.ts).</p> </li> <li> <p>Folder structure: Store step definition files in a dedicated folder, typically named step-definitions. This keeps your test code organized and makes it easier to locate step definitions.</p> </li> <li> <p>One-to-one mapping: Create a one-to-one mapping between feature files and their corresponding step definition files. This approach simplifies the process of locating the code related to specific scenarios. (Example: If you have a loginPage.ts create a LoginPageDefinitions.ts step-definition file).</p> </li> <li> <p>Modularity: Write modular step definitions by breaking down complex actions into smaller, reusable functions. This practice promotes maintainability and enables you to reuse code across multiple steps and scenarios.</p> </li> <li> <p>Parameterization: Use parameters in your step definitions to make them more flexible and reusable. This allows you to write more concise and expressive test scenarios. In the example below, \u201cQA\u201d, \u201cQA members\u201d and \u201c\u201d are the parameters that can be changed.  <p>Here is an example hypothetical step definition to fully understand the explanation above </p> <p> </p> <p>Let\u2019s take the \u2018User conducts a search for \"\" filter input\u2019. <p>This is how the code looks like in the step-definition file. Please notice the parametrization \u201c{string}\u201d for \"\". The same would apply for \u201cQA\u201d or \u201cQA members\u201d: <p></p> <p>As you can see we have a searchForValue method in the step-definition file.</p> <p>This method resides in the membersDetailsPage.ts, which is located in the \u2018pages\u2019 folder.</p> <p></p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#page-files","title":"Page files","text":"<p>A \"page file\" in the context of automated testing and the Page Object Model (POM) is a file that represents a specific page or a part of a web application. The page file contains a class or an object that encapsulates the selectors and actions specific to that page. This abstraction allows you to interact with the web application in a more maintainable, reusable, and readable way within your test suite.</p> <p>As we saw with the example above, that is where we write the actions or methods that interact with the web elements.</p> <p>Firstly, we create a class and name this accordingly. For example; AdvancedSearchPage</p> <p></p> <p>Secondly, we create readonly locators for the objects that appear on the Advanced Search Page:</p> <p></p> <p>Then we create a constructor to house all of those objects. Constructors essentially allow the creation of objects from classes. </p> <p>Here are samples of methods that might reside in the pages file:</p> <p> </p> <p>this.LoginButton is the selector for the login button, that also resides in the Page file.</p>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Best-Practices/BDD-best-practices-for-writing-test-scenarios/#references","title":"References","text":"<ul> <li>Specflow - Gherkin editor</li> <li>Specflow - Gherkin editor documentation</li> <li>Cucumber - Gherkin notes</li> </ul>","tags":["Default","BDD","Test"]},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/","title":"Testing WorkFlow","text":"<p>This diagram outlines WHEN we need to execute our End to End (E2E) Regression tests on QA and LIVE environments.  </p> <p></p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#test-implementation","title":"Test implementation","text":"<p>Please note, it is not mandatory to implement or execute all 'test types', such as automation, manual and exploratory testing. Our focus is on automated testing. We should only manually or exploratory test in the absence of automation, or in addition to it, and always to a purposeful objective. The type of testing implemented will be driven by many factors and is very heavily dependent on the individual backlog item. Smoke testing notes are often written or at least started in this phase, and later revised in the Smoke Test Implementation state. </p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#what-is-the-difference-between-manual-and-exploratory-testing","title":"What is the difference between Manual and exploratory testing?","text":"<p>In a nutshell, manual testing is generally very structured and rigid, it involves writing out test steps and then executing them. What it lacks is the ability for a tester to think outside the box and have the freedom to use their skills, experience and knowledge. Although manual testing can have its place and benefits, so can exploratory testing and it is a combination of these test types (including automation), which contribute to test coverage and overall quality and confidence in testing. </p> <p>For more information on Exploratory testing, please see: Exploratory Testing </p> <p>For more information on the differences between Manual and Exploratory testing, please see: Exploratory Testing Vs Scripted Testing </p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#qa-test-execution","title":"QA Test execution","text":"<p>This should involve: - Running playwright tests on ALL browsers (where applicable) </p> <p>The above should be run against the relevant repo, in GitHub actions:</p> <p>EDEN - DAM E2E Tests</p> <p>Qts-clients - Clients manager E2E Tests</p> <p>qtui front end - Front End / CMS E2E Tests</p> <p>qtui front end - Front End / CMS Regression Tests</p> <p>qtms-oai - OAI Open Archives Initiative (API) E2E Tests</p> <p>For more information, please also see the following document: Process to follow when running E2E tests after releases</p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#what-is-the-triage-loop","title":"What is the triage Loop?","text":"<p>As a result of QA Test Execution, defects may be discovered which need to be fixed, deployed and re-tested. This may involve updating requirements, updating existing test scripts or writing new ones entirely. This triage loop continues until (ideally) there is no presence of defects and there is team confidence in the quality of the implementation. </p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#smoke-test-implementation","title":"Smoke Test implementation","text":"<p>Smoke test notes are often started in the Test implementation stage. However, the reason Smoke test Implementation is added after QA execution is a result of the possible Triage loop (explained above). If a defect is found which requires a change to development implementation, then a corresponding test will need to be updated or written (if no existing coverage). Ideally, we would be covering this with automation. However, it's also not a bad idea to have a smoke test note to manually verify it upon release. This is a 'sanity' test and gives further confidence in the quality. </p>"},{"location":"Ways-of-Working/Toolkit/Test-Engineering/Testing-workflow/#live-test-execution","title":"Live Test execution","text":"<p>This should involve:</p> <ul> <li>Running ALL E2E tests, on all repos, (where applicable)</li> <li>Running E2E tests on ALL browsers (where applicable)</li> <li>Executing Smoke tests (usually on Chrome)</li> </ul> <p>If any Bugs are found on Live environments then (depending on the Risk/Result of that bug) we either roll back to a previous deployment version or create a new Backlog Item to fix the Bug. </p>"}]}